
CTRL_MC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000023d0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000116  00800060  000023d0  00002464  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800176  00800176  0000257a  2**0
                  ALLOC
  3 .stab         0000261c  00000000  00000000  0000257c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000013f7  00000000  00000000  00004b98  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  00005f8f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001d3  00000000  00000000  0000610f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000200f  00000000  00000000  000062e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001170  00000000  00000000  000082f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001001  00000000  00000000  00009461  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a0  00000000  00000000  0000a464  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c1  00000000  00000000  0000a604  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000008ae  00000000  00000000  0000a8c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b173  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 61 0f 	jmp	0x1ec2	; 0x1ec2 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 94 0f 	jmp	0x1f28	; 0x1f28 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 ed       	ldi	r30, 0xD0	; 208
      68:	f3 e2       	ldi	r31, 0x23	; 35
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 37       	cpi	r26, 0x76	; 118
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a6 e7       	ldi	r26, 0x76	; 118
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 37       	cpi	r26, 0x7A	; 122
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <main>
      8a:	0c 94 e6 11 	jmp	0x23cc	; 0x23cc <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 3d 11 	jmp	0x227a	; 0x227a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 59 11 	jmp	0x22b2	; 0x22b2 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 49 11 	jmp	0x2292	; 0x2292 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 65 11 	jmp	0x22ca	; 0x22ca <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 49 11 	jmp	0x2292	; 0x2292 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 65 11 	jmp	0x22ca	; 0x22ca <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 3d 11 	jmp	0x227a	; 0x227a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 59 11 	jmp	0x22b2	; 0x22b2 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 49 11 	jmp	0x2292	; 0x2292 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 65 11 	jmp	0x22ca	; 0x22ca <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 49 11 	jmp	0x2292	; 0x2292 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 65 11 	jmp	0x22ca	; 0x22ca <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 49 11 	jmp	0x2292	; 0x2292 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 65 11 	jmp	0x22ca	; 0x22ca <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 4d 11 	jmp	0x229a	; 0x229a <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 69 11 	jmp	0x22d2	; 0x22d2 <__epilogue_restores__+0x20>

000007fa <__floatunsisf>:
     7fa:	a8 e0       	ldi	r26, 0x08	; 8
     7fc:	b0 e0       	ldi	r27, 0x00	; 0
     7fe:	e3 e0       	ldi	r30, 0x03	; 3
     800:	f4 e0       	ldi	r31, 0x04	; 4
     802:	0c 94 45 11 	jmp	0x228a	; 0x228a <__prologue_saves__+0x10>
     806:	7b 01       	movw	r14, r22
     808:	8c 01       	movw	r16, r24
     80a:	61 15       	cp	r22, r1
     80c:	71 05       	cpc	r23, r1
     80e:	81 05       	cpc	r24, r1
     810:	91 05       	cpc	r25, r1
     812:	19 f4       	brne	.+6      	; 0x81a <__floatunsisf+0x20>
     814:	82 e0       	ldi	r24, 0x02	; 2
     816:	89 83       	std	Y+1, r24	; 0x01
     818:	60 c0       	rjmp	.+192    	; 0x8da <__stack+0x7b>
     81a:	83 e0       	ldi	r24, 0x03	; 3
     81c:	89 83       	std	Y+1, r24	; 0x01
     81e:	8e e1       	ldi	r24, 0x1E	; 30
     820:	c8 2e       	mov	r12, r24
     822:	d1 2c       	mov	r13, r1
     824:	dc 82       	std	Y+4, r13	; 0x04
     826:	cb 82       	std	Y+3, r12	; 0x03
     828:	ed 82       	std	Y+5, r14	; 0x05
     82a:	fe 82       	std	Y+6, r15	; 0x06
     82c:	0f 83       	std	Y+7, r16	; 0x07
     82e:	18 87       	std	Y+8, r17	; 0x08
     830:	c8 01       	movw	r24, r16
     832:	b7 01       	movw	r22, r14
     834:	0e 94 76 04 	call	0x8ec	; 0x8ec <__clzsi2>
     838:	fc 01       	movw	r30, r24
     83a:	31 97       	sbiw	r30, 0x01	; 1
     83c:	f7 ff       	sbrs	r31, 7
     83e:	3b c0       	rjmp	.+118    	; 0x8b6 <__stack+0x57>
     840:	22 27       	eor	r18, r18
     842:	33 27       	eor	r19, r19
     844:	2e 1b       	sub	r18, r30
     846:	3f 0b       	sbc	r19, r31
     848:	57 01       	movw	r10, r14
     84a:	68 01       	movw	r12, r16
     84c:	02 2e       	mov	r0, r18
     84e:	04 c0       	rjmp	.+8      	; 0x858 <__floatunsisf+0x5e>
     850:	d6 94       	lsr	r13
     852:	c7 94       	ror	r12
     854:	b7 94       	ror	r11
     856:	a7 94       	ror	r10
     858:	0a 94       	dec	r0
     85a:	d2 f7       	brpl	.-12     	; 0x850 <__floatunsisf+0x56>
     85c:	40 e0       	ldi	r20, 0x00	; 0
     85e:	50 e0       	ldi	r21, 0x00	; 0
     860:	60 e0       	ldi	r22, 0x00	; 0
     862:	70 e0       	ldi	r23, 0x00	; 0
     864:	81 e0       	ldi	r24, 0x01	; 1
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	a0 e0       	ldi	r26, 0x00	; 0
     86a:	b0 e0       	ldi	r27, 0x00	; 0
     86c:	04 c0       	rjmp	.+8      	; 0x876 <__stack+0x17>
     86e:	88 0f       	add	r24, r24
     870:	99 1f       	adc	r25, r25
     872:	aa 1f       	adc	r26, r26
     874:	bb 1f       	adc	r27, r27
     876:	2a 95       	dec	r18
     878:	d2 f7       	brpl	.-12     	; 0x86e <__stack+0xf>
     87a:	01 97       	sbiw	r24, 0x01	; 1
     87c:	a1 09       	sbc	r26, r1
     87e:	b1 09       	sbc	r27, r1
     880:	8e 21       	and	r24, r14
     882:	9f 21       	and	r25, r15
     884:	a0 23       	and	r26, r16
     886:	b1 23       	and	r27, r17
     888:	00 97       	sbiw	r24, 0x00	; 0
     88a:	a1 05       	cpc	r26, r1
     88c:	b1 05       	cpc	r27, r1
     88e:	21 f0       	breq	.+8      	; 0x898 <__stack+0x39>
     890:	41 e0       	ldi	r20, 0x01	; 1
     892:	50 e0       	ldi	r21, 0x00	; 0
     894:	60 e0       	ldi	r22, 0x00	; 0
     896:	70 e0       	ldi	r23, 0x00	; 0
     898:	4a 29       	or	r20, r10
     89a:	5b 29       	or	r21, r11
     89c:	6c 29       	or	r22, r12
     89e:	7d 29       	or	r23, r13
     8a0:	4d 83       	std	Y+5, r20	; 0x05
     8a2:	5e 83       	std	Y+6, r21	; 0x06
     8a4:	6f 83       	std	Y+7, r22	; 0x07
     8a6:	78 87       	std	Y+8, r23	; 0x08
     8a8:	8e e1       	ldi	r24, 0x1E	; 30
     8aa:	90 e0       	ldi	r25, 0x00	; 0
     8ac:	8e 1b       	sub	r24, r30
     8ae:	9f 0b       	sbc	r25, r31
     8b0:	9c 83       	std	Y+4, r25	; 0x04
     8b2:	8b 83       	std	Y+3, r24	; 0x03
     8b4:	12 c0       	rjmp	.+36     	; 0x8da <__stack+0x7b>
     8b6:	30 97       	sbiw	r30, 0x00	; 0
     8b8:	81 f0       	breq	.+32     	; 0x8da <__stack+0x7b>
     8ba:	0e 2e       	mov	r0, r30
     8bc:	04 c0       	rjmp	.+8      	; 0x8c6 <__stack+0x67>
     8be:	ee 0c       	add	r14, r14
     8c0:	ff 1c       	adc	r15, r15
     8c2:	00 1f       	adc	r16, r16
     8c4:	11 1f       	adc	r17, r17
     8c6:	0a 94       	dec	r0
     8c8:	d2 f7       	brpl	.-12     	; 0x8be <__stack+0x5f>
     8ca:	ed 82       	std	Y+5, r14	; 0x05
     8cc:	fe 82       	std	Y+6, r15	; 0x06
     8ce:	0f 83       	std	Y+7, r16	; 0x07
     8d0:	18 87       	std	Y+8, r17	; 0x08
     8d2:	ce 1a       	sub	r12, r30
     8d4:	df 0a       	sbc	r13, r31
     8d6:	dc 82       	std	Y+4, r13	; 0x04
     8d8:	cb 82       	std	Y+3, r12	; 0x03
     8da:	1a 82       	std	Y+2, r1	; 0x02
     8dc:	ce 01       	movw	r24, r28
     8de:	01 96       	adiw	r24, 0x01	; 1
     8e0:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     8e4:	28 96       	adiw	r28, 0x08	; 8
     8e6:	ea e0       	ldi	r30, 0x0A	; 10
     8e8:	0c 94 61 11 	jmp	0x22c2	; 0x22c2 <__epilogue_restores__+0x10>

000008ec <__clzsi2>:
     8ec:	ef 92       	push	r14
     8ee:	ff 92       	push	r15
     8f0:	0f 93       	push	r16
     8f2:	1f 93       	push	r17
     8f4:	7b 01       	movw	r14, r22
     8f6:	8c 01       	movw	r16, r24
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	e8 16       	cp	r14, r24
     8fc:	80 e0       	ldi	r24, 0x00	; 0
     8fe:	f8 06       	cpc	r15, r24
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	08 07       	cpc	r16, r24
     904:	80 e0       	ldi	r24, 0x00	; 0
     906:	18 07       	cpc	r17, r24
     908:	88 f4       	brcc	.+34     	; 0x92c <__clzsi2+0x40>
     90a:	8f ef       	ldi	r24, 0xFF	; 255
     90c:	e8 16       	cp	r14, r24
     90e:	f1 04       	cpc	r15, r1
     910:	01 05       	cpc	r16, r1
     912:	11 05       	cpc	r17, r1
     914:	31 f0       	breq	.+12     	; 0x922 <__clzsi2+0x36>
     916:	28 f0       	brcs	.+10     	; 0x922 <__clzsi2+0x36>
     918:	88 e0       	ldi	r24, 0x08	; 8
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	a0 e0       	ldi	r26, 0x00	; 0
     91e:	b0 e0       	ldi	r27, 0x00	; 0
     920:	17 c0       	rjmp	.+46     	; 0x950 <__clzsi2+0x64>
     922:	80 e0       	ldi	r24, 0x00	; 0
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	a0 e0       	ldi	r26, 0x00	; 0
     928:	b0 e0       	ldi	r27, 0x00	; 0
     92a:	12 c0       	rjmp	.+36     	; 0x950 <__clzsi2+0x64>
     92c:	80 e0       	ldi	r24, 0x00	; 0
     92e:	e8 16       	cp	r14, r24
     930:	80 e0       	ldi	r24, 0x00	; 0
     932:	f8 06       	cpc	r15, r24
     934:	80 e0       	ldi	r24, 0x00	; 0
     936:	08 07       	cpc	r16, r24
     938:	81 e0       	ldi	r24, 0x01	; 1
     93a:	18 07       	cpc	r17, r24
     93c:	28 f0       	brcs	.+10     	; 0x948 <__clzsi2+0x5c>
     93e:	88 e1       	ldi	r24, 0x18	; 24
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	04 c0       	rjmp	.+8      	; 0x950 <__clzsi2+0x64>
     948:	80 e1       	ldi	r24, 0x10	; 16
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	a0 e0       	ldi	r26, 0x00	; 0
     94e:	b0 e0       	ldi	r27, 0x00	; 0
     950:	20 e2       	ldi	r18, 0x20	; 32
     952:	30 e0       	ldi	r19, 0x00	; 0
     954:	40 e0       	ldi	r20, 0x00	; 0
     956:	50 e0       	ldi	r21, 0x00	; 0
     958:	28 1b       	sub	r18, r24
     95a:	39 0b       	sbc	r19, r25
     95c:	4a 0b       	sbc	r20, r26
     95e:	5b 0b       	sbc	r21, r27
     960:	04 c0       	rjmp	.+8      	; 0x96a <__clzsi2+0x7e>
     962:	16 95       	lsr	r17
     964:	07 95       	ror	r16
     966:	f7 94       	ror	r15
     968:	e7 94       	ror	r14
     96a:	8a 95       	dec	r24
     96c:	d2 f7       	brpl	.-12     	; 0x962 <__clzsi2+0x76>
     96e:	f7 01       	movw	r30, r14
     970:	e8 59       	subi	r30, 0x98	; 152
     972:	ff 4f       	sbci	r31, 0xFF	; 255
     974:	80 81       	ld	r24, Z
     976:	28 1b       	sub	r18, r24
     978:	31 09       	sbc	r19, r1
     97a:	41 09       	sbc	r20, r1
     97c:	51 09       	sbc	r21, r1
     97e:	c9 01       	movw	r24, r18
     980:	1f 91       	pop	r17
     982:	0f 91       	pop	r16
     984:	ff 90       	pop	r15
     986:	ef 90       	pop	r14
     988:	08 95       	ret

0000098a <__pack_f>:
     98a:	df 92       	push	r13
     98c:	ef 92       	push	r14
     98e:	ff 92       	push	r15
     990:	0f 93       	push	r16
     992:	1f 93       	push	r17
     994:	fc 01       	movw	r30, r24
     996:	e4 80       	ldd	r14, Z+4	; 0x04
     998:	f5 80       	ldd	r15, Z+5	; 0x05
     99a:	06 81       	ldd	r16, Z+6	; 0x06
     99c:	17 81       	ldd	r17, Z+7	; 0x07
     99e:	d1 80       	ldd	r13, Z+1	; 0x01
     9a0:	80 81       	ld	r24, Z
     9a2:	82 30       	cpi	r24, 0x02	; 2
     9a4:	48 f4       	brcc	.+18     	; 0x9b8 <__pack_f+0x2e>
     9a6:	80 e0       	ldi	r24, 0x00	; 0
     9a8:	90 e0       	ldi	r25, 0x00	; 0
     9aa:	a0 e1       	ldi	r26, 0x10	; 16
     9ac:	b0 e0       	ldi	r27, 0x00	; 0
     9ae:	e8 2a       	or	r14, r24
     9b0:	f9 2a       	or	r15, r25
     9b2:	0a 2b       	or	r16, r26
     9b4:	1b 2b       	or	r17, r27
     9b6:	a5 c0       	rjmp	.+330    	; 0xb02 <__pack_f+0x178>
     9b8:	84 30       	cpi	r24, 0x04	; 4
     9ba:	09 f4       	brne	.+2      	; 0x9be <__pack_f+0x34>
     9bc:	9f c0       	rjmp	.+318    	; 0xafc <__pack_f+0x172>
     9be:	82 30       	cpi	r24, 0x02	; 2
     9c0:	21 f4       	brne	.+8      	; 0x9ca <__pack_f+0x40>
     9c2:	ee 24       	eor	r14, r14
     9c4:	ff 24       	eor	r15, r15
     9c6:	87 01       	movw	r16, r14
     9c8:	05 c0       	rjmp	.+10     	; 0x9d4 <__pack_f+0x4a>
     9ca:	e1 14       	cp	r14, r1
     9cc:	f1 04       	cpc	r15, r1
     9ce:	01 05       	cpc	r16, r1
     9d0:	11 05       	cpc	r17, r1
     9d2:	19 f4       	brne	.+6      	; 0x9da <__pack_f+0x50>
     9d4:	e0 e0       	ldi	r30, 0x00	; 0
     9d6:	f0 e0       	ldi	r31, 0x00	; 0
     9d8:	96 c0       	rjmp	.+300    	; 0xb06 <__pack_f+0x17c>
     9da:	62 81       	ldd	r22, Z+2	; 0x02
     9dc:	73 81       	ldd	r23, Z+3	; 0x03
     9de:	9f ef       	ldi	r25, 0xFF	; 255
     9e0:	62 38       	cpi	r22, 0x82	; 130
     9e2:	79 07       	cpc	r23, r25
     9e4:	0c f0       	brlt	.+2      	; 0x9e8 <__pack_f+0x5e>
     9e6:	5b c0       	rjmp	.+182    	; 0xa9e <__pack_f+0x114>
     9e8:	22 e8       	ldi	r18, 0x82	; 130
     9ea:	3f ef       	ldi	r19, 0xFF	; 255
     9ec:	26 1b       	sub	r18, r22
     9ee:	37 0b       	sbc	r19, r23
     9f0:	2a 31       	cpi	r18, 0x1A	; 26
     9f2:	31 05       	cpc	r19, r1
     9f4:	2c f0       	brlt	.+10     	; 0xa00 <__pack_f+0x76>
     9f6:	20 e0       	ldi	r18, 0x00	; 0
     9f8:	30 e0       	ldi	r19, 0x00	; 0
     9fa:	40 e0       	ldi	r20, 0x00	; 0
     9fc:	50 e0       	ldi	r21, 0x00	; 0
     9fe:	2a c0       	rjmp	.+84     	; 0xa54 <__pack_f+0xca>
     a00:	b8 01       	movw	r22, r16
     a02:	a7 01       	movw	r20, r14
     a04:	02 2e       	mov	r0, r18
     a06:	04 c0       	rjmp	.+8      	; 0xa10 <__pack_f+0x86>
     a08:	76 95       	lsr	r23
     a0a:	67 95       	ror	r22
     a0c:	57 95       	ror	r21
     a0e:	47 95       	ror	r20
     a10:	0a 94       	dec	r0
     a12:	d2 f7       	brpl	.-12     	; 0xa08 <__pack_f+0x7e>
     a14:	81 e0       	ldi	r24, 0x01	; 1
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	a0 e0       	ldi	r26, 0x00	; 0
     a1a:	b0 e0       	ldi	r27, 0x00	; 0
     a1c:	04 c0       	rjmp	.+8      	; 0xa26 <__pack_f+0x9c>
     a1e:	88 0f       	add	r24, r24
     a20:	99 1f       	adc	r25, r25
     a22:	aa 1f       	adc	r26, r26
     a24:	bb 1f       	adc	r27, r27
     a26:	2a 95       	dec	r18
     a28:	d2 f7       	brpl	.-12     	; 0xa1e <__pack_f+0x94>
     a2a:	01 97       	sbiw	r24, 0x01	; 1
     a2c:	a1 09       	sbc	r26, r1
     a2e:	b1 09       	sbc	r27, r1
     a30:	8e 21       	and	r24, r14
     a32:	9f 21       	and	r25, r15
     a34:	a0 23       	and	r26, r16
     a36:	b1 23       	and	r27, r17
     a38:	00 97       	sbiw	r24, 0x00	; 0
     a3a:	a1 05       	cpc	r26, r1
     a3c:	b1 05       	cpc	r27, r1
     a3e:	21 f0       	breq	.+8      	; 0xa48 <__pack_f+0xbe>
     a40:	81 e0       	ldi	r24, 0x01	; 1
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	a0 e0       	ldi	r26, 0x00	; 0
     a46:	b0 e0       	ldi	r27, 0x00	; 0
     a48:	9a 01       	movw	r18, r20
     a4a:	ab 01       	movw	r20, r22
     a4c:	28 2b       	or	r18, r24
     a4e:	39 2b       	or	r19, r25
     a50:	4a 2b       	or	r20, r26
     a52:	5b 2b       	or	r21, r27
     a54:	da 01       	movw	r26, r20
     a56:	c9 01       	movw	r24, r18
     a58:	8f 77       	andi	r24, 0x7F	; 127
     a5a:	90 70       	andi	r25, 0x00	; 0
     a5c:	a0 70       	andi	r26, 0x00	; 0
     a5e:	b0 70       	andi	r27, 0x00	; 0
     a60:	80 34       	cpi	r24, 0x40	; 64
     a62:	91 05       	cpc	r25, r1
     a64:	a1 05       	cpc	r26, r1
     a66:	b1 05       	cpc	r27, r1
     a68:	39 f4       	brne	.+14     	; 0xa78 <__pack_f+0xee>
     a6a:	27 ff       	sbrs	r18, 7
     a6c:	09 c0       	rjmp	.+18     	; 0xa80 <__pack_f+0xf6>
     a6e:	20 5c       	subi	r18, 0xC0	; 192
     a70:	3f 4f       	sbci	r19, 0xFF	; 255
     a72:	4f 4f       	sbci	r20, 0xFF	; 255
     a74:	5f 4f       	sbci	r21, 0xFF	; 255
     a76:	04 c0       	rjmp	.+8      	; 0xa80 <__pack_f+0xf6>
     a78:	21 5c       	subi	r18, 0xC1	; 193
     a7a:	3f 4f       	sbci	r19, 0xFF	; 255
     a7c:	4f 4f       	sbci	r20, 0xFF	; 255
     a7e:	5f 4f       	sbci	r21, 0xFF	; 255
     a80:	e0 e0       	ldi	r30, 0x00	; 0
     a82:	f0 e0       	ldi	r31, 0x00	; 0
     a84:	20 30       	cpi	r18, 0x00	; 0
     a86:	a0 e0       	ldi	r26, 0x00	; 0
     a88:	3a 07       	cpc	r19, r26
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	4a 07       	cpc	r20, r26
     a8e:	a0 e4       	ldi	r26, 0x40	; 64
     a90:	5a 07       	cpc	r21, r26
     a92:	10 f0       	brcs	.+4      	; 0xa98 <__pack_f+0x10e>
     a94:	e1 e0       	ldi	r30, 0x01	; 1
     a96:	f0 e0       	ldi	r31, 0x00	; 0
     a98:	79 01       	movw	r14, r18
     a9a:	8a 01       	movw	r16, r20
     a9c:	27 c0       	rjmp	.+78     	; 0xaec <__pack_f+0x162>
     a9e:	60 38       	cpi	r22, 0x80	; 128
     aa0:	71 05       	cpc	r23, r1
     aa2:	64 f5       	brge	.+88     	; 0xafc <__pack_f+0x172>
     aa4:	fb 01       	movw	r30, r22
     aa6:	e1 58       	subi	r30, 0x81	; 129
     aa8:	ff 4f       	sbci	r31, 0xFF	; 255
     aaa:	d8 01       	movw	r26, r16
     aac:	c7 01       	movw	r24, r14
     aae:	8f 77       	andi	r24, 0x7F	; 127
     ab0:	90 70       	andi	r25, 0x00	; 0
     ab2:	a0 70       	andi	r26, 0x00	; 0
     ab4:	b0 70       	andi	r27, 0x00	; 0
     ab6:	80 34       	cpi	r24, 0x40	; 64
     ab8:	91 05       	cpc	r25, r1
     aba:	a1 05       	cpc	r26, r1
     abc:	b1 05       	cpc	r27, r1
     abe:	39 f4       	brne	.+14     	; 0xace <__pack_f+0x144>
     ac0:	e7 fe       	sbrs	r14, 7
     ac2:	0d c0       	rjmp	.+26     	; 0xade <__pack_f+0x154>
     ac4:	80 e4       	ldi	r24, 0x40	; 64
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	a0 e0       	ldi	r26, 0x00	; 0
     aca:	b0 e0       	ldi	r27, 0x00	; 0
     acc:	04 c0       	rjmp	.+8      	; 0xad6 <__pack_f+0x14c>
     ace:	8f e3       	ldi	r24, 0x3F	; 63
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	a0 e0       	ldi	r26, 0x00	; 0
     ad4:	b0 e0       	ldi	r27, 0x00	; 0
     ad6:	e8 0e       	add	r14, r24
     ad8:	f9 1e       	adc	r15, r25
     ada:	0a 1f       	adc	r16, r26
     adc:	1b 1f       	adc	r17, r27
     ade:	17 ff       	sbrs	r17, 7
     ae0:	05 c0       	rjmp	.+10     	; 0xaec <__pack_f+0x162>
     ae2:	16 95       	lsr	r17
     ae4:	07 95       	ror	r16
     ae6:	f7 94       	ror	r15
     ae8:	e7 94       	ror	r14
     aea:	31 96       	adiw	r30, 0x01	; 1
     aec:	87 e0       	ldi	r24, 0x07	; 7
     aee:	16 95       	lsr	r17
     af0:	07 95       	ror	r16
     af2:	f7 94       	ror	r15
     af4:	e7 94       	ror	r14
     af6:	8a 95       	dec	r24
     af8:	d1 f7       	brne	.-12     	; 0xaee <__pack_f+0x164>
     afa:	05 c0       	rjmp	.+10     	; 0xb06 <__pack_f+0x17c>
     afc:	ee 24       	eor	r14, r14
     afe:	ff 24       	eor	r15, r15
     b00:	87 01       	movw	r16, r14
     b02:	ef ef       	ldi	r30, 0xFF	; 255
     b04:	f0 e0       	ldi	r31, 0x00	; 0
     b06:	6e 2f       	mov	r22, r30
     b08:	67 95       	ror	r22
     b0a:	66 27       	eor	r22, r22
     b0c:	67 95       	ror	r22
     b0e:	90 2f       	mov	r25, r16
     b10:	9f 77       	andi	r25, 0x7F	; 127
     b12:	d7 94       	ror	r13
     b14:	dd 24       	eor	r13, r13
     b16:	d7 94       	ror	r13
     b18:	8e 2f       	mov	r24, r30
     b1a:	86 95       	lsr	r24
     b1c:	49 2f       	mov	r20, r25
     b1e:	46 2b       	or	r20, r22
     b20:	58 2f       	mov	r21, r24
     b22:	5d 29       	or	r21, r13
     b24:	b7 01       	movw	r22, r14
     b26:	ca 01       	movw	r24, r20
     b28:	1f 91       	pop	r17
     b2a:	0f 91       	pop	r16
     b2c:	ff 90       	pop	r15
     b2e:	ef 90       	pop	r14
     b30:	df 90       	pop	r13
     b32:	08 95       	ret

00000b34 <__unpack_f>:
     b34:	fc 01       	movw	r30, r24
     b36:	db 01       	movw	r26, r22
     b38:	40 81       	ld	r20, Z
     b3a:	51 81       	ldd	r21, Z+1	; 0x01
     b3c:	22 81       	ldd	r18, Z+2	; 0x02
     b3e:	62 2f       	mov	r22, r18
     b40:	6f 77       	andi	r22, 0x7F	; 127
     b42:	70 e0       	ldi	r23, 0x00	; 0
     b44:	22 1f       	adc	r18, r18
     b46:	22 27       	eor	r18, r18
     b48:	22 1f       	adc	r18, r18
     b4a:	93 81       	ldd	r25, Z+3	; 0x03
     b4c:	89 2f       	mov	r24, r25
     b4e:	88 0f       	add	r24, r24
     b50:	82 2b       	or	r24, r18
     b52:	28 2f       	mov	r18, r24
     b54:	30 e0       	ldi	r19, 0x00	; 0
     b56:	99 1f       	adc	r25, r25
     b58:	99 27       	eor	r25, r25
     b5a:	99 1f       	adc	r25, r25
     b5c:	11 96       	adiw	r26, 0x01	; 1
     b5e:	9c 93       	st	X, r25
     b60:	11 97       	sbiw	r26, 0x01	; 1
     b62:	21 15       	cp	r18, r1
     b64:	31 05       	cpc	r19, r1
     b66:	a9 f5       	brne	.+106    	; 0xbd2 <__unpack_f+0x9e>
     b68:	41 15       	cp	r20, r1
     b6a:	51 05       	cpc	r21, r1
     b6c:	61 05       	cpc	r22, r1
     b6e:	71 05       	cpc	r23, r1
     b70:	11 f4       	brne	.+4      	; 0xb76 <__unpack_f+0x42>
     b72:	82 e0       	ldi	r24, 0x02	; 2
     b74:	37 c0       	rjmp	.+110    	; 0xbe4 <__unpack_f+0xb0>
     b76:	82 e8       	ldi	r24, 0x82	; 130
     b78:	9f ef       	ldi	r25, 0xFF	; 255
     b7a:	13 96       	adiw	r26, 0x03	; 3
     b7c:	9c 93       	st	X, r25
     b7e:	8e 93       	st	-X, r24
     b80:	12 97       	sbiw	r26, 0x02	; 2
     b82:	9a 01       	movw	r18, r20
     b84:	ab 01       	movw	r20, r22
     b86:	67 e0       	ldi	r22, 0x07	; 7
     b88:	22 0f       	add	r18, r18
     b8a:	33 1f       	adc	r19, r19
     b8c:	44 1f       	adc	r20, r20
     b8e:	55 1f       	adc	r21, r21
     b90:	6a 95       	dec	r22
     b92:	d1 f7       	brne	.-12     	; 0xb88 <__unpack_f+0x54>
     b94:	83 e0       	ldi	r24, 0x03	; 3
     b96:	8c 93       	st	X, r24
     b98:	0d c0       	rjmp	.+26     	; 0xbb4 <__unpack_f+0x80>
     b9a:	22 0f       	add	r18, r18
     b9c:	33 1f       	adc	r19, r19
     b9e:	44 1f       	adc	r20, r20
     ba0:	55 1f       	adc	r21, r21
     ba2:	12 96       	adiw	r26, 0x02	; 2
     ba4:	8d 91       	ld	r24, X+
     ba6:	9c 91       	ld	r25, X
     ba8:	13 97       	sbiw	r26, 0x03	; 3
     baa:	01 97       	sbiw	r24, 0x01	; 1
     bac:	13 96       	adiw	r26, 0x03	; 3
     bae:	9c 93       	st	X, r25
     bb0:	8e 93       	st	-X, r24
     bb2:	12 97       	sbiw	r26, 0x02	; 2
     bb4:	20 30       	cpi	r18, 0x00	; 0
     bb6:	80 e0       	ldi	r24, 0x00	; 0
     bb8:	38 07       	cpc	r19, r24
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	48 07       	cpc	r20, r24
     bbe:	80 e4       	ldi	r24, 0x40	; 64
     bc0:	58 07       	cpc	r21, r24
     bc2:	58 f3       	brcs	.-42     	; 0xb9a <__unpack_f+0x66>
     bc4:	14 96       	adiw	r26, 0x04	; 4
     bc6:	2d 93       	st	X+, r18
     bc8:	3d 93       	st	X+, r19
     bca:	4d 93       	st	X+, r20
     bcc:	5c 93       	st	X, r21
     bce:	17 97       	sbiw	r26, 0x07	; 7
     bd0:	08 95       	ret
     bd2:	2f 3f       	cpi	r18, 0xFF	; 255
     bd4:	31 05       	cpc	r19, r1
     bd6:	79 f4       	brne	.+30     	; 0xbf6 <__unpack_f+0xc2>
     bd8:	41 15       	cp	r20, r1
     bda:	51 05       	cpc	r21, r1
     bdc:	61 05       	cpc	r22, r1
     bde:	71 05       	cpc	r23, r1
     be0:	19 f4       	brne	.+6      	; 0xbe8 <__unpack_f+0xb4>
     be2:	84 e0       	ldi	r24, 0x04	; 4
     be4:	8c 93       	st	X, r24
     be6:	08 95       	ret
     be8:	64 ff       	sbrs	r22, 4
     bea:	03 c0       	rjmp	.+6      	; 0xbf2 <__unpack_f+0xbe>
     bec:	81 e0       	ldi	r24, 0x01	; 1
     bee:	8c 93       	st	X, r24
     bf0:	12 c0       	rjmp	.+36     	; 0xc16 <__unpack_f+0xe2>
     bf2:	1c 92       	st	X, r1
     bf4:	10 c0       	rjmp	.+32     	; 0xc16 <__unpack_f+0xe2>
     bf6:	2f 57       	subi	r18, 0x7F	; 127
     bf8:	30 40       	sbci	r19, 0x00	; 0
     bfa:	13 96       	adiw	r26, 0x03	; 3
     bfc:	3c 93       	st	X, r19
     bfe:	2e 93       	st	-X, r18
     c00:	12 97       	sbiw	r26, 0x02	; 2
     c02:	83 e0       	ldi	r24, 0x03	; 3
     c04:	8c 93       	st	X, r24
     c06:	87 e0       	ldi	r24, 0x07	; 7
     c08:	44 0f       	add	r20, r20
     c0a:	55 1f       	adc	r21, r21
     c0c:	66 1f       	adc	r22, r22
     c0e:	77 1f       	adc	r23, r23
     c10:	8a 95       	dec	r24
     c12:	d1 f7       	brne	.-12     	; 0xc08 <__unpack_f+0xd4>
     c14:	70 64       	ori	r23, 0x40	; 64
     c16:	14 96       	adiw	r26, 0x04	; 4
     c18:	4d 93       	st	X+, r20
     c1a:	5d 93       	st	X+, r21
     c1c:	6d 93       	st	X+, r22
     c1e:	7c 93       	st	X, r23
     c20:	17 97       	sbiw	r26, 0x07	; 7
     c22:	08 95       	ret

00000c24 <__fpcmp_parts_f>:
     c24:	1f 93       	push	r17
     c26:	dc 01       	movw	r26, r24
     c28:	fb 01       	movw	r30, r22
     c2a:	9c 91       	ld	r25, X
     c2c:	92 30       	cpi	r25, 0x02	; 2
     c2e:	08 f4       	brcc	.+2      	; 0xc32 <__fpcmp_parts_f+0xe>
     c30:	47 c0       	rjmp	.+142    	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c32:	80 81       	ld	r24, Z
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	08 f4       	brcc	.+2      	; 0xc3a <__fpcmp_parts_f+0x16>
     c38:	43 c0       	rjmp	.+134    	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c3a:	94 30       	cpi	r25, 0x04	; 4
     c3c:	51 f4       	brne	.+20     	; 0xc52 <__fpcmp_parts_f+0x2e>
     c3e:	11 96       	adiw	r26, 0x01	; 1
     c40:	1c 91       	ld	r17, X
     c42:	84 30       	cpi	r24, 0x04	; 4
     c44:	99 f5       	brne	.+102    	; 0xcac <__fpcmp_parts_f+0x88>
     c46:	81 81       	ldd	r24, Z+1	; 0x01
     c48:	68 2f       	mov	r22, r24
     c4a:	70 e0       	ldi	r23, 0x00	; 0
     c4c:	61 1b       	sub	r22, r17
     c4e:	71 09       	sbc	r23, r1
     c50:	3f c0       	rjmp	.+126    	; 0xcd0 <__fpcmp_parts_f+0xac>
     c52:	84 30       	cpi	r24, 0x04	; 4
     c54:	21 f0       	breq	.+8      	; 0xc5e <__fpcmp_parts_f+0x3a>
     c56:	92 30       	cpi	r25, 0x02	; 2
     c58:	31 f4       	brne	.+12     	; 0xc66 <__fpcmp_parts_f+0x42>
     c5a:	82 30       	cpi	r24, 0x02	; 2
     c5c:	b9 f1       	breq	.+110    	; 0xccc <__fpcmp_parts_f+0xa8>
     c5e:	81 81       	ldd	r24, Z+1	; 0x01
     c60:	88 23       	and	r24, r24
     c62:	89 f1       	breq	.+98     	; 0xcc6 <__fpcmp_parts_f+0xa2>
     c64:	2d c0       	rjmp	.+90     	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c66:	11 96       	adiw	r26, 0x01	; 1
     c68:	1c 91       	ld	r17, X
     c6a:	11 97       	sbiw	r26, 0x01	; 1
     c6c:	82 30       	cpi	r24, 0x02	; 2
     c6e:	f1 f0       	breq	.+60     	; 0xcac <__fpcmp_parts_f+0x88>
     c70:	81 81       	ldd	r24, Z+1	; 0x01
     c72:	18 17       	cp	r17, r24
     c74:	d9 f4       	brne	.+54     	; 0xcac <__fpcmp_parts_f+0x88>
     c76:	12 96       	adiw	r26, 0x02	; 2
     c78:	2d 91       	ld	r18, X+
     c7a:	3c 91       	ld	r19, X
     c7c:	13 97       	sbiw	r26, 0x03	; 3
     c7e:	82 81       	ldd	r24, Z+2	; 0x02
     c80:	93 81       	ldd	r25, Z+3	; 0x03
     c82:	82 17       	cp	r24, r18
     c84:	93 07       	cpc	r25, r19
     c86:	94 f0       	brlt	.+36     	; 0xcac <__fpcmp_parts_f+0x88>
     c88:	28 17       	cp	r18, r24
     c8a:	39 07       	cpc	r19, r25
     c8c:	bc f0       	brlt	.+46     	; 0xcbc <__fpcmp_parts_f+0x98>
     c8e:	14 96       	adiw	r26, 0x04	; 4
     c90:	8d 91       	ld	r24, X+
     c92:	9d 91       	ld	r25, X+
     c94:	0d 90       	ld	r0, X+
     c96:	bc 91       	ld	r27, X
     c98:	a0 2d       	mov	r26, r0
     c9a:	24 81       	ldd	r18, Z+4	; 0x04
     c9c:	35 81       	ldd	r19, Z+5	; 0x05
     c9e:	46 81       	ldd	r20, Z+6	; 0x06
     ca0:	57 81       	ldd	r21, Z+7	; 0x07
     ca2:	28 17       	cp	r18, r24
     ca4:	39 07       	cpc	r19, r25
     ca6:	4a 07       	cpc	r20, r26
     ca8:	5b 07       	cpc	r21, r27
     caa:	18 f4       	brcc	.+6      	; 0xcb2 <__fpcmp_parts_f+0x8e>
     cac:	11 23       	and	r17, r17
     cae:	41 f0       	breq	.+16     	; 0xcc0 <__fpcmp_parts_f+0x9c>
     cb0:	0a c0       	rjmp	.+20     	; 0xcc6 <__fpcmp_parts_f+0xa2>
     cb2:	82 17       	cp	r24, r18
     cb4:	93 07       	cpc	r25, r19
     cb6:	a4 07       	cpc	r26, r20
     cb8:	b5 07       	cpc	r27, r21
     cba:	40 f4       	brcc	.+16     	; 0xccc <__fpcmp_parts_f+0xa8>
     cbc:	11 23       	and	r17, r17
     cbe:	19 f0       	breq	.+6      	; 0xcc6 <__fpcmp_parts_f+0xa2>
     cc0:	61 e0       	ldi	r22, 0x01	; 1
     cc2:	70 e0       	ldi	r23, 0x00	; 0
     cc4:	05 c0       	rjmp	.+10     	; 0xcd0 <__fpcmp_parts_f+0xac>
     cc6:	6f ef       	ldi	r22, 0xFF	; 255
     cc8:	7f ef       	ldi	r23, 0xFF	; 255
     cca:	02 c0       	rjmp	.+4      	; 0xcd0 <__fpcmp_parts_f+0xac>
     ccc:	60 e0       	ldi	r22, 0x00	; 0
     cce:	70 e0       	ldi	r23, 0x00	; 0
     cd0:	cb 01       	movw	r24, r22
     cd2:	1f 91       	pop	r17
     cd4:	08 95       	ret

00000cd6 <main>:
/*******************************************************************************
 *                            Main Function                                    *
 *******************************************************************************/

int main(void)
{
     cd6:	df 93       	push	r29
     cd8:	cf 93       	push	r28
     cda:	cd b7       	in	r28, 0x3d	; 61
     cdc:	de b7       	in	r29, 0x3e	; 62
     cde:	6b 97       	sbiw	r28, 0x1b	; 27
     ce0:	0f b6       	in	r0, 0x3f	; 63
     ce2:	f8 94       	cli
     ce4:	de bf       	out	0x3e, r29	; 62
     ce6:	0f be       	out	0x3f, r0	; 63
     ce8:	cd bf       	out	0x3d, r28	; 61
	/* Initialize UART with 8bits mode, no parity bit, 1 stop bit and 9600 baud rate */
	UART_ConfigType UART_config = {Bits_8,
									DISABLED,
									ONE_BIT,
									9600};
     cea:	ce 01       	movw	r24, r28
     cec:	01 96       	adiw	r24, 0x01	; 1
     cee:	9b 8b       	std	Y+19, r25	; 0x13
     cf0:	8a 8b       	std	Y+18, r24	; 0x12
     cf2:	ee e6       	ldi	r30, 0x6E	; 110
     cf4:	f1 e0       	ldi	r31, 0x01	; 1
     cf6:	fd 8b       	std	Y+21, r31	; 0x15
     cf8:	ec 8b       	std	Y+20, r30	; 0x14
     cfa:	f7 e0       	ldi	r31, 0x07	; 7
     cfc:	fe 8b       	std	Y+22, r31	; 0x16
     cfe:	ec 89       	ldd	r30, Y+20	; 0x14
     d00:	fd 89       	ldd	r31, Y+21	; 0x15
     d02:	00 80       	ld	r0, Z
     d04:	8c 89       	ldd	r24, Y+20	; 0x14
     d06:	9d 89       	ldd	r25, Y+21	; 0x15
     d08:	01 96       	adiw	r24, 0x01	; 1
     d0a:	9d 8b       	std	Y+21, r25	; 0x15
     d0c:	8c 8b       	std	Y+20, r24	; 0x14
     d0e:	ea 89       	ldd	r30, Y+18	; 0x12
     d10:	fb 89       	ldd	r31, Y+19	; 0x13
     d12:	00 82       	st	Z, r0
     d14:	8a 89       	ldd	r24, Y+18	; 0x12
     d16:	9b 89       	ldd	r25, Y+19	; 0x13
     d18:	01 96       	adiw	r24, 0x01	; 1
     d1a:	9b 8b       	std	Y+19, r25	; 0x13
     d1c:	8a 8b       	std	Y+18, r24	; 0x12
     d1e:	9e 89       	ldd	r25, Y+22	; 0x16
     d20:	91 50       	subi	r25, 0x01	; 1
     d22:	9e 8b       	std	Y+22, r25	; 0x16
     d24:	ee 89       	ldd	r30, Y+22	; 0x16
     d26:	ee 23       	and	r30, r30
     d28:	51 f7       	brne	.-44     	; 0xcfe <main+0x28>
	/* Initialize I2C with No prescalar mode and 400 kbps bit rate */
	TWI_ConfigType TWI_conf={
						TWI_SLAVE_ADDRESS,
						400,
						NO_PRESCALER
				};
     d2a:	81 e0       	ldi	r24, 0x01	; 1
     d2c:	88 87       	std	Y+8, r24	; 0x08
     d2e:	80 e9       	ldi	r24, 0x90	; 144
     d30:	91 e0       	ldi	r25, 0x01	; 1
     d32:	9a 87       	std	Y+10, r25	; 0x0a
     d34:	89 87       	std	Y+9, r24	; 0x09
     d36:	1b 86       	std	Y+11, r1	; 0x0b
	/* Initialize Timer1 with 0 initial value, 23437 compare value, prescalar of 1024 and CTC mode */
	Timer1_ConfigType TIMER1_config = {0,
									   23437,
									   F_CPU_1024,
										COMPARE_MODE};
     d38:	ce 01       	movw	r24, r28
     d3a:	0c 96       	adiw	r24, 0x0c	; 12
     d3c:	98 8f       	std	Y+24, r25	; 0x18
     d3e:	8f 8b       	std	Y+23, r24	; 0x17
     d40:	e8 e6       	ldi	r30, 0x68	; 104
     d42:	f1 e0       	ldi	r31, 0x01	; 1
     d44:	fa 8f       	std	Y+26, r31	; 0x1a
     d46:	e9 8f       	std	Y+25, r30	; 0x19
     d48:	f6 e0       	ldi	r31, 0x06	; 6
     d4a:	fb 8f       	std	Y+27, r31	; 0x1b
     d4c:	e9 8d       	ldd	r30, Y+25	; 0x19
     d4e:	fa 8d       	ldd	r31, Y+26	; 0x1a
     d50:	00 80       	ld	r0, Z
     d52:	89 8d       	ldd	r24, Y+25	; 0x19
     d54:	9a 8d       	ldd	r25, Y+26	; 0x1a
     d56:	01 96       	adiw	r24, 0x01	; 1
     d58:	9a 8f       	std	Y+26, r25	; 0x1a
     d5a:	89 8f       	std	Y+25, r24	; 0x19
     d5c:	ef 89       	ldd	r30, Y+23	; 0x17
     d5e:	f8 8d       	ldd	r31, Y+24	; 0x18
     d60:	00 82       	st	Z, r0
     d62:	8f 89       	ldd	r24, Y+23	; 0x17
     d64:	98 8d       	ldd	r25, Y+24	; 0x18
     d66:	01 96       	adiw	r24, 0x01	; 1
     d68:	98 8f       	std	Y+24, r25	; 0x18
     d6a:	8f 8b       	std	Y+23, r24	; 0x17
     d6c:	9b 8d       	ldd	r25, Y+27	; 0x1b
     d6e:	91 50       	subi	r25, 0x01	; 1
     d70:	9b 8f       	std	Y+27, r25	; 0x1b
     d72:	eb 8d       	ldd	r30, Y+27	; 0x1b
     d74:	ee 23       	and	r30, r30
     d76:	51 f7       	brne	.-44     	; 0xd4c <main+0x76>

	/* Initialize modules and enable global interrupts */
	Timer1_init(&TIMER1_config);
     d78:	ce 01       	movw	r24, r28
     d7a:	0c 96       	adiw	r24, 0x0c	; 12
     d7c:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <Timer1_init>
	Timer1_setCallBack(&Timer_CallBackFunction);
     d80:	85 ed       	ldi	r24, 0xD5	; 213
     d82:	97 e0       	ldi	r25, 0x07	; 7
     d84:	0e 94 57 10 	call	0x20ae	; 0x20ae <Timer1_setCallBack>
	UART_init(&UART_config);
     d88:	ce 01       	movw	r24, r28
     d8a:	01 96       	adiw	r24, 0x01	; 1
     d8c:	0e 94 ad 09 	call	0x135a	; 0x135a <UART_init>
	TWI_init(&TWI_conf);
     d90:	ce 01       	movw	r24, r28
     d92:	08 96       	adiw	r24, 0x08	; 8
     d94:	0e 94 69 10 	call	0x20d2	; 0x20d2 <TWI_init>
	DC_Motor_init();
     d98:	0e 94 b0 0e 	call	0x1d60	; 0x1d60 <DC_Motor_init>
	Buzzer_init();
     d9c:	0e 94 a8 0a 	call	0x1550	; 0x1550 <Buzzer_init>
	SREG |= (1<<7);
     da0:	af e5       	ldi	r26, 0x5F	; 95
     da2:	b0 e0       	ldi	r27, 0x00	; 0
     da4:	ef e5       	ldi	r30, 0x5F	; 95
     da6:	f0 e0       	ldi	r31, 0x00	; 0
     da8:	80 81       	ld	r24, Z
     daa:	80 68       	ori	r24, 0x80	; 128
     dac:	8c 93       	st	X, r24

	/* Create the password */
	create_password();
     dae:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <create_password>
	/* Program Menu function */
	while(1)
	{
		mainMenu();
     db2:	0e 94 8f 09 	call	0x131e	; 0x131e <mainMenu>
     db6:	fd cf       	rjmp	.-6      	; 0xdb2 <main+0xdc>

00000db8 <create_password>:
 * Parameters: None
 *
 * Returns: None
 */
void create_password(void)
{
     db8:	df 93       	push	r29
     dba:	cf 93       	push	r28
     dbc:	cd b7       	in	r28, 0x3d	; 61
     dbe:	de b7       	in	r29, 0x3e	; 62
     dc0:	2d 97       	sbiw	r28, 0x0d	; 13
     dc2:	0f b6       	in	r0, 0x3f	; 63
     dc4:	f8 94       	cli
     dc6:	de bf       	out	0x3e, r29	; 62
     dc8:	0f be       	out	0x3f, r0	; 63
     dca:	cd bf       	out	0x3d, r28	; 61
	uint8 firstPassword[PASSWORD_LEGTH + 1];
	uint8 secondPassword[PASSWORD_LEGTH + 1];
	uint8 matchCheck;

	/* Wait for a "ready" signal from the HMI */
	UART_sendByte(CONTROL_READY_UART);
     dcc:	8f ef       	ldi	r24, 0xFF	; 255
     dce:	0e 94 16 0a 	call	0x142c	; 0x142c <UART_sendByte>
	UART_receiveString(firstPassword);
     dd2:	ce 01       	movw	r24, r28
     dd4:	02 96       	adiw	r24, 0x02	; 2
     dd6:	0e 94 65 0a 	call	0x14ca	; 0x14ca <UART_receiveString>

	/* Send a "ready" signal back to the HMI */
	UART_sendByte(CONTROL_READY_UART);
     dda:	8f ef       	ldi	r24, 0xFF	; 255
     ddc:	0e 94 16 0a 	call	0x142c	; 0x142c <UART_sendByte>

	/* Receive the second password from the HMI */
	UART_receiveString(secondPassword);
     de0:	ce 01       	movw	r24, r28
     de2:	08 96       	adiw	r24, 0x08	; 8
     de4:	0e 94 65 0a 	call	0x14ca	; 0x14ca <UART_receiveString>

	/* Check if the passwords match */
	matchCheck = check_password(firstPassword, secondPassword);
     de8:	ce 01       	movw	r24, r28
     dea:	02 96       	adiw	r24, 0x02	; 2
     dec:	9e 01       	movw	r18, r28
     dee:	28 5f       	subi	r18, 0xF8	; 248
     df0:	3f 4f       	sbci	r19, 0xFF	; 255
     df2:	b9 01       	movw	r22, r18
     df4:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <check_password>
     df8:	89 83       	std	Y+1, r24	; 0x01

	/* Wait for a "ready" signal from the HMI */
	while(UART_receiveByte() != HMI_READY_UART){}
     dfa:	0e 94 2d 0a 	call	0x145a	; 0x145a <UART_receiveByte>
     dfe:	88 23       	and	r24, r24
     e00:	e1 f7       	brne	.-8      	; 0xdfa <create_password+0x42>

	/* If the passwords match, save the password to EEPROM */
	if(matchCheck)
     e02:	89 81       	ldd	r24, Y+1	; 0x01
     e04:	88 23       	and	r24, r24
     e06:	41 f0       	breq	.+16     	; 0xe18 <create_password+0x60>
	{
		UART_sendByte(PASSWORD_MATCH);
     e08:	81 e0       	ldi	r24, 0x01	; 1
     e0a:	0e 94 16 0a 	call	0x142c	; 0x142c <UART_sendByte>
		save_password(firstPassword);
     e0e:	ce 01       	movw	r24, r28
     e10:	02 96       	adiw	r24, 0x02	; 2
     e12:	0e 94 29 08 	call	0x1052	; 0x1052 <save_password>
     e16:	05 c0       	rjmp	.+10     	; 0xe22 <create_password+0x6a>
	}
	/* If the passwords do not match, prompt the user to enter a new password */
	else
	{
		UART_sendByte(PASSWORD_UNMATCH);
     e18:	80 e0       	ldi	r24, 0x00	; 0
     e1a:	0e 94 16 0a 	call	0x142c	; 0x142c <UART_sendByte>
		create_password();
     e1e:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <create_password>
	}
}
     e22:	2d 96       	adiw	r28, 0x0d	; 13
     e24:	0f b6       	in	r0, 0x3f	; 63
     e26:	f8 94       	cli
     e28:	de bf       	out	0x3e, r29	; 62
     e2a:	0f be       	out	0x3f, r0	; 63
     e2c:	cd bf       	out	0x3d, r28	; 61
     e2e:	cf 91       	pop	r28
     e30:	df 91       	pop	r29
     e32:	08 95       	ret

00000e34 <open_door>:
 * Parameters: None
 *
 * Returns: None
 */
void open_door(void)
{
     e34:	df 93       	push	r29
     e36:	cf 93       	push	r28
     e38:	cd b7       	in	r28, 0x3d	; 61
     e3a:	de b7       	in	r29, 0x3e	; 62
     e3c:	27 97       	sbiw	r28, 0x07	; 7
     e3e:	0f b6       	in	r0, 0x3f	; 63
     e40:	f8 94       	cli
     e42:	de bf       	out	0x3e, r29	; 62
     e44:	0f be       	out	0x3f, r0	; 63
     e46:	cd bf       	out	0x3d, r28	; 61
	uint8 password[PASSWORD_LEGTH + 1];
	uint8 matchCheck;
	/* Wait for a signal from the HMI that it is ready to receive data */
	while(UART_receiveByte() != HMI_READY_UART);
     e48:	0e 94 2d 0a 	call	0x145a	; 0x145a <UART_receiveByte>
     e4c:	88 23       	and	r24, r24
     e4e:	e1 f7       	brne	.-8      	; 0xe48 <open_door+0x14>
	UART_sendByte(CONTROL_READY_UART);
     e50:	8f ef       	ldi	r24, 0xFF	; 255
     e52:	0e 94 16 0a 	call	0x142c	; 0x142c <UART_sendByte>
	/* Receive the user's password from the HMI */
	UART_receiveString(password);
     e56:	ce 01       	movw	r24, r28
     e58:	02 96       	adiw	r24, 0x02	; 2
     e5a:	0e 94 65 0a 	call	0x14ca	; 0x14ca <UART_receiveString>
	/* Check if the entered password matches the saved password */
	matchCheck = check_saved_password(password);
     e5e:	ce 01       	movw	r24, r28
     e60:	02 96       	adiw	r24, 0x02	; 2
     e62:	0e 94 cc 08 	call	0x1198	; 0x1198 <check_saved_password>
     e66:	89 83       	std	Y+1, r24	; 0x01
	/* Wait for a signal from the HMI that it is ready to receive data */
	while(UART_receiveByte() != HMI_READY_UART);
     e68:	0e 94 2d 0a 	call	0x145a	; 0x145a <UART_receiveByte>
     e6c:	88 23       	and	r24, r24
     e6e:	e1 f7       	brne	.-8      	; 0xe68 <open_door+0x34>
	UART_sendByte(CONTROL_READY_UART);
     e70:	8f ef       	ldi	r24, 0xFF	; 255
     e72:	0e 94 16 0a 	call	0x142c	; 0x142c <UART_sendByte>
	/* If the passwords match, open the door */
	if(matchCheck)
     e76:	89 81       	ldd	r24, Y+1	; 0x01
     e78:	88 23       	and	r24, r24
     e7a:	41 f1       	breq	.+80     	; 0xecc <open_door+0x98>
	{
		UART_sendByte(PASSWORD_MATCH);
     e7c:	81 e0       	ldi	r24, 0x01	; 1
     e7e:	0e 94 16 0a 	call	0x142c	; 0x142c <UART_sendByte>
		Trials = 0;
     e82:	10 92 76 01 	sts	0x0176, r1
		/* Open the door for 15 Secs */
		g_ticks = 0;
     e86:	10 92 79 01 	sts	0x0179, r1
		DcMotor_Rotate(MOTOR_CW,50);
     e8a:	81 e0       	ldi	r24, 0x01	; 1
     e8c:	62 e3       	ldi	r22, 0x32	; 50
     e8e:	0e 94 cb 0e 	call	0x1d96	; 0x1d96 <DcMotor_Rotate>
		while(g_ticks < DOOR_OPEN_TIME/3);	/* waiting for the door opening time */
     e92:	80 91 79 01 	lds	r24, 0x0179
     e96:	85 30       	cpi	r24, 0x05	; 5
     e98:	e0 f3       	brcs	.-8      	; 0xe92 <open_door+0x5e>
		/* Hold the door for 3 Secs */
		g_ticks = 0;
     e9a:	10 92 79 01 	sts	0x0179, r1
		DcMotor_Rotate(MOTOR_STOP,0);
     e9e:	80 e0       	ldi	r24, 0x00	; 0
     ea0:	60 e0       	ldi	r22, 0x00	; 0
     ea2:	0e 94 cb 0e 	call	0x1d96	; 0x1d96 <DcMotor_Rotate>
		while(g_ticks < DOOR_HOLD_TIME/3); /* waiting for the door hold time */
     ea6:	80 91 79 01 	lds	r24, 0x0179
     eaa:	88 23       	and	r24, r24
     eac:	e1 f3       	breq	.-8      	; 0xea6 <open_door+0x72>
		/* Close the door for 15 Secs */
		g_ticks = 0;
     eae:	10 92 79 01 	sts	0x0179, r1
		DcMotor_Rotate(MOTOR_ACW,50);
     eb2:	82 e0       	ldi	r24, 0x02	; 2
     eb4:	62 e3       	ldi	r22, 0x32	; 50
     eb6:	0e 94 cb 0e 	call	0x1d96	; 0x1d96 <DcMotor_Rotate>
		while(g_ticks < DOOR_CLOSE_TIME/3); /* waiting for the door closing time */
     eba:	80 91 79 01 	lds	r24, 0x0179
     ebe:	85 30       	cpi	r24, 0x05	; 5
     ec0:	e0 f3       	brcs	.-8      	; 0xeba <open_door+0x86>

		DcMotor_Rotate(MOTOR_STOP,0);
     ec2:	80 e0       	ldi	r24, 0x00	; 0
     ec4:	60 e0       	ldi	r22, 0x00	; 0
     ec6:	0e 94 cb 0e 	call	0x1d96	; 0x1d96 <DcMotor_Rotate>
     eca:	11 c0       	rjmp	.+34     	; 0xeee <open_door+0xba>
	}

	else
	{
		UART_sendByte(PASSWORD_UNMATCH);
     ecc:	80 e0       	ldi	r24, 0x00	; 0
     ece:	0e 94 16 0a 	call	0x142c	; 0x142c <UART_sendByte>
		Trials++;
     ed2:	80 91 76 01 	lds	r24, 0x0176
     ed6:	8f 5f       	subi	r24, 0xFF	; 255
     ed8:	80 93 76 01 	sts	0x0176, r24

		if(Trials == 3)
     edc:	80 91 76 01 	lds	r24, 0x0176
     ee0:	83 30       	cpi	r24, 0x03	; 3
     ee2:	19 f4       	brne	.+6      	; 0xeea <open_door+0xb6>
		{
			activate_alarm_mode(); /* activating the alarm mode if the maximum number of trials has been reached */
     ee4:	0e 94 c6 07 	call	0xf8c	; 0xf8c <activate_alarm_mode>
     ee8:	02 c0       	rjmp	.+4      	; 0xeee <open_door+0xba>
		}

		else
		{
			open_door(); /* allowing the user to try again if the maximum number of trials has not been reached */
     eea:	0e 94 1a 07 	call	0xe34	; 0xe34 <open_door>
		}
	}

}
     eee:	27 96       	adiw	r28, 0x07	; 7
     ef0:	0f b6       	in	r0, 0x3f	; 63
     ef2:	f8 94       	cli
     ef4:	de bf       	out	0x3e, r29	; 62
     ef6:	0f be       	out	0x3f, r0	; 63
     ef8:	cd bf       	out	0x3d, r28	; 61
     efa:	cf 91       	pop	r28
     efc:	df 91       	pop	r29
     efe:	08 95       	ret

00000f00 <change_password>:
 * Parameters: None
 *
 * Returns: None
 */
void change_password(void)
{
     f00:	df 93       	push	r29
     f02:	cf 93       	push	r28
     f04:	cd b7       	in	r28, 0x3d	; 61
     f06:	de b7       	in	r29, 0x3e	; 62
     f08:	27 97       	sbiw	r28, 0x07	; 7
     f0a:	0f b6       	in	r0, 0x3f	; 63
     f0c:	f8 94       	cli
     f0e:	de bf       	out	0x3e, r29	; 62
     f10:	0f be       	out	0x3f, r0	; 63
     f12:	cd bf       	out	0x3d, r28	; 61
	uint8 password[PASSWORD_LEGTH + 1];
	uint8 matchCheck;
	while(UART_receiveByte() != HMI_READY_UART);
     f14:	0e 94 2d 0a 	call	0x145a	; 0x145a <UART_receiveByte>
     f18:	88 23       	and	r24, r24
     f1a:	e1 f7       	brne	.-8      	; 0xf14 <change_password+0x14>
	UART_sendByte(CONTROL_READY_UART);
     f1c:	8f ef       	ldi	r24, 0xFF	; 255
     f1e:	0e 94 16 0a 	call	0x142c	; 0x142c <UART_sendByte>
	UART_receiveString(password);
     f22:	ce 01       	movw	r24, r28
     f24:	02 96       	adiw	r24, 0x02	; 2
     f26:	0e 94 65 0a 	call	0x14ca	; 0x14ca <UART_receiveString>
	matchCheck = check_saved_password(password);
     f2a:	ce 01       	movw	r24, r28
     f2c:	02 96       	adiw	r24, 0x02	; 2
     f2e:	0e 94 cc 08 	call	0x1198	; 0x1198 <check_saved_password>
     f32:	89 83       	std	Y+1, r24	; 0x01
	while(UART_receiveByte() != HMI_READY_UART);
     f34:	0e 94 2d 0a 	call	0x145a	; 0x145a <UART_receiveByte>
     f38:	88 23       	and	r24, r24
     f3a:	e1 f7       	brne	.-8      	; 0xf34 <change_password+0x34>
	UART_sendByte(CONTROL_READY_UART);
     f3c:	8f ef       	ldi	r24, 0xFF	; 255
     f3e:	0e 94 16 0a 	call	0x142c	; 0x142c <UART_sendByte>


	if(matchCheck)
     f42:	89 81       	ldd	r24, Y+1	; 0x01
     f44:	88 23       	and	r24, r24
     f46:	41 f0       	breq	.+16     	; 0xf58 <change_password+0x58>
	{
		UART_sendByte(PASSWORD_MATCH);
     f48:	81 e0       	ldi	r24, 0x01	; 1
     f4a:	0e 94 16 0a 	call	0x142c	; 0x142c <UART_sendByte>
		Trials = 0;
     f4e:	10 92 76 01 	sts	0x0176, r1
		create_password();
     f52:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <create_password>
     f56:	11 c0       	rjmp	.+34     	; 0xf7a <change_password+0x7a>
	}

	else
	{

		UART_sendByte(PASSWORD_UNMATCH);
     f58:	80 e0       	ldi	r24, 0x00	; 0
     f5a:	0e 94 16 0a 	call	0x142c	; 0x142c <UART_sendByte>
		Trials++;
     f5e:	80 91 76 01 	lds	r24, 0x0176
     f62:	8f 5f       	subi	r24, 0xFF	; 255
     f64:	80 93 76 01 	sts	0x0176, r24
		if(Trials == 3)
     f68:	80 91 76 01 	lds	r24, 0x0176
     f6c:	83 30       	cpi	r24, 0x03	; 3
     f6e:	19 f4       	brne	.+6      	; 0xf76 <change_password+0x76>
		{
			activate_alarm_mode();
     f70:	0e 94 c6 07 	call	0xf8c	; 0xf8c <activate_alarm_mode>
     f74:	02 c0       	rjmp	.+4      	; 0xf7a <change_password+0x7a>
		}

		else
		{
			change_password();
     f76:	0e 94 80 07 	call	0xf00	; 0xf00 <change_password>
		}
	}

}
     f7a:	27 96       	adiw	r28, 0x07	; 7
     f7c:	0f b6       	in	r0, 0x3f	; 63
     f7e:	f8 94       	cli
     f80:	de bf       	out	0x3e, r29	; 62
     f82:	0f be       	out	0x3f, r0	; 63
     f84:	cd bf       	out	0x3d, r28	; 61
     f86:	cf 91       	pop	r28
     f88:	df 91       	pop	r29
     f8a:	08 95       	ret

00000f8c <activate_alarm_mode>:
 * Parameters: None
 *
 * Returns: None
 */
void activate_alarm_mode(void)
{
     f8c:	df 93       	push	r29
     f8e:	cf 93       	push	r28
     f90:	cd b7       	in	r28, 0x3d	; 61
     f92:	de b7       	in	r29, 0x3e	; 62

	Buzzer_on();
     f94:	0e 94 b9 0a 	call	0x1572	; 0x1572 <Buzzer_on>
	g_ticks = 0;
     f98:	10 92 79 01 	sts	0x0179, r1
	while(g_ticks < ALARM_TIME);
     f9c:	80 91 79 01 	lds	r24, 0x0179
     fa0:	8c 33       	cpi	r24, 0x3C	; 60
     fa2:	e0 f3       	brcs	.-8      	; 0xf9c <activate_alarm_mode+0x10>

}
     fa4:	cf 91       	pop	r28
     fa6:	df 91       	pop	r29
     fa8:	08 95       	ret

00000faa <Timer_CallBackFunction>:
 * Parameters: None
 *
 * Returns: None
 */
void Timer_CallBackFunction(void)
{
     faa:	df 93       	push	r29
     fac:	cf 93       	push	r28
     fae:	cd b7       	in	r28, 0x3d	; 61
     fb0:	de b7       	in	r29, 0x3e	; 62
	g_ticks++;
     fb2:	80 91 79 01 	lds	r24, 0x0179
     fb6:	8f 5f       	subi	r24, 0xFF	; 255
     fb8:	80 93 79 01 	sts	0x0179, r24
}
     fbc:	cf 91       	pop	r28
     fbe:	df 91       	pop	r29
     fc0:	08 95       	ret

00000fc2 <check_password>:
 * Parameters: uint8*,uint8*
 *
 * Returns: uint8
 */
uint8 check_password(uint8 *firstPassword , uint8 *secondPassword)
{
     fc2:	df 93       	push	r29
     fc4:	cf 93       	push	r28
     fc6:	00 d0       	rcall	.+0      	; 0xfc8 <check_password+0x6>
     fc8:	00 d0       	rcall	.+0      	; 0xfca <check_password+0x8>
     fca:	00 d0       	rcall	.+0      	; 0xfcc <check_password+0xa>
     fcc:	cd b7       	in	r28, 0x3d	; 61
     fce:	de b7       	in	r29, 0x3e	; 62
     fd0:	9c 83       	std	Y+4, r25	; 0x04
     fd2:	8b 83       	std	Y+3, r24	; 0x03
     fd4:	7e 83       	std	Y+6, r23	; 0x06
     fd6:	6d 83       	std	Y+5, r22	; 0x05
	uint8 matchCheck = 1;
     fd8:	81 e0       	ldi	r24, 0x01	; 1
     fda:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
     fdc:	19 82       	std	Y+1, r1	; 0x01
     fde:	19 c0       	rjmp	.+50     	; 0x1012 <check_password+0x50>
	while(firstPassword[i] != '\0' || secondPassword[i] != '\0')
	{
		if(firstPassword[i] != secondPassword[i])
     fe0:	89 81       	ldd	r24, Y+1	; 0x01
     fe2:	28 2f       	mov	r18, r24
     fe4:	30 e0       	ldi	r19, 0x00	; 0
     fe6:	8b 81       	ldd	r24, Y+3	; 0x03
     fe8:	9c 81       	ldd	r25, Y+4	; 0x04
     fea:	fc 01       	movw	r30, r24
     fec:	e2 0f       	add	r30, r18
     fee:	f3 1f       	adc	r31, r19
     ff0:	40 81       	ld	r20, Z
     ff2:	89 81       	ldd	r24, Y+1	; 0x01
     ff4:	28 2f       	mov	r18, r24
     ff6:	30 e0       	ldi	r19, 0x00	; 0
     ff8:	8d 81       	ldd	r24, Y+5	; 0x05
     ffa:	9e 81       	ldd	r25, Y+6	; 0x06
     ffc:	fc 01       	movw	r30, r24
     ffe:	e2 0f       	add	r30, r18
    1000:	f3 1f       	adc	r31, r19
    1002:	80 81       	ld	r24, Z
    1004:	48 17       	cp	r20, r24
    1006:	11 f0       	breq	.+4      	; 0x100c <check_password+0x4a>
		{
			matchCheck = FALSE;
    1008:	1a 82       	std	Y+2, r1	; 0x02
    100a:	19 c0       	rjmp	.+50     	; 0x103e <check_password+0x7c>
			break;
		}
		i++;
    100c:	89 81       	ldd	r24, Y+1	; 0x01
    100e:	8f 5f       	subi	r24, 0xFF	; 255
    1010:	89 83       	std	Y+1, r24	; 0x01
 */
uint8 check_password(uint8 *firstPassword , uint8 *secondPassword)
{
	uint8 matchCheck = 1;
	uint8 i = 0;
	while(firstPassword[i] != '\0' || secondPassword[i] != '\0')
    1012:	89 81       	ldd	r24, Y+1	; 0x01
    1014:	28 2f       	mov	r18, r24
    1016:	30 e0       	ldi	r19, 0x00	; 0
    1018:	8b 81       	ldd	r24, Y+3	; 0x03
    101a:	9c 81       	ldd	r25, Y+4	; 0x04
    101c:	fc 01       	movw	r30, r24
    101e:	e2 0f       	add	r30, r18
    1020:	f3 1f       	adc	r31, r19
    1022:	80 81       	ld	r24, Z
    1024:	88 23       	and	r24, r24
    1026:	e1 f6       	brne	.-72     	; 0xfe0 <check_password+0x1e>
    1028:	89 81       	ldd	r24, Y+1	; 0x01
    102a:	28 2f       	mov	r18, r24
    102c:	30 e0       	ldi	r19, 0x00	; 0
    102e:	8d 81       	ldd	r24, Y+5	; 0x05
    1030:	9e 81       	ldd	r25, Y+6	; 0x06
    1032:	fc 01       	movw	r30, r24
    1034:	e2 0f       	add	r30, r18
    1036:	f3 1f       	adc	r31, r19
    1038:	80 81       	ld	r24, Z
    103a:	88 23       	and	r24, r24
    103c:	89 f6       	brne	.-94     	; 0xfe0 <check_password+0x1e>
			matchCheck = FALSE;
			break;
		}
		i++;
	}
	return matchCheck;
    103e:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1040:	26 96       	adiw	r28, 0x06	; 6
    1042:	0f b6       	in	r0, 0x3f	; 63
    1044:	f8 94       	cli
    1046:	de bf       	out	0x3e, r29	; 62
    1048:	0f be       	out	0x3f, r0	; 63
    104a:	cd bf       	out	0x3d, r28	; 61
    104c:	cf 91       	pop	r28
    104e:	df 91       	pop	r29
    1050:	08 95       	ret

00001052 <save_password>:
 * Parameters: uint8*
 *
 * Returns: None
 */
void save_password(uint8 *pass)
{
    1052:	df 93       	push	r29
    1054:	cf 93       	push	r28
    1056:	cd b7       	in	r28, 0x3d	; 61
    1058:	de b7       	in	r29, 0x3e	; 62
    105a:	61 97       	sbiw	r28, 0x11	; 17
    105c:	0f b6       	in	r0, 0x3f	; 63
    105e:	f8 94       	cli
    1060:	de bf       	out	0x3e, r29	; 62
    1062:	0f be       	out	0x3f, r0	; 63
    1064:	cd bf       	out	0x3d, r28	; 61
    1066:	99 8b       	std	Y+17, r25	; 0x11
    1068:	88 8b       	std	Y+16, r24	; 0x10
	uint8 i;
	for(i = 0 ; i < PASSWORD_LEGTH ; i++)
    106a:	1f 86       	std	Y+15, r1	; 0x0f
    106c:	88 c0       	rjmp	.+272    	; 0x117e <save_password+0x12c>
	{
		EEPROM_writeByte(EEPROM_PASS_ADDRESS + i, *(pass + i));
    106e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1070:	88 2f       	mov	r24, r24
    1072:	90 e0       	ldi	r25, 0x00	; 0
    1074:	80 50       	subi	r24, 0x00	; 0
    1076:	9d 4f       	sbci	r25, 0xFD	; 253
    1078:	ac 01       	movw	r20, r24
    107a:	8f 85       	ldd	r24, Y+15	; 0x0f
    107c:	28 2f       	mov	r18, r24
    107e:	30 e0       	ldi	r19, 0x00	; 0
    1080:	88 89       	ldd	r24, Y+16	; 0x10
    1082:	99 89       	ldd	r25, Y+17	; 0x11
    1084:	fc 01       	movw	r30, r24
    1086:	e2 0f       	add	r30, r18
    1088:	f3 1f       	adc	r31, r19
    108a:	20 81       	ld	r18, Z
    108c:	ca 01       	movw	r24, r20
    108e:	62 2f       	mov	r22, r18
    1090:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <EEPROM_writeByte>
    1094:	80 e0       	ldi	r24, 0x00	; 0
    1096:	90 e0       	ldi	r25, 0x00	; 0
    1098:	a0 ea       	ldi	r26, 0xA0	; 160
    109a:	b1 e4       	ldi	r27, 0x41	; 65
    109c:	8b 87       	std	Y+11, r24	; 0x0b
    109e:	9c 87       	std	Y+12, r25	; 0x0c
    10a0:	ad 87       	std	Y+13, r26	; 0x0d
    10a2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10a4:	6b 85       	ldd	r22, Y+11	; 0x0b
    10a6:	7c 85       	ldd	r23, Y+12	; 0x0c
    10a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    10aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    10ac:	20 e0       	ldi	r18, 0x00	; 0
    10ae:	30 e0       	ldi	r19, 0x00	; 0
    10b0:	4a ef       	ldi	r20, 0xFA	; 250
    10b2:	54 e4       	ldi	r21, 0x44	; 68
    10b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10b8:	dc 01       	movw	r26, r24
    10ba:	cb 01       	movw	r24, r22
    10bc:	8f 83       	std	Y+7, r24	; 0x07
    10be:	98 87       	std	Y+8, r25	; 0x08
    10c0:	a9 87       	std	Y+9, r26	; 0x09
    10c2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    10c4:	6f 81       	ldd	r22, Y+7	; 0x07
    10c6:	78 85       	ldd	r23, Y+8	; 0x08
    10c8:	89 85       	ldd	r24, Y+9	; 0x09
    10ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    10cc:	20 e0       	ldi	r18, 0x00	; 0
    10ce:	30 e0       	ldi	r19, 0x00	; 0
    10d0:	40 e8       	ldi	r20, 0x80	; 128
    10d2:	5f e3       	ldi	r21, 0x3F	; 63
    10d4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    10d8:	88 23       	and	r24, r24
    10da:	2c f4       	brge	.+10     	; 0x10e6 <save_password+0x94>
		__ticks = 1;
    10dc:	81 e0       	ldi	r24, 0x01	; 1
    10de:	90 e0       	ldi	r25, 0x00	; 0
    10e0:	9e 83       	std	Y+6, r25	; 0x06
    10e2:	8d 83       	std	Y+5, r24	; 0x05
    10e4:	3f c0       	rjmp	.+126    	; 0x1164 <save_password+0x112>
	else if (__tmp > 65535)
    10e6:	6f 81       	ldd	r22, Y+7	; 0x07
    10e8:	78 85       	ldd	r23, Y+8	; 0x08
    10ea:	89 85       	ldd	r24, Y+9	; 0x09
    10ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    10ee:	20 e0       	ldi	r18, 0x00	; 0
    10f0:	3f ef       	ldi	r19, 0xFF	; 255
    10f2:	4f e7       	ldi	r20, 0x7F	; 127
    10f4:	57 e4       	ldi	r21, 0x47	; 71
    10f6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    10fa:	18 16       	cp	r1, r24
    10fc:	4c f5       	brge	.+82     	; 0x1150 <save_password+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10fe:	6b 85       	ldd	r22, Y+11	; 0x0b
    1100:	7c 85       	ldd	r23, Y+12	; 0x0c
    1102:	8d 85       	ldd	r24, Y+13	; 0x0d
    1104:	9e 85       	ldd	r25, Y+14	; 0x0e
    1106:	20 e0       	ldi	r18, 0x00	; 0
    1108:	30 e0       	ldi	r19, 0x00	; 0
    110a:	40 e2       	ldi	r20, 0x20	; 32
    110c:	51 e4       	ldi	r21, 0x41	; 65
    110e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1112:	dc 01       	movw	r26, r24
    1114:	cb 01       	movw	r24, r22
    1116:	bc 01       	movw	r22, r24
    1118:	cd 01       	movw	r24, r26
    111a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    111e:	dc 01       	movw	r26, r24
    1120:	cb 01       	movw	r24, r22
    1122:	9e 83       	std	Y+6, r25	; 0x06
    1124:	8d 83       	std	Y+5, r24	; 0x05
    1126:	0f c0       	rjmp	.+30     	; 0x1146 <save_password+0xf4>
    1128:	88 ec       	ldi	r24, 0xC8	; 200
    112a:	90 e0       	ldi	r25, 0x00	; 0
    112c:	9c 83       	std	Y+4, r25	; 0x04
    112e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1130:	8b 81       	ldd	r24, Y+3	; 0x03
    1132:	9c 81       	ldd	r25, Y+4	; 0x04
    1134:	01 97       	sbiw	r24, 0x01	; 1
    1136:	f1 f7       	brne	.-4      	; 0x1134 <save_password+0xe2>
    1138:	9c 83       	std	Y+4, r25	; 0x04
    113a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    113c:	8d 81       	ldd	r24, Y+5	; 0x05
    113e:	9e 81       	ldd	r25, Y+6	; 0x06
    1140:	01 97       	sbiw	r24, 0x01	; 1
    1142:	9e 83       	std	Y+6, r25	; 0x06
    1144:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1146:	8d 81       	ldd	r24, Y+5	; 0x05
    1148:	9e 81       	ldd	r25, Y+6	; 0x06
    114a:	00 97       	sbiw	r24, 0x00	; 0
    114c:	69 f7       	brne	.-38     	; 0x1128 <save_password+0xd6>
    114e:	14 c0       	rjmp	.+40     	; 0x1178 <save_password+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1150:	6f 81       	ldd	r22, Y+7	; 0x07
    1152:	78 85       	ldd	r23, Y+8	; 0x08
    1154:	89 85       	ldd	r24, Y+9	; 0x09
    1156:	9a 85       	ldd	r25, Y+10	; 0x0a
    1158:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    115c:	dc 01       	movw	r26, r24
    115e:	cb 01       	movw	r24, r22
    1160:	9e 83       	std	Y+6, r25	; 0x06
    1162:	8d 83       	std	Y+5, r24	; 0x05
    1164:	8d 81       	ldd	r24, Y+5	; 0x05
    1166:	9e 81       	ldd	r25, Y+6	; 0x06
    1168:	9a 83       	std	Y+2, r25	; 0x02
    116a:	89 83       	std	Y+1, r24	; 0x01
    116c:	89 81       	ldd	r24, Y+1	; 0x01
    116e:	9a 81       	ldd	r25, Y+2	; 0x02
    1170:	01 97       	sbiw	r24, 0x01	; 1
    1172:	f1 f7       	brne	.-4      	; 0x1170 <save_password+0x11e>
    1174:	9a 83       	std	Y+2, r25	; 0x02
    1176:	89 83       	std	Y+1, r24	; 0x01
 * Returns: None
 */
void save_password(uint8 *pass)
{
	uint8 i;
	for(i = 0 ; i < PASSWORD_LEGTH ; i++)
    1178:	8f 85       	ldd	r24, Y+15	; 0x0f
    117a:	8f 5f       	subi	r24, 0xFF	; 255
    117c:	8f 87       	std	Y+15, r24	; 0x0f
    117e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1180:	85 30       	cpi	r24, 0x05	; 5
    1182:	08 f4       	brcc	.+2      	; 0x1186 <save_password+0x134>
    1184:	74 cf       	rjmp	.-280    	; 0x106e <save_password+0x1c>
	{
		EEPROM_writeByte(EEPROM_PASS_ADDRESS + i, *(pass + i));
		_delay_ms(20);
	}
}
    1186:	61 96       	adiw	r28, 0x11	; 17
    1188:	0f b6       	in	r0, 0x3f	; 63
    118a:	f8 94       	cli
    118c:	de bf       	out	0x3e, r29	; 62
    118e:	0f be       	out	0x3f, r0	; 63
    1190:	cd bf       	out	0x3d, r28	; 61
    1192:	cf 91       	pop	r28
    1194:	df 91       	pop	r29
    1196:	08 95       	ret

00001198 <check_saved_password>:
 * Parameters: uint8*
 *
 * Returns: uint8
 */
uint8 check_saved_password(uint8 *enteredPassword)
{
    1198:	df 93       	push	r29
    119a:	cf 93       	push	r28
    119c:	cd b7       	in	r28, 0x3d	; 61
    119e:	de b7       	in	r29, 0x3e	; 62
    11a0:	67 97       	sbiw	r28, 0x17	; 23
    11a2:	0f b6       	in	r0, 0x3f	; 63
    11a4:	f8 94       	cli
    11a6:	de bf       	out	0x3e, r29	; 62
    11a8:	0f be       	out	0x3f, r0	; 63
    11aa:	cd bf       	out	0x3d, r28	; 61
    11ac:	9f 8b       	std	Y+23, r25	; 0x17
    11ae:	8e 8b       	std	Y+22, r24	; 0x16
	uint8 i;
	uint8 savedPassword[PASSWORD_LEGTH];
	uint8 matchCheck = 1;
    11b0:	81 e0       	ldi	r24, 0x01	; 1
    11b2:	8f 87       	std	Y+15, r24	; 0x0f

	for(i = 0 ; i < PASSWORD_LEGTH ; i++)
    11b4:	18 8a       	std	Y+16, r1	; 0x10
    11b6:	87 c0       	rjmp	.+270    	; 0x12c6 <check_saved_password+0x12e>
	{
		EEPROM_readByte((EEPROM_PASS_ADDRESS + i), &savedPassword[i]);
    11b8:	88 89       	ldd	r24, Y+16	; 0x10
    11ba:	88 2f       	mov	r24, r24
    11bc:	90 e0       	ldi	r25, 0x00	; 0
    11be:	80 50       	subi	r24, 0x00	; 0
    11c0:	9d 4f       	sbci	r25, 0xFD	; 253
    11c2:	ac 01       	movw	r20, r24
    11c4:	88 89       	ldd	r24, Y+16	; 0x10
    11c6:	88 2f       	mov	r24, r24
    11c8:	90 e0       	ldi	r25, 0x00	; 0
    11ca:	9e 01       	movw	r18, r28
    11cc:	2f 5e       	subi	r18, 0xEF	; 239
    11ce:	3f 4f       	sbci	r19, 0xFF	; 255
    11d0:	28 0f       	add	r18, r24
    11d2:	39 1f       	adc	r19, r25
    11d4:	ca 01       	movw	r24, r20
    11d6:	b9 01       	movw	r22, r18
    11d8:	0e 94 12 0b 	call	0x1624	; 0x1624 <EEPROM_readByte>
    11dc:	80 e0       	ldi	r24, 0x00	; 0
    11de:	90 e0       	ldi	r25, 0x00	; 0
    11e0:	a0 ea       	ldi	r26, 0xA0	; 160
    11e2:	b1 e4       	ldi	r27, 0x41	; 65
    11e4:	8b 87       	std	Y+11, r24	; 0x0b
    11e6:	9c 87       	std	Y+12, r25	; 0x0c
    11e8:	ad 87       	std	Y+13, r26	; 0x0d
    11ea:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    11ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    11f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    11f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    11f4:	20 e0       	ldi	r18, 0x00	; 0
    11f6:	30 e0       	ldi	r19, 0x00	; 0
    11f8:	4a ef       	ldi	r20, 0xFA	; 250
    11fa:	54 e4       	ldi	r21, 0x44	; 68
    11fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1200:	dc 01       	movw	r26, r24
    1202:	cb 01       	movw	r24, r22
    1204:	8f 83       	std	Y+7, r24	; 0x07
    1206:	98 87       	std	Y+8, r25	; 0x08
    1208:	a9 87       	std	Y+9, r26	; 0x09
    120a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    120c:	6f 81       	ldd	r22, Y+7	; 0x07
    120e:	78 85       	ldd	r23, Y+8	; 0x08
    1210:	89 85       	ldd	r24, Y+9	; 0x09
    1212:	9a 85       	ldd	r25, Y+10	; 0x0a
    1214:	20 e0       	ldi	r18, 0x00	; 0
    1216:	30 e0       	ldi	r19, 0x00	; 0
    1218:	40 e8       	ldi	r20, 0x80	; 128
    121a:	5f e3       	ldi	r21, 0x3F	; 63
    121c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1220:	88 23       	and	r24, r24
    1222:	2c f4       	brge	.+10     	; 0x122e <check_saved_password+0x96>
		__ticks = 1;
    1224:	81 e0       	ldi	r24, 0x01	; 1
    1226:	90 e0       	ldi	r25, 0x00	; 0
    1228:	9e 83       	std	Y+6, r25	; 0x06
    122a:	8d 83       	std	Y+5, r24	; 0x05
    122c:	3f c0       	rjmp	.+126    	; 0x12ac <check_saved_password+0x114>
	else if (__tmp > 65535)
    122e:	6f 81       	ldd	r22, Y+7	; 0x07
    1230:	78 85       	ldd	r23, Y+8	; 0x08
    1232:	89 85       	ldd	r24, Y+9	; 0x09
    1234:	9a 85       	ldd	r25, Y+10	; 0x0a
    1236:	20 e0       	ldi	r18, 0x00	; 0
    1238:	3f ef       	ldi	r19, 0xFF	; 255
    123a:	4f e7       	ldi	r20, 0x7F	; 127
    123c:	57 e4       	ldi	r21, 0x47	; 71
    123e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1242:	18 16       	cp	r1, r24
    1244:	4c f5       	brge	.+82     	; 0x1298 <check_saved_password+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1246:	6b 85       	ldd	r22, Y+11	; 0x0b
    1248:	7c 85       	ldd	r23, Y+12	; 0x0c
    124a:	8d 85       	ldd	r24, Y+13	; 0x0d
    124c:	9e 85       	ldd	r25, Y+14	; 0x0e
    124e:	20 e0       	ldi	r18, 0x00	; 0
    1250:	30 e0       	ldi	r19, 0x00	; 0
    1252:	40 e2       	ldi	r20, 0x20	; 32
    1254:	51 e4       	ldi	r21, 0x41	; 65
    1256:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    125a:	dc 01       	movw	r26, r24
    125c:	cb 01       	movw	r24, r22
    125e:	bc 01       	movw	r22, r24
    1260:	cd 01       	movw	r24, r26
    1262:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1266:	dc 01       	movw	r26, r24
    1268:	cb 01       	movw	r24, r22
    126a:	9e 83       	std	Y+6, r25	; 0x06
    126c:	8d 83       	std	Y+5, r24	; 0x05
    126e:	0f c0       	rjmp	.+30     	; 0x128e <check_saved_password+0xf6>
    1270:	88 ec       	ldi	r24, 0xC8	; 200
    1272:	90 e0       	ldi	r25, 0x00	; 0
    1274:	9c 83       	std	Y+4, r25	; 0x04
    1276:	8b 83       	std	Y+3, r24	; 0x03
    1278:	8b 81       	ldd	r24, Y+3	; 0x03
    127a:	9c 81       	ldd	r25, Y+4	; 0x04
    127c:	01 97       	sbiw	r24, 0x01	; 1
    127e:	f1 f7       	brne	.-4      	; 0x127c <check_saved_password+0xe4>
    1280:	9c 83       	std	Y+4, r25	; 0x04
    1282:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1284:	8d 81       	ldd	r24, Y+5	; 0x05
    1286:	9e 81       	ldd	r25, Y+6	; 0x06
    1288:	01 97       	sbiw	r24, 0x01	; 1
    128a:	9e 83       	std	Y+6, r25	; 0x06
    128c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    128e:	8d 81       	ldd	r24, Y+5	; 0x05
    1290:	9e 81       	ldd	r25, Y+6	; 0x06
    1292:	00 97       	sbiw	r24, 0x00	; 0
    1294:	69 f7       	brne	.-38     	; 0x1270 <check_saved_password+0xd8>
    1296:	14 c0       	rjmp	.+40     	; 0x12c0 <check_saved_password+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1298:	6f 81       	ldd	r22, Y+7	; 0x07
    129a:	78 85       	ldd	r23, Y+8	; 0x08
    129c:	89 85       	ldd	r24, Y+9	; 0x09
    129e:	9a 85       	ldd	r25, Y+10	; 0x0a
    12a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12a4:	dc 01       	movw	r26, r24
    12a6:	cb 01       	movw	r24, r22
    12a8:	9e 83       	std	Y+6, r25	; 0x06
    12aa:	8d 83       	std	Y+5, r24	; 0x05
    12ac:	8d 81       	ldd	r24, Y+5	; 0x05
    12ae:	9e 81       	ldd	r25, Y+6	; 0x06
    12b0:	9a 83       	std	Y+2, r25	; 0x02
    12b2:	89 83       	std	Y+1, r24	; 0x01
    12b4:	89 81       	ldd	r24, Y+1	; 0x01
    12b6:	9a 81       	ldd	r25, Y+2	; 0x02
    12b8:	01 97       	sbiw	r24, 0x01	; 1
    12ba:	f1 f7       	brne	.-4      	; 0x12b8 <check_saved_password+0x120>
    12bc:	9a 83       	std	Y+2, r25	; 0x02
    12be:	89 83       	std	Y+1, r24	; 0x01
{
	uint8 i;
	uint8 savedPassword[PASSWORD_LEGTH];
	uint8 matchCheck = 1;

	for(i = 0 ; i < PASSWORD_LEGTH ; i++)
    12c0:	88 89       	ldd	r24, Y+16	; 0x10
    12c2:	8f 5f       	subi	r24, 0xFF	; 255
    12c4:	88 8b       	std	Y+16, r24	; 0x10
    12c6:	88 89       	ldd	r24, Y+16	; 0x10
    12c8:	85 30       	cpi	r24, 0x05	; 5
    12ca:	08 f4       	brcc	.+2      	; 0x12ce <check_saved_password+0x136>
    12cc:	75 cf       	rjmp	.-278    	; 0x11b8 <check_saved_password+0x20>
	{
		EEPROM_readByte((EEPROM_PASS_ADDRESS + i), &savedPassword[i]);
		_delay_ms(20);
	}

	for(i = 0 ; i < PASSWORD_LEGTH ; i++)
    12ce:	18 8a       	std	Y+16, r1	; 0x10
    12d0:	19 c0       	rjmp	.+50     	; 0x1304 <check_saved_password+0x16c>
	{
		if(savedPassword[i] != enteredPassword[i])
    12d2:	88 89       	ldd	r24, Y+16	; 0x10
    12d4:	28 2f       	mov	r18, r24
    12d6:	30 e0       	ldi	r19, 0x00	; 0
    12d8:	ce 01       	movw	r24, r28
    12da:	41 96       	adiw	r24, 0x11	; 17
    12dc:	fc 01       	movw	r30, r24
    12de:	e2 0f       	add	r30, r18
    12e0:	f3 1f       	adc	r31, r19
    12e2:	40 81       	ld	r20, Z
    12e4:	88 89       	ldd	r24, Y+16	; 0x10
    12e6:	28 2f       	mov	r18, r24
    12e8:	30 e0       	ldi	r19, 0x00	; 0
    12ea:	8e 89       	ldd	r24, Y+22	; 0x16
    12ec:	9f 89       	ldd	r25, Y+23	; 0x17
    12ee:	fc 01       	movw	r30, r24
    12f0:	e2 0f       	add	r30, r18
    12f2:	f3 1f       	adc	r31, r19
    12f4:	80 81       	ld	r24, Z
    12f6:	48 17       	cp	r20, r24
    12f8:	11 f0       	breq	.+4      	; 0x12fe <check_saved_password+0x166>
		{
			matchCheck = 0;
    12fa:	1f 86       	std	Y+15, r1	; 0x0f
    12fc:	06 c0       	rjmp	.+12     	; 0x130a <check_saved_password+0x172>
	{
		EEPROM_readByte((EEPROM_PASS_ADDRESS + i), &savedPassword[i]);
		_delay_ms(20);
	}

	for(i = 0 ; i < PASSWORD_LEGTH ; i++)
    12fe:	88 89       	ldd	r24, Y+16	; 0x10
    1300:	8f 5f       	subi	r24, 0xFF	; 255
    1302:	88 8b       	std	Y+16, r24	; 0x10
    1304:	88 89       	ldd	r24, Y+16	; 0x10
    1306:	85 30       	cpi	r24, 0x05	; 5
    1308:	20 f3       	brcs	.-56     	; 0x12d2 <check_saved_password+0x13a>
			matchCheck = 0;
			break;
		}
	}

	return matchCheck;
    130a:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    130c:	67 96       	adiw	r28, 0x17	; 23
    130e:	0f b6       	in	r0, 0x3f	; 63
    1310:	f8 94       	cli
    1312:	de bf       	out	0x3e, r29	; 62
    1314:	0f be       	out	0x3f, r0	; 63
    1316:	cd bf       	out	0x3d, r28	; 61
    1318:	cf 91       	pop	r28
    131a:	df 91       	pop	r29
    131c:	08 95       	ret

0000131e <mainMenu>:
 *
 * Parameters: None
 *
 * Returns: None
 */
void mainMenu(){
    131e:	df 93       	push	r29
    1320:	cf 93       	push	r28
    1322:	0f 92       	push	r0
    1324:	cd b7       	in	r28, 0x3d	; 61
    1326:	de b7       	in	r29, 0x3e	; 62

	uint8 operation;
	/* wait until the HMI is ready */
	while(UART_receiveByte() != HMI_READY_UART);
    1328:	0e 94 2d 0a 	call	0x145a	; 0x145a <UART_receiveByte>
    132c:	88 23       	and	r24, r24
    132e:	e1 f7       	brne	.-8      	; 0x1328 <mainMenu+0xa>
	/* Send a "ready" signal back to the HMI */
	UART_sendByte(CONTROL_READY_UART);
    1330:	8f ef       	ldi	r24, 0xFF	; 255
    1332:	0e 94 16 0a 	call	0x142c	; 0x142c <UART_sendByte>
	/* Getting the user input */
	operation = UART_receiveByte();
    1336:	0e 94 2d 0a 	call	0x145a	; 0x145a <UART_receiveByte>
    133a:	89 83       	std	Y+1, r24	; 0x01
	if(operation == '+')
    133c:	89 81       	ldd	r24, Y+1	; 0x01
    133e:	8b 32       	cpi	r24, 0x2B	; 43
    1340:	19 f4       	brne	.+6      	; 0x1348 <mainMenu+0x2a>
		{
			open_door();
    1342:	0e 94 1a 07 	call	0xe34	; 0xe34 <open_door>
    1346:	05 c0       	rjmp	.+10     	; 0x1352 <mainMenu+0x34>
		}
	else if(operation == '-')
    1348:	89 81       	ldd	r24, Y+1	; 0x01
    134a:	8d 32       	cpi	r24, 0x2D	; 45
    134c:	11 f4       	brne	.+4      	; 0x1352 <mainMenu+0x34>
		{
			change_password();
    134e:	0e 94 80 07 	call	0xf00	; 0xf00 <change_password>
		}
}
    1352:	0f 90       	pop	r0
    1354:	cf 91       	pop	r28
    1356:	df 91       	pop	r29
    1358:	08 95       	ret

0000135a <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType *Config_Ptr)
{
    135a:	df 93       	push	r29
    135c:	cf 93       	push	r28
    135e:	00 d0       	rcall	.+0      	; 0x1360 <UART_init+0x6>
    1360:	00 d0       	rcall	.+0      	; 0x1362 <UART_init+0x8>
    1362:	cd b7       	in	r28, 0x3d	; 61
    1364:	de b7       	in	r29, 0x3e	; 62
    1366:	9c 83       	std	Y+4, r25	; 0x04
    1368:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    136a:	1a 82       	std	Y+2, r1	; 0x02
    136c:	19 82       	std	Y+1, r1	; 0x01

	/*Enable UART Double speed mode*/
	UCSRA = (1<<U2X);
    136e:	eb e2       	ldi	r30, 0x2B	; 43
    1370:	f0 e0       	ldi	r31, 0x00	; 0
    1372:	82 e0       	ldi	r24, 0x02	; 2
    1374:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * TXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For (5,6,7,8) bit data mode
	 * RXB8 & TXB8 not used for (5,6,7,8) bit data mode
	 */
	UCSRB = (1<<RXEN) | (1<<TXEN);
    1376:	ea e2       	ldi	r30, 0x2A	; 42
    1378:	f0 e0       	ldi	r31, 0x00	; 0
    137a:	88 e1       	ldi	r24, 0x18	; 24
    137c:	80 83       	st	Z, r24
	 * UMSEL 	= 0 Asynchronous mode select
	 * UPM1:0 	= Parity data-type in Configuration structure
	 * USBS		= Stop bits data-type in Configuration structure
	 * UCSZ1:0	= Data bits data-type in Configuration structure
	 */
	UCSRC = (1<<URSEL) | ((Config_Ptr->parity)<<UPM0) | ((Config_Ptr->stop_bit)<<USBS) | ((Config_Ptr->bit_data)<<UCSZ0);
    137e:	a0 e4       	ldi	r26, 0x40	; 64
    1380:	b0 e0       	ldi	r27, 0x00	; 0
    1382:	eb 81       	ldd	r30, Y+3	; 0x03
    1384:	fc 81       	ldd	r31, Y+4	; 0x04
    1386:	81 81       	ldd	r24, Z+1	; 0x01
    1388:	88 2f       	mov	r24, r24
    138a:	90 e0       	ldi	r25, 0x00	; 0
    138c:	82 95       	swap	r24
    138e:	92 95       	swap	r25
    1390:	90 7f       	andi	r25, 0xF0	; 240
    1392:	98 27       	eor	r25, r24
    1394:	80 7f       	andi	r24, 0xF0	; 240
    1396:	98 27       	eor	r25, r24
    1398:	28 2f       	mov	r18, r24
    139a:	20 68       	ori	r18, 0x80	; 128
    139c:	eb 81       	ldd	r30, Y+3	; 0x03
    139e:	fc 81       	ldd	r31, Y+4	; 0x04
    13a0:	82 81       	ldd	r24, Z+2	; 0x02
    13a2:	88 2f       	mov	r24, r24
    13a4:	90 e0       	ldi	r25, 0x00	; 0
    13a6:	88 0f       	add	r24, r24
    13a8:	99 1f       	adc	r25, r25
    13aa:	88 0f       	add	r24, r24
    13ac:	99 1f       	adc	r25, r25
    13ae:	88 0f       	add	r24, r24
    13b0:	99 1f       	adc	r25, r25
    13b2:	28 2b       	or	r18, r24
    13b4:	eb 81       	ldd	r30, Y+3	; 0x03
    13b6:	fc 81       	ldd	r31, Y+4	; 0x04
    13b8:	80 81       	ld	r24, Z
    13ba:	88 2f       	mov	r24, r24
    13bc:	90 e0       	ldi	r25, 0x00	; 0
    13be:	88 0f       	add	r24, r24
    13c0:	99 1f       	adc	r25, r25
    13c2:	82 2b       	or	r24, r18
    13c4:	8c 93       	st	X, r24

	/* BaudRate = (F_CPU) / 8(UBRR + 1)		"UART Double speed mode"
	 * UBRR = ((F_CPU) / (BaudRate * 8)) - 1
	 */
	ubrr_value = (uint16)(F_CPU / ((Config_Ptr->baud_rate) * 8UL) - 1);
    13c6:	eb 81       	ldd	r30, Y+3	; 0x03
    13c8:	fc 81       	ldd	r31, Y+4	; 0x04
    13ca:	83 81       	ldd	r24, Z+3	; 0x03
    13cc:	94 81       	ldd	r25, Z+4	; 0x04
    13ce:	a5 81       	ldd	r26, Z+5	; 0x05
    13d0:	b6 81       	ldd	r27, Z+6	; 0x06
    13d2:	88 0f       	add	r24, r24
    13d4:	99 1f       	adc	r25, r25
    13d6:	aa 1f       	adc	r26, r26
    13d8:	bb 1f       	adc	r27, r27
    13da:	88 0f       	add	r24, r24
    13dc:	99 1f       	adc	r25, r25
    13de:	aa 1f       	adc	r26, r26
    13e0:	bb 1f       	adc	r27, r27
    13e2:	88 0f       	add	r24, r24
    13e4:	99 1f       	adc	r25, r25
    13e6:	aa 1f       	adc	r26, r26
    13e8:	bb 1f       	adc	r27, r27
    13ea:	9c 01       	movw	r18, r24
    13ec:	ad 01       	movw	r20, r26
    13ee:	80 e0       	ldi	r24, 0x00	; 0
    13f0:	92 e1       	ldi	r25, 0x12	; 18
    13f2:	aa e7       	ldi	r26, 0x7A	; 122
    13f4:	b0 e0       	ldi	r27, 0x00	; 0
    13f6:	bc 01       	movw	r22, r24
    13f8:	cd 01       	movw	r24, r26
    13fa:	0e 94 07 11 	call	0x220e	; 0x220e <__udivmodsi4>
    13fe:	da 01       	movw	r26, r20
    1400:	c9 01       	movw	r24, r18
    1402:	01 97       	sbiw	r24, 0x01	; 1
    1404:	9a 83       	std	Y+2, r25	; 0x02
    1406:	89 83       	std	Y+1, r24	; 0x01


	UBRRH = (ubrr_value>>8);		/*UBRR-High = ubrr_value shifted right by 8 bits*/
    1408:	e0 e4       	ldi	r30, 0x40	; 64
    140a:	f0 e0       	ldi	r31, 0x00	; 0
    140c:	89 81       	ldd	r24, Y+1	; 0x01
    140e:	9a 81       	ldd	r25, Y+2	; 0x02
    1410:	89 2f       	mov	r24, r25
    1412:	99 27       	eor	r25, r25
    1414:	80 83       	st	Z, r24
	UBRRL = ubrr_value;				/*UBRR-Low = first 8 bits of ubrr_value*/
    1416:	e9 e2       	ldi	r30, 0x29	; 41
    1418:	f0 e0       	ldi	r31, 0x00	; 0
    141a:	89 81       	ldd	r24, Y+1	; 0x01
    141c:	80 83       	st	Z, r24
}
    141e:	0f 90       	pop	r0
    1420:	0f 90       	pop	r0
    1422:	0f 90       	pop	r0
    1424:	0f 90       	pop	r0
    1426:	cf 91       	pop	r28
    1428:	df 91       	pop	r29
    142a:	08 95       	ret

0000142c <UART_sendByte>:
/*
 * Description :
 * Function responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    142c:	df 93       	push	r29
    142e:	cf 93       	push	r28
    1430:	0f 92       	push	r0
    1432:	cd b7       	in	r28, 0x3d	; 61
    1434:	de b7       	in	r29, 0x3e	; 62
    1436:	89 83       	std	Y+1, r24	; 0x01
	/*Wait until the buffer is empty and ready to take new data frame*/
	while(BIT_IS_CLEAR(UCSRA, UDRE));
    1438:	eb e2       	ldi	r30, 0x2B	; 43
    143a:	f0 e0       	ldi	r31, 0x00	; 0
    143c:	80 81       	ld	r24, Z
    143e:	88 2f       	mov	r24, r24
    1440:	90 e0       	ldi	r25, 0x00	; 0
    1442:	80 72       	andi	r24, 0x20	; 32
    1444:	90 70       	andi	r25, 0x00	; 0
    1446:	00 97       	sbiw	r24, 0x00	; 0
    1448:	b9 f3       	breq	.-18     	; 0x1438 <UART_sendByte+0xc>

	UDR = data;
    144a:	ec e2       	ldi	r30, 0x2C	; 44
    144c:	f0 e0       	ldi	r31, 0x00	; 0
    144e:	89 81       	ldd	r24, Y+1	; 0x01
    1450:	80 83       	st	Z, r24
}
    1452:	0f 90       	pop	r0
    1454:	cf 91       	pop	r28
    1456:	df 91       	pop	r29
    1458:	08 95       	ret

0000145a <UART_receiveByte>:
/*
 * Description :
 * Function responsible for receive byte from another UART device.
 */
uint8 UART_receiveByte(void)
{
    145a:	df 93       	push	r29
    145c:	cf 93       	push	r28
    145e:	cd b7       	in	r28, 0x3d	; 61
    1460:	de b7       	in	r29, 0x3e	; 62
	while(BIT_IS_CLEAR(UCSRA, RXC));
    1462:	eb e2       	ldi	r30, 0x2B	; 43
    1464:	f0 e0       	ldi	r31, 0x00	; 0
    1466:	80 81       	ld	r24, Z
    1468:	88 23       	and	r24, r24
    146a:	dc f7       	brge	.-10     	; 0x1462 <UART_receiveByte+0x8>

	return UDR;
    146c:	ec e2       	ldi	r30, 0x2C	; 44
    146e:	f0 e0       	ldi	r31, 0x00	; 0
    1470:	80 81       	ld	r24, Z
}
    1472:	cf 91       	pop	r28
    1474:	df 91       	pop	r29
    1476:	08 95       	ret

00001478 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    1478:	df 93       	push	r29
    147a:	cf 93       	push	r28
    147c:	00 d0       	rcall	.+0      	; 0x147e <UART_sendString+0x6>
    147e:	0f 92       	push	r0
    1480:	cd b7       	in	r28, 0x3d	; 61
    1482:	de b7       	in	r29, 0x3e	; 62
    1484:	9b 83       	std	Y+3, r25	; 0x03
    1486:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1488:	19 82       	std	Y+1, r1	; 0x01
    148a:	0e c0       	rjmp	.+28     	; 0x14a8 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    148c:	89 81       	ldd	r24, Y+1	; 0x01
    148e:	28 2f       	mov	r18, r24
    1490:	30 e0       	ldi	r19, 0x00	; 0
    1492:	8a 81       	ldd	r24, Y+2	; 0x02
    1494:	9b 81       	ldd	r25, Y+3	; 0x03
    1496:	fc 01       	movw	r30, r24
    1498:	e2 0f       	add	r30, r18
    149a:	f3 1f       	adc	r31, r19
    149c:	80 81       	ld	r24, Z
    149e:	0e 94 16 0a 	call	0x142c	; 0x142c <UART_sendByte>
		i++;
    14a2:	89 81       	ldd	r24, Y+1	; 0x01
    14a4:	8f 5f       	subi	r24, 0xFF	; 255
    14a6:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    14a8:	89 81       	ldd	r24, Y+1	; 0x01
    14aa:	28 2f       	mov	r18, r24
    14ac:	30 e0       	ldi	r19, 0x00	; 0
    14ae:	8a 81       	ldd	r24, Y+2	; 0x02
    14b0:	9b 81       	ldd	r25, Y+3	; 0x03
    14b2:	fc 01       	movw	r30, r24
    14b4:	e2 0f       	add	r30, r18
    14b6:	f3 1f       	adc	r31, r19
    14b8:	80 81       	ld	r24, Z
    14ba:	88 23       	and	r24, r24
    14bc:	39 f7       	brne	.-50     	; 0x148c <UART_sendString+0x14>
	{
		UART_sendByte(Str[i]);
		i++;
	}
}
    14be:	0f 90       	pop	r0
    14c0:	0f 90       	pop	r0
    14c2:	0f 90       	pop	r0
    14c4:	cf 91       	pop	r28
    14c6:	df 91       	pop	r29
    14c8:	08 95       	ret

000014ca <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    14ca:	0f 93       	push	r16
    14cc:	1f 93       	push	r17
    14ce:	df 93       	push	r29
    14d0:	cf 93       	push	r28
    14d2:	00 d0       	rcall	.+0      	; 0x14d4 <UART_receiveString+0xa>
    14d4:	0f 92       	push	r0
    14d6:	cd b7       	in	r28, 0x3d	; 61
    14d8:	de b7       	in	r29, 0x3e	; 62
    14da:	9b 83       	std	Y+3, r25	; 0x03
    14dc:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    14de:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_receiveByte();
    14e0:	89 81       	ldd	r24, Y+1	; 0x01
    14e2:	28 2f       	mov	r18, r24
    14e4:	30 e0       	ldi	r19, 0x00	; 0
    14e6:	8a 81       	ldd	r24, Y+2	; 0x02
    14e8:	9b 81       	ldd	r25, Y+3	; 0x03
    14ea:	8c 01       	movw	r16, r24
    14ec:	02 0f       	add	r16, r18
    14ee:	13 1f       	adc	r17, r19
    14f0:	0e 94 2d 0a 	call	0x145a	; 0x145a <UART_receiveByte>
    14f4:	f8 01       	movw	r30, r16
    14f6:	80 83       	st	Z, r24
    14f8:	0f c0       	rjmp	.+30     	; 0x1518 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    14fa:	89 81       	ldd	r24, Y+1	; 0x01
    14fc:	8f 5f       	subi	r24, 0xFF	; 255
    14fe:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_receiveByte();
    1500:	89 81       	ldd	r24, Y+1	; 0x01
    1502:	28 2f       	mov	r18, r24
    1504:	30 e0       	ldi	r19, 0x00	; 0
    1506:	8a 81       	ldd	r24, Y+2	; 0x02
    1508:	9b 81       	ldd	r25, Y+3	; 0x03
    150a:	8c 01       	movw	r16, r24
    150c:	02 0f       	add	r16, r18
    150e:	13 1f       	adc	r17, r19
    1510:	0e 94 2d 0a 	call	0x145a	; 0x145a <UART_receiveByte>
    1514:	f8 01       	movw	r30, r16
    1516:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_receiveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    1518:	89 81       	ldd	r24, Y+1	; 0x01
    151a:	28 2f       	mov	r18, r24
    151c:	30 e0       	ldi	r19, 0x00	; 0
    151e:	8a 81       	ldd	r24, Y+2	; 0x02
    1520:	9b 81       	ldd	r25, Y+3	; 0x03
    1522:	fc 01       	movw	r30, r24
    1524:	e2 0f       	add	r30, r18
    1526:	f3 1f       	adc	r31, r19
    1528:	80 81       	ld	r24, Z
    152a:	83 32       	cpi	r24, 0x23	; 35
    152c:	31 f7       	brne	.-52     	; 0x14fa <UART_receiveString+0x30>
		i++;
		Str[i] = UART_receiveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    152e:	89 81       	ldd	r24, Y+1	; 0x01
    1530:	28 2f       	mov	r18, r24
    1532:	30 e0       	ldi	r19, 0x00	; 0
    1534:	8a 81       	ldd	r24, Y+2	; 0x02
    1536:	9b 81       	ldd	r25, Y+3	; 0x03
    1538:	fc 01       	movw	r30, r24
    153a:	e2 0f       	add	r30, r18
    153c:	f3 1f       	adc	r31, r19
    153e:	10 82       	st	Z, r1
}
    1540:	0f 90       	pop	r0
    1542:	0f 90       	pop	r0
    1544:	0f 90       	pop	r0
    1546:	cf 91       	pop	r28
    1548:	df 91       	pop	r29
    154a:	1f 91       	pop	r17
    154c:	0f 91       	pop	r16
    154e:	08 95       	ret

00001550 <Buzzer_init>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void Buzzer_init()
{
    1550:	df 93       	push	r29
    1552:	cf 93       	push	r28
    1554:	cd b7       	in	r28, 0x3d	; 61
    1556:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(BUZZER_PORT,BUZZER_PIN,PIN_OUTPUT);
    1558:	82 e0       	ldi	r24, 0x02	; 2
    155a:	65 e0       	ldi	r22, 0x05	; 5
    155c:	41 e0       	ldi	r20, 0x01	; 1
    155e:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <GPIO_setupPinDirection>
	GPIO_writePin(BUZZER_PORT,BUZZER_PIN,LOGIC_LOW);
    1562:	82 e0       	ldi	r24, 0x02	; 2
    1564:	65 e0       	ldi	r22, 0x05	; 5
    1566:	40 e0       	ldi	r20, 0x00	; 0
    1568:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <GPIO_writePin>

}
    156c:	cf 91       	pop	r28
    156e:	df 91       	pop	r29
    1570:	08 95       	ret

00001572 <Buzzer_on>:

void Buzzer_on(void)
{
    1572:	df 93       	push	r29
    1574:	cf 93       	push	r28
    1576:	cd b7       	in	r28, 0x3d	; 61
    1578:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT,BUZZER_PIN,LOGIC_HIGH);
    157a:	82 e0       	ldi	r24, 0x02	; 2
    157c:	65 e0       	ldi	r22, 0x05	; 5
    157e:	41 e0       	ldi	r20, 0x01	; 1
    1580:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <GPIO_writePin>
}
    1584:	cf 91       	pop	r28
    1586:	df 91       	pop	r29
    1588:	08 95       	ret

0000158a <Buzzer_off>:

void Buzzer_off()
{
    158a:	df 93       	push	r29
    158c:	cf 93       	push	r28
    158e:	cd b7       	in	r28, 0x3d	; 61
    1590:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT,BUZZER_PIN,LOGIC_LOW);
    1592:	82 e0       	ldi	r24, 0x02	; 2
    1594:	65 e0       	ldi	r22, 0x05	; 5
    1596:	40 e0       	ldi	r20, 0x00	; 0
    1598:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <GPIO_writePin>
}
    159c:	cf 91       	pop	r28
    159e:	df 91       	pop	r29
    15a0:	08 95       	ret

000015a2 <EEPROM_writeByte>:
 *******************************************************************************/
#include "external_eeprom.h"
#include "twi.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    15a2:	df 93       	push	r29
    15a4:	cf 93       	push	r28
    15a6:	00 d0       	rcall	.+0      	; 0x15a8 <EEPROM_writeByte+0x6>
    15a8:	00 d0       	rcall	.+0      	; 0x15aa <EEPROM_writeByte+0x8>
    15aa:	cd b7       	in	r28, 0x3d	; 61
    15ac:	de b7       	in	r29, 0x3e	; 62
    15ae:	9a 83       	std	Y+2, r25	; 0x02
    15b0:	89 83       	std	Y+1, r24	; 0x01
    15b2:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    15b4:	0e 94 8d 10 	call	0x211a	; 0x211a <TWI_start>
    if (TWI_getStatus() != TWI_START)
    15b8:	0e 94 e5 10 	call	0x21ca	; 0x21ca <TWI_getStatus>
    15bc:	88 30       	cpi	r24, 0x08	; 8
    15be:	11 f0       	breq	.+4      	; 0x15c4 <EEPROM_writeByte+0x22>
        return ERROR;
    15c0:	1c 82       	std	Y+4, r1	; 0x04
    15c2:	28 c0       	rjmp	.+80     	; 0x1614 <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    15c4:	89 81       	ldd	r24, Y+1	; 0x01
    15c6:	9a 81       	ldd	r25, Y+2	; 0x02
    15c8:	80 70       	andi	r24, 0x00	; 0
    15ca:	97 70       	andi	r25, 0x07	; 7
    15cc:	88 0f       	add	r24, r24
    15ce:	89 2f       	mov	r24, r25
    15d0:	88 1f       	adc	r24, r24
    15d2:	99 0b       	sbc	r25, r25
    15d4:	91 95       	neg	r25
    15d6:	80 6a       	ori	r24, 0xA0	; 160
    15d8:	0e 94 a8 10 	call	0x2150	; 0x2150 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    15dc:	0e 94 e5 10 	call	0x21ca	; 0x21ca <TWI_getStatus>
    15e0:	88 31       	cpi	r24, 0x18	; 24
    15e2:	11 f0       	breq	.+4      	; 0x15e8 <EEPROM_writeByte+0x46>
        return ERROR; 
    15e4:	1c 82       	std	Y+4, r1	; 0x04
    15e6:	16 c0       	rjmp	.+44     	; 0x1614 <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    15e8:	89 81       	ldd	r24, Y+1	; 0x01
    15ea:	0e 94 a8 10 	call	0x2150	; 0x2150 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    15ee:	0e 94 e5 10 	call	0x21ca	; 0x21ca <TWI_getStatus>
    15f2:	88 32       	cpi	r24, 0x28	; 40
    15f4:	11 f0       	breq	.+4      	; 0x15fa <EEPROM_writeByte+0x58>
        return ERROR;
    15f6:	1c 82       	std	Y+4, r1	; 0x04
    15f8:	0d c0       	rjmp	.+26     	; 0x1614 <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
    15fa:	8b 81       	ldd	r24, Y+3	; 0x03
    15fc:	0e 94 a8 10 	call	0x2150	; 0x2150 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1600:	0e 94 e5 10 	call	0x21ca	; 0x21ca <TWI_getStatus>
    1604:	88 32       	cpi	r24, 0x28	; 40
    1606:	11 f0       	breq	.+4      	; 0x160c <EEPROM_writeByte+0x6a>
        return ERROR;
    1608:	1c 82       	std	Y+4, r1	; 0x04
    160a:	04 c0       	rjmp	.+8      	; 0x1614 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    160c:	0e 94 9d 10 	call	0x213a	; 0x213a <TWI_stop>
	
    return SUCCESS;
    1610:	81 e0       	ldi	r24, 0x01	; 1
    1612:	8c 83       	std	Y+4, r24	; 0x04
    1614:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1616:	0f 90       	pop	r0
    1618:	0f 90       	pop	r0
    161a:	0f 90       	pop	r0
    161c:	0f 90       	pop	r0
    161e:	cf 91       	pop	r28
    1620:	df 91       	pop	r29
    1622:	08 95       	ret

00001624 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    1624:	df 93       	push	r29
    1626:	cf 93       	push	r28
    1628:	00 d0       	rcall	.+0      	; 0x162a <EEPROM_readByte+0x6>
    162a:	00 d0       	rcall	.+0      	; 0x162c <EEPROM_readByte+0x8>
    162c:	0f 92       	push	r0
    162e:	cd b7       	in	r28, 0x3d	; 61
    1630:	de b7       	in	r29, 0x3e	; 62
    1632:	9a 83       	std	Y+2, r25	; 0x02
    1634:	89 83       	std	Y+1, r24	; 0x01
    1636:	7c 83       	std	Y+4, r23	; 0x04
    1638:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    163a:	0e 94 8d 10 	call	0x211a	; 0x211a <TWI_start>
    if (TWI_getStatus() != TWI_START)
    163e:	0e 94 e5 10 	call	0x21ca	; 0x21ca <TWI_getStatus>
    1642:	88 30       	cpi	r24, 0x08	; 8
    1644:	11 f0       	breq	.+4      	; 0x164a <EEPROM_readByte+0x26>
        return ERROR;
    1646:	1d 82       	std	Y+5, r1	; 0x05
    1648:	44 c0       	rjmp	.+136    	; 0x16d2 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    164a:	89 81       	ldd	r24, Y+1	; 0x01
    164c:	9a 81       	ldd	r25, Y+2	; 0x02
    164e:	80 70       	andi	r24, 0x00	; 0
    1650:	97 70       	andi	r25, 0x07	; 7
    1652:	88 0f       	add	r24, r24
    1654:	89 2f       	mov	r24, r25
    1656:	88 1f       	adc	r24, r24
    1658:	99 0b       	sbc	r25, r25
    165a:	91 95       	neg	r25
    165c:	80 6a       	ori	r24, 0xA0	; 160
    165e:	0e 94 a8 10 	call	0x2150	; 0x2150 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1662:	0e 94 e5 10 	call	0x21ca	; 0x21ca <TWI_getStatus>
    1666:	88 31       	cpi	r24, 0x18	; 24
    1668:	11 f0       	breq	.+4      	; 0x166e <EEPROM_readByte+0x4a>
        return ERROR;
    166a:	1d 82       	std	Y+5, r1	; 0x05
    166c:	32 c0       	rjmp	.+100    	; 0x16d2 <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    166e:	89 81       	ldd	r24, Y+1	; 0x01
    1670:	0e 94 a8 10 	call	0x2150	; 0x2150 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1674:	0e 94 e5 10 	call	0x21ca	; 0x21ca <TWI_getStatus>
    1678:	88 32       	cpi	r24, 0x28	; 40
    167a:	11 f0       	breq	.+4      	; 0x1680 <EEPROM_readByte+0x5c>
        return ERROR;
    167c:	1d 82       	std	Y+5, r1	; 0x05
    167e:	29 c0       	rjmp	.+82     	; 0x16d2 <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    1680:	0e 94 8d 10 	call	0x211a	; 0x211a <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    1684:	0e 94 e5 10 	call	0x21ca	; 0x21ca <TWI_getStatus>
    1688:	80 31       	cpi	r24, 0x10	; 16
    168a:	11 f0       	breq	.+4      	; 0x1690 <EEPROM_readByte+0x6c>
        return ERROR;
    168c:	1d 82       	std	Y+5, r1	; 0x05
    168e:	21 c0       	rjmp	.+66     	; 0x16d2 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    1690:	89 81       	ldd	r24, Y+1	; 0x01
    1692:	9a 81       	ldd	r25, Y+2	; 0x02
    1694:	80 70       	andi	r24, 0x00	; 0
    1696:	97 70       	andi	r25, 0x07	; 7
    1698:	88 0f       	add	r24, r24
    169a:	89 2f       	mov	r24, r25
    169c:	88 1f       	adc	r24, r24
    169e:	99 0b       	sbc	r25, r25
    16a0:	91 95       	neg	r25
    16a2:	81 6a       	ori	r24, 0xA1	; 161
    16a4:	0e 94 a8 10 	call	0x2150	; 0x2150 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    16a8:	0e 94 e5 10 	call	0x21ca	; 0x21ca <TWI_getStatus>
    16ac:	80 34       	cpi	r24, 0x40	; 64
    16ae:	11 f0       	breq	.+4      	; 0x16b4 <EEPROM_readByte+0x90>
        return ERROR;
    16b0:	1d 82       	std	Y+5, r1	; 0x05
    16b2:	0f c0       	rjmp	.+30     	; 0x16d2 <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    16b4:	0e 94 d2 10 	call	0x21a4	; 0x21a4 <TWI_readByteWithNACK>
    16b8:	eb 81       	ldd	r30, Y+3	; 0x03
    16ba:	fc 81       	ldd	r31, Y+4	; 0x04
    16bc:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    16be:	0e 94 e5 10 	call	0x21ca	; 0x21ca <TWI_getStatus>
    16c2:	88 35       	cpi	r24, 0x58	; 88
    16c4:	11 f0       	breq	.+4      	; 0x16ca <EEPROM_readByte+0xa6>
        return ERROR;
    16c6:	1d 82       	std	Y+5, r1	; 0x05
    16c8:	04 c0       	rjmp	.+8      	; 0x16d2 <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    16ca:	0e 94 9d 10 	call	0x213a	; 0x213a <TWI_stop>

    return SUCCESS;
    16ce:	81 e0       	ldi	r24, 0x01	; 1
    16d0:	8d 83       	std	Y+5, r24	; 0x05
    16d2:	8d 81       	ldd	r24, Y+5	; 0x05
}
    16d4:	0f 90       	pop	r0
    16d6:	0f 90       	pop	r0
    16d8:	0f 90       	pop	r0
    16da:	0f 90       	pop	r0
    16dc:	0f 90       	pop	r0
    16de:	cf 91       	pop	r28
    16e0:	df 91       	pop	r29
    16e2:	08 95       	ret

000016e4 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    16e4:	df 93       	push	r29
    16e6:	cf 93       	push	r28
    16e8:	00 d0       	rcall	.+0      	; 0x16ea <GPIO_setupPinDirection+0x6>
    16ea:	00 d0       	rcall	.+0      	; 0x16ec <GPIO_setupPinDirection+0x8>
    16ec:	0f 92       	push	r0
    16ee:	cd b7       	in	r28, 0x3d	; 61
    16f0:	de b7       	in	r29, 0x3e	; 62
    16f2:	89 83       	std	Y+1, r24	; 0x01
    16f4:	6a 83       	std	Y+2, r22	; 0x02
    16f6:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    16f8:	8a 81       	ldd	r24, Y+2	; 0x02
    16fa:	88 30       	cpi	r24, 0x08	; 8
    16fc:	08 f0       	brcs	.+2      	; 0x1700 <GPIO_setupPinDirection+0x1c>
    16fe:	d5 c0       	rjmp	.+426    	; 0x18aa <GPIO_setupPinDirection+0x1c6>
    1700:	89 81       	ldd	r24, Y+1	; 0x01
    1702:	84 30       	cpi	r24, 0x04	; 4
    1704:	08 f0       	brcs	.+2      	; 0x1708 <GPIO_setupPinDirection+0x24>
    1706:	d1 c0       	rjmp	.+418    	; 0x18aa <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1708:	89 81       	ldd	r24, Y+1	; 0x01
    170a:	28 2f       	mov	r18, r24
    170c:	30 e0       	ldi	r19, 0x00	; 0
    170e:	3d 83       	std	Y+5, r19	; 0x05
    1710:	2c 83       	std	Y+4, r18	; 0x04
    1712:	8c 81       	ldd	r24, Y+4	; 0x04
    1714:	9d 81       	ldd	r25, Y+5	; 0x05
    1716:	81 30       	cpi	r24, 0x01	; 1
    1718:	91 05       	cpc	r25, r1
    171a:	09 f4       	brne	.+2      	; 0x171e <GPIO_setupPinDirection+0x3a>
    171c:	43 c0       	rjmp	.+134    	; 0x17a4 <GPIO_setupPinDirection+0xc0>
    171e:	2c 81       	ldd	r18, Y+4	; 0x04
    1720:	3d 81       	ldd	r19, Y+5	; 0x05
    1722:	22 30       	cpi	r18, 0x02	; 2
    1724:	31 05       	cpc	r19, r1
    1726:	2c f4       	brge	.+10     	; 0x1732 <GPIO_setupPinDirection+0x4e>
    1728:	8c 81       	ldd	r24, Y+4	; 0x04
    172a:	9d 81       	ldd	r25, Y+5	; 0x05
    172c:	00 97       	sbiw	r24, 0x00	; 0
    172e:	71 f0       	breq	.+28     	; 0x174c <GPIO_setupPinDirection+0x68>
    1730:	bc c0       	rjmp	.+376    	; 0x18aa <GPIO_setupPinDirection+0x1c6>
    1732:	2c 81       	ldd	r18, Y+4	; 0x04
    1734:	3d 81       	ldd	r19, Y+5	; 0x05
    1736:	22 30       	cpi	r18, 0x02	; 2
    1738:	31 05       	cpc	r19, r1
    173a:	09 f4       	brne	.+2      	; 0x173e <GPIO_setupPinDirection+0x5a>
    173c:	5f c0       	rjmp	.+190    	; 0x17fc <GPIO_setupPinDirection+0x118>
    173e:	8c 81       	ldd	r24, Y+4	; 0x04
    1740:	9d 81       	ldd	r25, Y+5	; 0x05
    1742:	83 30       	cpi	r24, 0x03	; 3
    1744:	91 05       	cpc	r25, r1
    1746:	09 f4       	brne	.+2      	; 0x174a <GPIO_setupPinDirection+0x66>
    1748:	85 c0       	rjmp	.+266    	; 0x1854 <GPIO_setupPinDirection+0x170>
    174a:	af c0       	rjmp	.+350    	; 0x18aa <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    174c:	8b 81       	ldd	r24, Y+3	; 0x03
    174e:	81 30       	cpi	r24, 0x01	; 1
    1750:	a1 f4       	brne	.+40     	; 0x177a <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1752:	aa e3       	ldi	r26, 0x3A	; 58
    1754:	b0 e0       	ldi	r27, 0x00	; 0
    1756:	ea e3       	ldi	r30, 0x3A	; 58
    1758:	f0 e0       	ldi	r31, 0x00	; 0
    175a:	80 81       	ld	r24, Z
    175c:	48 2f       	mov	r20, r24
    175e:	8a 81       	ldd	r24, Y+2	; 0x02
    1760:	28 2f       	mov	r18, r24
    1762:	30 e0       	ldi	r19, 0x00	; 0
    1764:	81 e0       	ldi	r24, 0x01	; 1
    1766:	90 e0       	ldi	r25, 0x00	; 0
    1768:	02 2e       	mov	r0, r18
    176a:	02 c0       	rjmp	.+4      	; 0x1770 <GPIO_setupPinDirection+0x8c>
    176c:	88 0f       	add	r24, r24
    176e:	99 1f       	adc	r25, r25
    1770:	0a 94       	dec	r0
    1772:	e2 f7       	brpl	.-8      	; 0x176c <GPIO_setupPinDirection+0x88>
    1774:	84 2b       	or	r24, r20
    1776:	8c 93       	st	X, r24
    1778:	98 c0       	rjmp	.+304    	; 0x18aa <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    177a:	aa e3       	ldi	r26, 0x3A	; 58
    177c:	b0 e0       	ldi	r27, 0x00	; 0
    177e:	ea e3       	ldi	r30, 0x3A	; 58
    1780:	f0 e0       	ldi	r31, 0x00	; 0
    1782:	80 81       	ld	r24, Z
    1784:	48 2f       	mov	r20, r24
    1786:	8a 81       	ldd	r24, Y+2	; 0x02
    1788:	28 2f       	mov	r18, r24
    178a:	30 e0       	ldi	r19, 0x00	; 0
    178c:	81 e0       	ldi	r24, 0x01	; 1
    178e:	90 e0       	ldi	r25, 0x00	; 0
    1790:	02 2e       	mov	r0, r18
    1792:	02 c0       	rjmp	.+4      	; 0x1798 <GPIO_setupPinDirection+0xb4>
    1794:	88 0f       	add	r24, r24
    1796:	99 1f       	adc	r25, r25
    1798:	0a 94       	dec	r0
    179a:	e2 f7       	brpl	.-8      	; 0x1794 <GPIO_setupPinDirection+0xb0>
    179c:	80 95       	com	r24
    179e:	84 23       	and	r24, r20
    17a0:	8c 93       	st	X, r24
    17a2:	83 c0       	rjmp	.+262    	; 0x18aa <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    17a4:	8b 81       	ldd	r24, Y+3	; 0x03
    17a6:	81 30       	cpi	r24, 0x01	; 1
    17a8:	a1 f4       	brne	.+40     	; 0x17d2 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    17aa:	a7 e3       	ldi	r26, 0x37	; 55
    17ac:	b0 e0       	ldi	r27, 0x00	; 0
    17ae:	e7 e3       	ldi	r30, 0x37	; 55
    17b0:	f0 e0       	ldi	r31, 0x00	; 0
    17b2:	80 81       	ld	r24, Z
    17b4:	48 2f       	mov	r20, r24
    17b6:	8a 81       	ldd	r24, Y+2	; 0x02
    17b8:	28 2f       	mov	r18, r24
    17ba:	30 e0       	ldi	r19, 0x00	; 0
    17bc:	81 e0       	ldi	r24, 0x01	; 1
    17be:	90 e0       	ldi	r25, 0x00	; 0
    17c0:	02 2e       	mov	r0, r18
    17c2:	02 c0       	rjmp	.+4      	; 0x17c8 <GPIO_setupPinDirection+0xe4>
    17c4:	88 0f       	add	r24, r24
    17c6:	99 1f       	adc	r25, r25
    17c8:	0a 94       	dec	r0
    17ca:	e2 f7       	brpl	.-8      	; 0x17c4 <GPIO_setupPinDirection+0xe0>
    17cc:	84 2b       	or	r24, r20
    17ce:	8c 93       	st	X, r24
    17d0:	6c c0       	rjmp	.+216    	; 0x18aa <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    17d2:	a7 e3       	ldi	r26, 0x37	; 55
    17d4:	b0 e0       	ldi	r27, 0x00	; 0
    17d6:	e7 e3       	ldi	r30, 0x37	; 55
    17d8:	f0 e0       	ldi	r31, 0x00	; 0
    17da:	80 81       	ld	r24, Z
    17dc:	48 2f       	mov	r20, r24
    17de:	8a 81       	ldd	r24, Y+2	; 0x02
    17e0:	28 2f       	mov	r18, r24
    17e2:	30 e0       	ldi	r19, 0x00	; 0
    17e4:	81 e0       	ldi	r24, 0x01	; 1
    17e6:	90 e0       	ldi	r25, 0x00	; 0
    17e8:	02 2e       	mov	r0, r18
    17ea:	02 c0       	rjmp	.+4      	; 0x17f0 <GPIO_setupPinDirection+0x10c>
    17ec:	88 0f       	add	r24, r24
    17ee:	99 1f       	adc	r25, r25
    17f0:	0a 94       	dec	r0
    17f2:	e2 f7       	brpl	.-8      	; 0x17ec <GPIO_setupPinDirection+0x108>
    17f4:	80 95       	com	r24
    17f6:	84 23       	and	r24, r20
    17f8:	8c 93       	st	X, r24
    17fa:	57 c0       	rjmp	.+174    	; 0x18aa <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    17fc:	8b 81       	ldd	r24, Y+3	; 0x03
    17fe:	81 30       	cpi	r24, 0x01	; 1
    1800:	a1 f4       	brne	.+40     	; 0x182a <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1802:	a4 e3       	ldi	r26, 0x34	; 52
    1804:	b0 e0       	ldi	r27, 0x00	; 0
    1806:	e4 e3       	ldi	r30, 0x34	; 52
    1808:	f0 e0       	ldi	r31, 0x00	; 0
    180a:	80 81       	ld	r24, Z
    180c:	48 2f       	mov	r20, r24
    180e:	8a 81       	ldd	r24, Y+2	; 0x02
    1810:	28 2f       	mov	r18, r24
    1812:	30 e0       	ldi	r19, 0x00	; 0
    1814:	81 e0       	ldi	r24, 0x01	; 1
    1816:	90 e0       	ldi	r25, 0x00	; 0
    1818:	02 2e       	mov	r0, r18
    181a:	02 c0       	rjmp	.+4      	; 0x1820 <GPIO_setupPinDirection+0x13c>
    181c:	88 0f       	add	r24, r24
    181e:	99 1f       	adc	r25, r25
    1820:	0a 94       	dec	r0
    1822:	e2 f7       	brpl	.-8      	; 0x181c <GPIO_setupPinDirection+0x138>
    1824:	84 2b       	or	r24, r20
    1826:	8c 93       	st	X, r24
    1828:	40 c0       	rjmp	.+128    	; 0x18aa <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    182a:	a4 e3       	ldi	r26, 0x34	; 52
    182c:	b0 e0       	ldi	r27, 0x00	; 0
    182e:	e4 e3       	ldi	r30, 0x34	; 52
    1830:	f0 e0       	ldi	r31, 0x00	; 0
    1832:	80 81       	ld	r24, Z
    1834:	48 2f       	mov	r20, r24
    1836:	8a 81       	ldd	r24, Y+2	; 0x02
    1838:	28 2f       	mov	r18, r24
    183a:	30 e0       	ldi	r19, 0x00	; 0
    183c:	81 e0       	ldi	r24, 0x01	; 1
    183e:	90 e0       	ldi	r25, 0x00	; 0
    1840:	02 2e       	mov	r0, r18
    1842:	02 c0       	rjmp	.+4      	; 0x1848 <GPIO_setupPinDirection+0x164>
    1844:	88 0f       	add	r24, r24
    1846:	99 1f       	adc	r25, r25
    1848:	0a 94       	dec	r0
    184a:	e2 f7       	brpl	.-8      	; 0x1844 <GPIO_setupPinDirection+0x160>
    184c:	80 95       	com	r24
    184e:	84 23       	and	r24, r20
    1850:	8c 93       	st	X, r24
    1852:	2b c0       	rjmp	.+86     	; 0x18aa <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1854:	8b 81       	ldd	r24, Y+3	; 0x03
    1856:	81 30       	cpi	r24, 0x01	; 1
    1858:	a1 f4       	brne	.+40     	; 0x1882 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    185a:	a1 e3       	ldi	r26, 0x31	; 49
    185c:	b0 e0       	ldi	r27, 0x00	; 0
    185e:	e1 e3       	ldi	r30, 0x31	; 49
    1860:	f0 e0       	ldi	r31, 0x00	; 0
    1862:	80 81       	ld	r24, Z
    1864:	48 2f       	mov	r20, r24
    1866:	8a 81       	ldd	r24, Y+2	; 0x02
    1868:	28 2f       	mov	r18, r24
    186a:	30 e0       	ldi	r19, 0x00	; 0
    186c:	81 e0       	ldi	r24, 0x01	; 1
    186e:	90 e0       	ldi	r25, 0x00	; 0
    1870:	02 2e       	mov	r0, r18
    1872:	02 c0       	rjmp	.+4      	; 0x1878 <GPIO_setupPinDirection+0x194>
    1874:	88 0f       	add	r24, r24
    1876:	99 1f       	adc	r25, r25
    1878:	0a 94       	dec	r0
    187a:	e2 f7       	brpl	.-8      	; 0x1874 <GPIO_setupPinDirection+0x190>
    187c:	84 2b       	or	r24, r20
    187e:	8c 93       	st	X, r24
    1880:	14 c0       	rjmp	.+40     	; 0x18aa <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1882:	a1 e3       	ldi	r26, 0x31	; 49
    1884:	b0 e0       	ldi	r27, 0x00	; 0
    1886:	e1 e3       	ldi	r30, 0x31	; 49
    1888:	f0 e0       	ldi	r31, 0x00	; 0
    188a:	80 81       	ld	r24, Z
    188c:	48 2f       	mov	r20, r24
    188e:	8a 81       	ldd	r24, Y+2	; 0x02
    1890:	28 2f       	mov	r18, r24
    1892:	30 e0       	ldi	r19, 0x00	; 0
    1894:	81 e0       	ldi	r24, 0x01	; 1
    1896:	90 e0       	ldi	r25, 0x00	; 0
    1898:	02 2e       	mov	r0, r18
    189a:	02 c0       	rjmp	.+4      	; 0x18a0 <GPIO_setupPinDirection+0x1bc>
    189c:	88 0f       	add	r24, r24
    189e:	99 1f       	adc	r25, r25
    18a0:	0a 94       	dec	r0
    18a2:	e2 f7       	brpl	.-8      	; 0x189c <GPIO_setupPinDirection+0x1b8>
    18a4:	80 95       	com	r24
    18a6:	84 23       	and	r24, r20
    18a8:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    18aa:	0f 90       	pop	r0
    18ac:	0f 90       	pop	r0
    18ae:	0f 90       	pop	r0
    18b0:	0f 90       	pop	r0
    18b2:	0f 90       	pop	r0
    18b4:	cf 91       	pop	r28
    18b6:	df 91       	pop	r29
    18b8:	08 95       	ret

000018ba <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    18ba:	df 93       	push	r29
    18bc:	cf 93       	push	r28
    18be:	00 d0       	rcall	.+0      	; 0x18c0 <GPIO_writePin+0x6>
    18c0:	00 d0       	rcall	.+0      	; 0x18c2 <GPIO_writePin+0x8>
    18c2:	0f 92       	push	r0
    18c4:	cd b7       	in	r28, 0x3d	; 61
    18c6:	de b7       	in	r29, 0x3e	; 62
    18c8:	89 83       	std	Y+1, r24	; 0x01
    18ca:	6a 83       	std	Y+2, r22	; 0x02
    18cc:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    18ce:	8a 81       	ldd	r24, Y+2	; 0x02
    18d0:	88 30       	cpi	r24, 0x08	; 8
    18d2:	08 f0       	brcs	.+2      	; 0x18d6 <GPIO_writePin+0x1c>
    18d4:	d5 c0       	rjmp	.+426    	; 0x1a80 <GPIO_writePin+0x1c6>
    18d6:	89 81       	ldd	r24, Y+1	; 0x01
    18d8:	84 30       	cpi	r24, 0x04	; 4
    18da:	08 f0       	brcs	.+2      	; 0x18de <GPIO_writePin+0x24>
    18dc:	d1 c0       	rjmp	.+418    	; 0x1a80 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    18de:	89 81       	ldd	r24, Y+1	; 0x01
    18e0:	28 2f       	mov	r18, r24
    18e2:	30 e0       	ldi	r19, 0x00	; 0
    18e4:	3d 83       	std	Y+5, r19	; 0x05
    18e6:	2c 83       	std	Y+4, r18	; 0x04
    18e8:	8c 81       	ldd	r24, Y+4	; 0x04
    18ea:	9d 81       	ldd	r25, Y+5	; 0x05
    18ec:	81 30       	cpi	r24, 0x01	; 1
    18ee:	91 05       	cpc	r25, r1
    18f0:	09 f4       	brne	.+2      	; 0x18f4 <GPIO_writePin+0x3a>
    18f2:	43 c0       	rjmp	.+134    	; 0x197a <GPIO_writePin+0xc0>
    18f4:	2c 81       	ldd	r18, Y+4	; 0x04
    18f6:	3d 81       	ldd	r19, Y+5	; 0x05
    18f8:	22 30       	cpi	r18, 0x02	; 2
    18fa:	31 05       	cpc	r19, r1
    18fc:	2c f4       	brge	.+10     	; 0x1908 <GPIO_writePin+0x4e>
    18fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1900:	9d 81       	ldd	r25, Y+5	; 0x05
    1902:	00 97       	sbiw	r24, 0x00	; 0
    1904:	71 f0       	breq	.+28     	; 0x1922 <GPIO_writePin+0x68>
    1906:	bc c0       	rjmp	.+376    	; 0x1a80 <GPIO_writePin+0x1c6>
    1908:	2c 81       	ldd	r18, Y+4	; 0x04
    190a:	3d 81       	ldd	r19, Y+5	; 0x05
    190c:	22 30       	cpi	r18, 0x02	; 2
    190e:	31 05       	cpc	r19, r1
    1910:	09 f4       	brne	.+2      	; 0x1914 <GPIO_writePin+0x5a>
    1912:	5f c0       	rjmp	.+190    	; 0x19d2 <GPIO_writePin+0x118>
    1914:	8c 81       	ldd	r24, Y+4	; 0x04
    1916:	9d 81       	ldd	r25, Y+5	; 0x05
    1918:	83 30       	cpi	r24, 0x03	; 3
    191a:	91 05       	cpc	r25, r1
    191c:	09 f4       	brne	.+2      	; 0x1920 <GPIO_writePin+0x66>
    191e:	85 c0       	rjmp	.+266    	; 0x1a2a <GPIO_writePin+0x170>
    1920:	af c0       	rjmp	.+350    	; 0x1a80 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1922:	8b 81       	ldd	r24, Y+3	; 0x03
    1924:	81 30       	cpi	r24, 0x01	; 1
    1926:	a1 f4       	brne	.+40     	; 0x1950 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1928:	ab e3       	ldi	r26, 0x3B	; 59
    192a:	b0 e0       	ldi	r27, 0x00	; 0
    192c:	eb e3       	ldi	r30, 0x3B	; 59
    192e:	f0 e0       	ldi	r31, 0x00	; 0
    1930:	80 81       	ld	r24, Z
    1932:	48 2f       	mov	r20, r24
    1934:	8a 81       	ldd	r24, Y+2	; 0x02
    1936:	28 2f       	mov	r18, r24
    1938:	30 e0       	ldi	r19, 0x00	; 0
    193a:	81 e0       	ldi	r24, 0x01	; 1
    193c:	90 e0       	ldi	r25, 0x00	; 0
    193e:	02 2e       	mov	r0, r18
    1940:	02 c0       	rjmp	.+4      	; 0x1946 <GPIO_writePin+0x8c>
    1942:	88 0f       	add	r24, r24
    1944:	99 1f       	adc	r25, r25
    1946:	0a 94       	dec	r0
    1948:	e2 f7       	brpl	.-8      	; 0x1942 <GPIO_writePin+0x88>
    194a:	84 2b       	or	r24, r20
    194c:	8c 93       	st	X, r24
    194e:	98 c0       	rjmp	.+304    	; 0x1a80 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1950:	ab e3       	ldi	r26, 0x3B	; 59
    1952:	b0 e0       	ldi	r27, 0x00	; 0
    1954:	eb e3       	ldi	r30, 0x3B	; 59
    1956:	f0 e0       	ldi	r31, 0x00	; 0
    1958:	80 81       	ld	r24, Z
    195a:	48 2f       	mov	r20, r24
    195c:	8a 81       	ldd	r24, Y+2	; 0x02
    195e:	28 2f       	mov	r18, r24
    1960:	30 e0       	ldi	r19, 0x00	; 0
    1962:	81 e0       	ldi	r24, 0x01	; 1
    1964:	90 e0       	ldi	r25, 0x00	; 0
    1966:	02 2e       	mov	r0, r18
    1968:	02 c0       	rjmp	.+4      	; 0x196e <GPIO_writePin+0xb4>
    196a:	88 0f       	add	r24, r24
    196c:	99 1f       	adc	r25, r25
    196e:	0a 94       	dec	r0
    1970:	e2 f7       	brpl	.-8      	; 0x196a <GPIO_writePin+0xb0>
    1972:	80 95       	com	r24
    1974:	84 23       	and	r24, r20
    1976:	8c 93       	st	X, r24
    1978:	83 c0       	rjmp	.+262    	; 0x1a80 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    197a:	8b 81       	ldd	r24, Y+3	; 0x03
    197c:	81 30       	cpi	r24, 0x01	; 1
    197e:	a1 f4       	brne	.+40     	; 0x19a8 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1980:	a8 e3       	ldi	r26, 0x38	; 56
    1982:	b0 e0       	ldi	r27, 0x00	; 0
    1984:	e8 e3       	ldi	r30, 0x38	; 56
    1986:	f0 e0       	ldi	r31, 0x00	; 0
    1988:	80 81       	ld	r24, Z
    198a:	48 2f       	mov	r20, r24
    198c:	8a 81       	ldd	r24, Y+2	; 0x02
    198e:	28 2f       	mov	r18, r24
    1990:	30 e0       	ldi	r19, 0x00	; 0
    1992:	81 e0       	ldi	r24, 0x01	; 1
    1994:	90 e0       	ldi	r25, 0x00	; 0
    1996:	02 2e       	mov	r0, r18
    1998:	02 c0       	rjmp	.+4      	; 0x199e <GPIO_writePin+0xe4>
    199a:	88 0f       	add	r24, r24
    199c:	99 1f       	adc	r25, r25
    199e:	0a 94       	dec	r0
    19a0:	e2 f7       	brpl	.-8      	; 0x199a <GPIO_writePin+0xe0>
    19a2:	84 2b       	or	r24, r20
    19a4:	8c 93       	st	X, r24
    19a6:	6c c0       	rjmp	.+216    	; 0x1a80 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    19a8:	a8 e3       	ldi	r26, 0x38	; 56
    19aa:	b0 e0       	ldi	r27, 0x00	; 0
    19ac:	e8 e3       	ldi	r30, 0x38	; 56
    19ae:	f0 e0       	ldi	r31, 0x00	; 0
    19b0:	80 81       	ld	r24, Z
    19b2:	48 2f       	mov	r20, r24
    19b4:	8a 81       	ldd	r24, Y+2	; 0x02
    19b6:	28 2f       	mov	r18, r24
    19b8:	30 e0       	ldi	r19, 0x00	; 0
    19ba:	81 e0       	ldi	r24, 0x01	; 1
    19bc:	90 e0       	ldi	r25, 0x00	; 0
    19be:	02 2e       	mov	r0, r18
    19c0:	02 c0       	rjmp	.+4      	; 0x19c6 <GPIO_writePin+0x10c>
    19c2:	88 0f       	add	r24, r24
    19c4:	99 1f       	adc	r25, r25
    19c6:	0a 94       	dec	r0
    19c8:	e2 f7       	brpl	.-8      	; 0x19c2 <GPIO_writePin+0x108>
    19ca:	80 95       	com	r24
    19cc:	84 23       	and	r24, r20
    19ce:	8c 93       	st	X, r24
    19d0:	57 c0       	rjmp	.+174    	; 0x1a80 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    19d2:	8b 81       	ldd	r24, Y+3	; 0x03
    19d4:	81 30       	cpi	r24, 0x01	; 1
    19d6:	a1 f4       	brne	.+40     	; 0x1a00 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    19d8:	a5 e3       	ldi	r26, 0x35	; 53
    19da:	b0 e0       	ldi	r27, 0x00	; 0
    19dc:	e5 e3       	ldi	r30, 0x35	; 53
    19de:	f0 e0       	ldi	r31, 0x00	; 0
    19e0:	80 81       	ld	r24, Z
    19e2:	48 2f       	mov	r20, r24
    19e4:	8a 81       	ldd	r24, Y+2	; 0x02
    19e6:	28 2f       	mov	r18, r24
    19e8:	30 e0       	ldi	r19, 0x00	; 0
    19ea:	81 e0       	ldi	r24, 0x01	; 1
    19ec:	90 e0       	ldi	r25, 0x00	; 0
    19ee:	02 2e       	mov	r0, r18
    19f0:	02 c0       	rjmp	.+4      	; 0x19f6 <GPIO_writePin+0x13c>
    19f2:	88 0f       	add	r24, r24
    19f4:	99 1f       	adc	r25, r25
    19f6:	0a 94       	dec	r0
    19f8:	e2 f7       	brpl	.-8      	; 0x19f2 <GPIO_writePin+0x138>
    19fa:	84 2b       	or	r24, r20
    19fc:	8c 93       	st	X, r24
    19fe:	40 c0       	rjmp	.+128    	; 0x1a80 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1a00:	a5 e3       	ldi	r26, 0x35	; 53
    1a02:	b0 e0       	ldi	r27, 0x00	; 0
    1a04:	e5 e3       	ldi	r30, 0x35	; 53
    1a06:	f0 e0       	ldi	r31, 0x00	; 0
    1a08:	80 81       	ld	r24, Z
    1a0a:	48 2f       	mov	r20, r24
    1a0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a0e:	28 2f       	mov	r18, r24
    1a10:	30 e0       	ldi	r19, 0x00	; 0
    1a12:	81 e0       	ldi	r24, 0x01	; 1
    1a14:	90 e0       	ldi	r25, 0x00	; 0
    1a16:	02 2e       	mov	r0, r18
    1a18:	02 c0       	rjmp	.+4      	; 0x1a1e <GPIO_writePin+0x164>
    1a1a:	88 0f       	add	r24, r24
    1a1c:	99 1f       	adc	r25, r25
    1a1e:	0a 94       	dec	r0
    1a20:	e2 f7       	brpl	.-8      	; 0x1a1a <GPIO_writePin+0x160>
    1a22:	80 95       	com	r24
    1a24:	84 23       	and	r24, r20
    1a26:	8c 93       	st	X, r24
    1a28:	2b c0       	rjmp	.+86     	; 0x1a80 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1a2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a2c:	81 30       	cpi	r24, 0x01	; 1
    1a2e:	a1 f4       	brne	.+40     	; 0x1a58 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1a30:	a2 e3       	ldi	r26, 0x32	; 50
    1a32:	b0 e0       	ldi	r27, 0x00	; 0
    1a34:	e2 e3       	ldi	r30, 0x32	; 50
    1a36:	f0 e0       	ldi	r31, 0x00	; 0
    1a38:	80 81       	ld	r24, Z
    1a3a:	48 2f       	mov	r20, r24
    1a3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a3e:	28 2f       	mov	r18, r24
    1a40:	30 e0       	ldi	r19, 0x00	; 0
    1a42:	81 e0       	ldi	r24, 0x01	; 1
    1a44:	90 e0       	ldi	r25, 0x00	; 0
    1a46:	02 2e       	mov	r0, r18
    1a48:	02 c0       	rjmp	.+4      	; 0x1a4e <GPIO_writePin+0x194>
    1a4a:	88 0f       	add	r24, r24
    1a4c:	99 1f       	adc	r25, r25
    1a4e:	0a 94       	dec	r0
    1a50:	e2 f7       	brpl	.-8      	; 0x1a4a <GPIO_writePin+0x190>
    1a52:	84 2b       	or	r24, r20
    1a54:	8c 93       	st	X, r24
    1a56:	14 c0       	rjmp	.+40     	; 0x1a80 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1a58:	a2 e3       	ldi	r26, 0x32	; 50
    1a5a:	b0 e0       	ldi	r27, 0x00	; 0
    1a5c:	e2 e3       	ldi	r30, 0x32	; 50
    1a5e:	f0 e0       	ldi	r31, 0x00	; 0
    1a60:	80 81       	ld	r24, Z
    1a62:	48 2f       	mov	r20, r24
    1a64:	8a 81       	ldd	r24, Y+2	; 0x02
    1a66:	28 2f       	mov	r18, r24
    1a68:	30 e0       	ldi	r19, 0x00	; 0
    1a6a:	81 e0       	ldi	r24, 0x01	; 1
    1a6c:	90 e0       	ldi	r25, 0x00	; 0
    1a6e:	02 2e       	mov	r0, r18
    1a70:	02 c0       	rjmp	.+4      	; 0x1a76 <GPIO_writePin+0x1bc>
    1a72:	88 0f       	add	r24, r24
    1a74:	99 1f       	adc	r25, r25
    1a76:	0a 94       	dec	r0
    1a78:	e2 f7       	brpl	.-8      	; 0x1a72 <GPIO_writePin+0x1b8>
    1a7a:	80 95       	com	r24
    1a7c:	84 23       	and	r24, r20
    1a7e:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1a80:	0f 90       	pop	r0
    1a82:	0f 90       	pop	r0
    1a84:	0f 90       	pop	r0
    1a86:	0f 90       	pop	r0
    1a88:	0f 90       	pop	r0
    1a8a:	cf 91       	pop	r28
    1a8c:	df 91       	pop	r29
    1a8e:	08 95       	ret

00001a90 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1a90:	df 93       	push	r29
    1a92:	cf 93       	push	r28
    1a94:	00 d0       	rcall	.+0      	; 0x1a96 <GPIO_readPin+0x6>
    1a96:	00 d0       	rcall	.+0      	; 0x1a98 <GPIO_readPin+0x8>
    1a98:	0f 92       	push	r0
    1a9a:	cd b7       	in	r28, 0x3d	; 61
    1a9c:	de b7       	in	r29, 0x3e	; 62
    1a9e:	8a 83       	std	Y+2, r24	; 0x02
    1aa0:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1aa2:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1aa4:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa6:	88 30       	cpi	r24, 0x08	; 8
    1aa8:	08 f0       	brcs	.+2      	; 0x1aac <GPIO_readPin+0x1c>
    1aaa:	84 c0       	rjmp	.+264    	; 0x1bb4 <GPIO_readPin+0x124>
    1aac:	8a 81       	ldd	r24, Y+2	; 0x02
    1aae:	84 30       	cpi	r24, 0x04	; 4
    1ab0:	08 f0       	brcs	.+2      	; 0x1ab4 <GPIO_readPin+0x24>
    1ab2:	80 c0       	rjmp	.+256    	; 0x1bb4 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1ab4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ab6:	28 2f       	mov	r18, r24
    1ab8:	30 e0       	ldi	r19, 0x00	; 0
    1aba:	3d 83       	std	Y+5, r19	; 0x05
    1abc:	2c 83       	std	Y+4, r18	; 0x04
    1abe:	4c 81       	ldd	r20, Y+4	; 0x04
    1ac0:	5d 81       	ldd	r21, Y+5	; 0x05
    1ac2:	41 30       	cpi	r20, 0x01	; 1
    1ac4:	51 05       	cpc	r21, r1
    1ac6:	79 f1       	breq	.+94     	; 0x1b26 <GPIO_readPin+0x96>
    1ac8:	8c 81       	ldd	r24, Y+4	; 0x04
    1aca:	9d 81       	ldd	r25, Y+5	; 0x05
    1acc:	82 30       	cpi	r24, 0x02	; 2
    1ace:	91 05       	cpc	r25, r1
    1ad0:	34 f4       	brge	.+12     	; 0x1ade <GPIO_readPin+0x4e>
    1ad2:	2c 81       	ldd	r18, Y+4	; 0x04
    1ad4:	3d 81       	ldd	r19, Y+5	; 0x05
    1ad6:	21 15       	cp	r18, r1
    1ad8:	31 05       	cpc	r19, r1
    1ada:	69 f0       	breq	.+26     	; 0x1af6 <GPIO_readPin+0x66>
    1adc:	6b c0       	rjmp	.+214    	; 0x1bb4 <GPIO_readPin+0x124>
    1ade:	4c 81       	ldd	r20, Y+4	; 0x04
    1ae0:	5d 81       	ldd	r21, Y+5	; 0x05
    1ae2:	42 30       	cpi	r20, 0x02	; 2
    1ae4:	51 05       	cpc	r21, r1
    1ae6:	b9 f1       	breq	.+110    	; 0x1b56 <GPIO_readPin+0xc6>
    1ae8:	8c 81       	ldd	r24, Y+4	; 0x04
    1aea:	9d 81       	ldd	r25, Y+5	; 0x05
    1aec:	83 30       	cpi	r24, 0x03	; 3
    1aee:	91 05       	cpc	r25, r1
    1af0:	09 f4       	brne	.+2      	; 0x1af4 <GPIO_readPin+0x64>
    1af2:	49 c0       	rjmp	.+146    	; 0x1b86 <GPIO_readPin+0xf6>
    1af4:	5f c0       	rjmp	.+190    	; 0x1bb4 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1af6:	e9 e3       	ldi	r30, 0x39	; 57
    1af8:	f0 e0       	ldi	r31, 0x00	; 0
    1afa:	80 81       	ld	r24, Z
    1afc:	28 2f       	mov	r18, r24
    1afe:	30 e0       	ldi	r19, 0x00	; 0
    1b00:	8b 81       	ldd	r24, Y+3	; 0x03
    1b02:	88 2f       	mov	r24, r24
    1b04:	90 e0       	ldi	r25, 0x00	; 0
    1b06:	a9 01       	movw	r20, r18
    1b08:	02 c0       	rjmp	.+4      	; 0x1b0e <GPIO_readPin+0x7e>
    1b0a:	55 95       	asr	r21
    1b0c:	47 95       	ror	r20
    1b0e:	8a 95       	dec	r24
    1b10:	e2 f7       	brpl	.-8      	; 0x1b0a <GPIO_readPin+0x7a>
    1b12:	ca 01       	movw	r24, r20
    1b14:	81 70       	andi	r24, 0x01	; 1
    1b16:	90 70       	andi	r25, 0x00	; 0
    1b18:	88 23       	and	r24, r24
    1b1a:	19 f0       	breq	.+6      	; 0x1b22 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1b1c:	81 e0       	ldi	r24, 0x01	; 1
    1b1e:	89 83       	std	Y+1, r24	; 0x01
    1b20:	49 c0       	rjmp	.+146    	; 0x1bb4 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1b22:	19 82       	std	Y+1, r1	; 0x01
    1b24:	47 c0       	rjmp	.+142    	; 0x1bb4 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1b26:	e6 e3       	ldi	r30, 0x36	; 54
    1b28:	f0 e0       	ldi	r31, 0x00	; 0
    1b2a:	80 81       	ld	r24, Z
    1b2c:	28 2f       	mov	r18, r24
    1b2e:	30 e0       	ldi	r19, 0x00	; 0
    1b30:	8b 81       	ldd	r24, Y+3	; 0x03
    1b32:	88 2f       	mov	r24, r24
    1b34:	90 e0       	ldi	r25, 0x00	; 0
    1b36:	a9 01       	movw	r20, r18
    1b38:	02 c0       	rjmp	.+4      	; 0x1b3e <GPIO_readPin+0xae>
    1b3a:	55 95       	asr	r21
    1b3c:	47 95       	ror	r20
    1b3e:	8a 95       	dec	r24
    1b40:	e2 f7       	brpl	.-8      	; 0x1b3a <GPIO_readPin+0xaa>
    1b42:	ca 01       	movw	r24, r20
    1b44:	81 70       	andi	r24, 0x01	; 1
    1b46:	90 70       	andi	r25, 0x00	; 0
    1b48:	88 23       	and	r24, r24
    1b4a:	19 f0       	breq	.+6      	; 0x1b52 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1b4c:	81 e0       	ldi	r24, 0x01	; 1
    1b4e:	89 83       	std	Y+1, r24	; 0x01
    1b50:	31 c0       	rjmp	.+98     	; 0x1bb4 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1b52:	19 82       	std	Y+1, r1	; 0x01
    1b54:	2f c0       	rjmp	.+94     	; 0x1bb4 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1b56:	e3 e3       	ldi	r30, 0x33	; 51
    1b58:	f0 e0       	ldi	r31, 0x00	; 0
    1b5a:	80 81       	ld	r24, Z
    1b5c:	28 2f       	mov	r18, r24
    1b5e:	30 e0       	ldi	r19, 0x00	; 0
    1b60:	8b 81       	ldd	r24, Y+3	; 0x03
    1b62:	88 2f       	mov	r24, r24
    1b64:	90 e0       	ldi	r25, 0x00	; 0
    1b66:	a9 01       	movw	r20, r18
    1b68:	02 c0       	rjmp	.+4      	; 0x1b6e <GPIO_readPin+0xde>
    1b6a:	55 95       	asr	r21
    1b6c:	47 95       	ror	r20
    1b6e:	8a 95       	dec	r24
    1b70:	e2 f7       	brpl	.-8      	; 0x1b6a <GPIO_readPin+0xda>
    1b72:	ca 01       	movw	r24, r20
    1b74:	81 70       	andi	r24, 0x01	; 1
    1b76:	90 70       	andi	r25, 0x00	; 0
    1b78:	88 23       	and	r24, r24
    1b7a:	19 f0       	breq	.+6      	; 0x1b82 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1b7c:	81 e0       	ldi	r24, 0x01	; 1
    1b7e:	89 83       	std	Y+1, r24	; 0x01
    1b80:	19 c0       	rjmp	.+50     	; 0x1bb4 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1b82:	19 82       	std	Y+1, r1	; 0x01
    1b84:	17 c0       	rjmp	.+46     	; 0x1bb4 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1b86:	e0 e3       	ldi	r30, 0x30	; 48
    1b88:	f0 e0       	ldi	r31, 0x00	; 0
    1b8a:	80 81       	ld	r24, Z
    1b8c:	28 2f       	mov	r18, r24
    1b8e:	30 e0       	ldi	r19, 0x00	; 0
    1b90:	8b 81       	ldd	r24, Y+3	; 0x03
    1b92:	88 2f       	mov	r24, r24
    1b94:	90 e0       	ldi	r25, 0x00	; 0
    1b96:	a9 01       	movw	r20, r18
    1b98:	02 c0       	rjmp	.+4      	; 0x1b9e <GPIO_readPin+0x10e>
    1b9a:	55 95       	asr	r21
    1b9c:	47 95       	ror	r20
    1b9e:	8a 95       	dec	r24
    1ba0:	e2 f7       	brpl	.-8      	; 0x1b9a <GPIO_readPin+0x10a>
    1ba2:	ca 01       	movw	r24, r20
    1ba4:	81 70       	andi	r24, 0x01	; 1
    1ba6:	90 70       	andi	r25, 0x00	; 0
    1ba8:	88 23       	and	r24, r24
    1baa:	19 f0       	breq	.+6      	; 0x1bb2 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1bac:	81 e0       	ldi	r24, 0x01	; 1
    1bae:	89 83       	std	Y+1, r24	; 0x01
    1bb0:	01 c0       	rjmp	.+2      	; 0x1bb4 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1bb2:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1bb4:	89 81       	ldd	r24, Y+1	; 0x01
}
    1bb6:	0f 90       	pop	r0
    1bb8:	0f 90       	pop	r0
    1bba:	0f 90       	pop	r0
    1bbc:	0f 90       	pop	r0
    1bbe:	0f 90       	pop	r0
    1bc0:	cf 91       	pop	r28
    1bc2:	df 91       	pop	r29
    1bc4:	08 95       	ret

00001bc6 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1bc6:	df 93       	push	r29
    1bc8:	cf 93       	push	r28
    1bca:	00 d0       	rcall	.+0      	; 0x1bcc <GPIO_setupPortDirection+0x6>
    1bcc:	00 d0       	rcall	.+0      	; 0x1bce <GPIO_setupPortDirection+0x8>
    1bce:	cd b7       	in	r28, 0x3d	; 61
    1bd0:	de b7       	in	r29, 0x3e	; 62
    1bd2:	89 83       	std	Y+1, r24	; 0x01
    1bd4:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1bd6:	89 81       	ldd	r24, Y+1	; 0x01
    1bd8:	84 30       	cpi	r24, 0x04	; 4
    1bda:	90 f5       	brcc	.+100    	; 0x1c40 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1bdc:	89 81       	ldd	r24, Y+1	; 0x01
    1bde:	28 2f       	mov	r18, r24
    1be0:	30 e0       	ldi	r19, 0x00	; 0
    1be2:	3c 83       	std	Y+4, r19	; 0x04
    1be4:	2b 83       	std	Y+3, r18	; 0x03
    1be6:	8b 81       	ldd	r24, Y+3	; 0x03
    1be8:	9c 81       	ldd	r25, Y+4	; 0x04
    1bea:	81 30       	cpi	r24, 0x01	; 1
    1bec:	91 05       	cpc	r25, r1
    1bee:	d1 f0       	breq	.+52     	; 0x1c24 <GPIO_setupPortDirection+0x5e>
    1bf0:	2b 81       	ldd	r18, Y+3	; 0x03
    1bf2:	3c 81       	ldd	r19, Y+4	; 0x04
    1bf4:	22 30       	cpi	r18, 0x02	; 2
    1bf6:	31 05       	cpc	r19, r1
    1bf8:	2c f4       	brge	.+10     	; 0x1c04 <GPIO_setupPortDirection+0x3e>
    1bfa:	8b 81       	ldd	r24, Y+3	; 0x03
    1bfc:	9c 81       	ldd	r25, Y+4	; 0x04
    1bfe:	00 97       	sbiw	r24, 0x00	; 0
    1c00:	61 f0       	breq	.+24     	; 0x1c1a <GPIO_setupPortDirection+0x54>
    1c02:	1e c0       	rjmp	.+60     	; 0x1c40 <GPIO_setupPortDirection+0x7a>
    1c04:	2b 81       	ldd	r18, Y+3	; 0x03
    1c06:	3c 81       	ldd	r19, Y+4	; 0x04
    1c08:	22 30       	cpi	r18, 0x02	; 2
    1c0a:	31 05       	cpc	r19, r1
    1c0c:	81 f0       	breq	.+32     	; 0x1c2e <GPIO_setupPortDirection+0x68>
    1c0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c10:	9c 81       	ldd	r25, Y+4	; 0x04
    1c12:	83 30       	cpi	r24, 0x03	; 3
    1c14:	91 05       	cpc	r25, r1
    1c16:	81 f0       	breq	.+32     	; 0x1c38 <GPIO_setupPortDirection+0x72>
    1c18:	13 c0       	rjmp	.+38     	; 0x1c40 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1c1a:	ea e3       	ldi	r30, 0x3A	; 58
    1c1c:	f0 e0       	ldi	r31, 0x00	; 0
    1c1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c20:	80 83       	st	Z, r24
    1c22:	0e c0       	rjmp	.+28     	; 0x1c40 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1c24:	e7 e3       	ldi	r30, 0x37	; 55
    1c26:	f0 e0       	ldi	r31, 0x00	; 0
    1c28:	8a 81       	ldd	r24, Y+2	; 0x02
    1c2a:	80 83       	st	Z, r24
    1c2c:	09 c0       	rjmp	.+18     	; 0x1c40 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1c2e:	e4 e3       	ldi	r30, 0x34	; 52
    1c30:	f0 e0       	ldi	r31, 0x00	; 0
    1c32:	8a 81       	ldd	r24, Y+2	; 0x02
    1c34:	80 83       	st	Z, r24
    1c36:	04 c0       	rjmp	.+8      	; 0x1c40 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1c38:	e1 e3       	ldi	r30, 0x31	; 49
    1c3a:	f0 e0       	ldi	r31, 0x00	; 0
    1c3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c3e:	80 83       	st	Z, r24
			break;
		}
	}
}
    1c40:	0f 90       	pop	r0
    1c42:	0f 90       	pop	r0
    1c44:	0f 90       	pop	r0
    1c46:	0f 90       	pop	r0
    1c48:	cf 91       	pop	r28
    1c4a:	df 91       	pop	r29
    1c4c:	08 95       	ret

00001c4e <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1c4e:	df 93       	push	r29
    1c50:	cf 93       	push	r28
    1c52:	00 d0       	rcall	.+0      	; 0x1c54 <GPIO_writePort+0x6>
    1c54:	00 d0       	rcall	.+0      	; 0x1c56 <GPIO_writePort+0x8>
    1c56:	cd b7       	in	r28, 0x3d	; 61
    1c58:	de b7       	in	r29, 0x3e	; 62
    1c5a:	89 83       	std	Y+1, r24	; 0x01
    1c5c:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1c5e:	89 81       	ldd	r24, Y+1	; 0x01
    1c60:	84 30       	cpi	r24, 0x04	; 4
    1c62:	90 f5       	brcc	.+100    	; 0x1cc8 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1c64:	89 81       	ldd	r24, Y+1	; 0x01
    1c66:	28 2f       	mov	r18, r24
    1c68:	30 e0       	ldi	r19, 0x00	; 0
    1c6a:	3c 83       	std	Y+4, r19	; 0x04
    1c6c:	2b 83       	std	Y+3, r18	; 0x03
    1c6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c70:	9c 81       	ldd	r25, Y+4	; 0x04
    1c72:	81 30       	cpi	r24, 0x01	; 1
    1c74:	91 05       	cpc	r25, r1
    1c76:	d1 f0       	breq	.+52     	; 0x1cac <GPIO_writePort+0x5e>
    1c78:	2b 81       	ldd	r18, Y+3	; 0x03
    1c7a:	3c 81       	ldd	r19, Y+4	; 0x04
    1c7c:	22 30       	cpi	r18, 0x02	; 2
    1c7e:	31 05       	cpc	r19, r1
    1c80:	2c f4       	brge	.+10     	; 0x1c8c <GPIO_writePort+0x3e>
    1c82:	8b 81       	ldd	r24, Y+3	; 0x03
    1c84:	9c 81       	ldd	r25, Y+4	; 0x04
    1c86:	00 97       	sbiw	r24, 0x00	; 0
    1c88:	61 f0       	breq	.+24     	; 0x1ca2 <GPIO_writePort+0x54>
    1c8a:	1e c0       	rjmp	.+60     	; 0x1cc8 <GPIO_writePort+0x7a>
    1c8c:	2b 81       	ldd	r18, Y+3	; 0x03
    1c8e:	3c 81       	ldd	r19, Y+4	; 0x04
    1c90:	22 30       	cpi	r18, 0x02	; 2
    1c92:	31 05       	cpc	r19, r1
    1c94:	81 f0       	breq	.+32     	; 0x1cb6 <GPIO_writePort+0x68>
    1c96:	8b 81       	ldd	r24, Y+3	; 0x03
    1c98:	9c 81       	ldd	r25, Y+4	; 0x04
    1c9a:	83 30       	cpi	r24, 0x03	; 3
    1c9c:	91 05       	cpc	r25, r1
    1c9e:	81 f0       	breq	.+32     	; 0x1cc0 <GPIO_writePort+0x72>
    1ca0:	13 c0       	rjmp	.+38     	; 0x1cc8 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1ca2:	eb e3       	ldi	r30, 0x3B	; 59
    1ca4:	f0 e0       	ldi	r31, 0x00	; 0
    1ca6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ca8:	80 83       	st	Z, r24
    1caa:	0e c0       	rjmp	.+28     	; 0x1cc8 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1cac:	e8 e3       	ldi	r30, 0x38	; 56
    1cae:	f0 e0       	ldi	r31, 0x00	; 0
    1cb0:	8a 81       	ldd	r24, Y+2	; 0x02
    1cb2:	80 83       	st	Z, r24
    1cb4:	09 c0       	rjmp	.+18     	; 0x1cc8 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1cb6:	e5 e3       	ldi	r30, 0x35	; 53
    1cb8:	f0 e0       	ldi	r31, 0x00	; 0
    1cba:	8a 81       	ldd	r24, Y+2	; 0x02
    1cbc:	80 83       	st	Z, r24
    1cbe:	04 c0       	rjmp	.+8      	; 0x1cc8 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1cc0:	e2 e3       	ldi	r30, 0x32	; 50
    1cc2:	f0 e0       	ldi	r31, 0x00	; 0
    1cc4:	8a 81       	ldd	r24, Y+2	; 0x02
    1cc6:	80 83       	st	Z, r24
			break;
		}
	}
}
    1cc8:	0f 90       	pop	r0
    1cca:	0f 90       	pop	r0
    1ccc:	0f 90       	pop	r0
    1cce:	0f 90       	pop	r0
    1cd0:	cf 91       	pop	r28
    1cd2:	df 91       	pop	r29
    1cd4:	08 95       	ret

00001cd6 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1cd6:	df 93       	push	r29
    1cd8:	cf 93       	push	r28
    1cda:	00 d0       	rcall	.+0      	; 0x1cdc <GPIO_readPort+0x6>
    1cdc:	00 d0       	rcall	.+0      	; 0x1cde <GPIO_readPort+0x8>
    1cde:	cd b7       	in	r28, 0x3d	; 61
    1ce0:	de b7       	in	r29, 0x3e	; 62
    1ce2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1ce4:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1ce6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ce8:	84 30       	cpi	r24, 0x04	; 4
    1cea:	90 f5       	brcc	.+100    	; 0x1d50 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1cec:	8a 81       	ldd	r24, Y+2	; 0x02
    1cee:	28 2f       	mov	r18, r24
    1cf0:	30 e0       	ldi	r19, 0x00	; 0
    1cf2:	3c 83       	std	Y+4, r19	; 0x04
    1cf4:	2b 83       	std	Y+3, r18	; 0x03
    1cf6:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf8:	9c 81       	ldd	r25, Y+4	; 0x04
    1cfa:	81 30       	cpi	r24, 0x01	; 1
    1cfc:	91 05       	cpc	r25, r1
    1cfe:	d1 f0       	breq	.+52     	; 0x1d34 <GPIO_readPort+0x5e>
    1d00:	2b 81       	ldd	r18, Y+3	; 0x03
    1d02:	3c 81       	ldd	r19, Y+4	; 0x04
    1d04:	22 30       	cpi	r18, 0x02	; 2
    1d06:	31 05       	cpc	r19, r1
    1d08:	2c f4       	brge	.+10     	; 0x1d14 <GPIO_readPort+0x3e>
    1d0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d0c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d0e:	00 97       	sbiw	r24, 0x00	; 0
    1d10:	61 f0       	breq	.+24     	; 0x1d2a <GPIO_readPort+0x54>
    1d12:	1e c0       	rjmp	.+60     	; 0x1d50 <GPIO_readPort+0x7a>
    1d14:	2b 81       	ldd	r18, Y+3	; 0x03
    1d16:	3c 81       	ldd	r19, Y+4	; 0x04
    1d18:	22 30       	cpi	r18, 0x02	; 2
    1d1a:	31 05       	cpc	r19, r1
    1d1c:	81 f0       	breq	.+32     	; 0x1d3e <GPIO_readPort+0x68>
    1d1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d20:	9c 81       	ldd	r25, Y+4	; 0x04
    1d22:	83 30       	cpi	r24, 0x03	; 3
    1d24:	91 05       	cpc	r25, r1
    1d26:	81 f0       	breq	.+32     	; 0x1d48 <GPIO_readPort+0x72>
    1d28:	13 c0       	rjmp	.+38     	; 0x1d50 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1d2a:	e9 e3       	ldi	r30, 0x39	; 57
    1d2c:	f0 e0       	ldi	r31, 0x00	; 0
    1d2e:	80 81       	ld	r24, Z
    1d30:	89 83       	std	Y+1, r24	; 0x01
    1d32:	0e c0       	rjmp	.+28     	; 0x1d50 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1d34:	e6 e3       	ldi	r30, 0x36	; 54
    1d36:	f0 e0       	ldi	r31, 0x00	; 0
    1d38:	80 81       	ld	r24, Z
    1d3a:	89 83       	std	Y+1, r24	; 0x01
    1d3c:	09 c0       	rjmp	.+18     	; 0x1d50 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1d3e:	e3 e3       	ldi	r30, 0x33	; 51
    1d40:	f0 e0       	ldi	r31, 0x00	; 0
    1d42:	80 81       	ld	r24, Z
    1d44:	89 83       	std	Y+1, r24	; 0x01
    1d46:	04 c0       	rjmp	.+8      	; 0x1d50 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1d48:	e0 e3       	ldi	r30, 0x30	; 48
    1d4a:	f0 e0       	ldi	r31, 0x00	; 0
    1d4c:	80 81       	ld	r24, Z
    1d4e:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1d50:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d52:	0f 90       	pop	r0
    1d54:	0f 90       	pop	r0
    1d56:	0f 90       	pop	r0
    1d58:	0f 90       	pop	r0
    1d5a:	cf 91       	pop	r28
    1d5c:	df 91       	pop	r29
    1d5e:	08 95       	ret

00001d60 <DC_Motor_init>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void DC_Motor_init(void)
{
    1d60:	df 93       	push	r29
    1d62:	cf 93       	push	r28
    1d64:	cd b7       	in	r28, 0x3d	; 61
    1d66:	de b7       	in	r29, 0x3e	; 62
    // Sets the direction of the motor control pins as output pins
    GPIO_setupPinDirection(MOTOR_PORT_ID, MOTOR_E_PIN_ID, PIN_OUTPUT);
    1d68:	81 e0       	ldi	r24, 0x01	; 1
    1d6a:	60 e0       	ldi	r22, 0x00	; 0
    1d6c:	41 e0       	ldi	r20, 0x01	; 1
    1d6e:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <GPIO_setupPinDirection>
    GPIO_setupPinDirection(MOTOR_PORT_ID, MOTOR_FIRST_PIN_ID, PIN_OUTPUT);
    1d72:	81 e0       	ldi	r24, 0x01	; 1
    1d74:	62 e0       	ldi	r22, 0x02	; 2
    1d76:	41 e0       	ldi	r20, 0x01	; 1
    1d78:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <GPIO_setupPinDirection>
    GPIO_setupPinDirection(MOTOR_PORT_ID, MOTOR_SECOND_PIN_ID, PIN_OUTPUT);
    1d7c:	81 e0       	ldi	r24, 0x01	; 1
    1d7e:	61 e0       	ldi	r22, 0x01	; 1
    1d80:	41 e0       	ldi	r20, 0x01	; 1
    1d82:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <GPIO_setupPinDirection>

    GPIO_writePin(MOTOR_PORT_ID, MOTOR_E_PIN_ID, LOGIC_HIGH);
    1d86:	81 e0       	ldi	r24, 0x01	; 1
    1d88:	60 e0       	ldi	r22, 0x00	; 0
    1d8a:	41 e0       	ldi	r20, 0x01	; 1
    1d8c:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <GPIO_writePin>
}
    1d90:	cf 91       	pop	r28
    1d92:	df 91       	pop	r29
    1d94:	08 95       	ret

00001d96 <DcMotor_Rotate>:

void DcMotor_Rotate(DCMotor_State state, uint8 speed)
{
    1d96:	df 93       	push	r29
    1d98:	cf 93       	push	r28
    1d9a:	00 d0       	rcall	.+0      	; 0x1d9c <DcMotor_Rotate+0x6>
    1d9c:	00 d0       	rcall	.+0      	; 0x1d9e <DcMotor_Rotate+0x8>
    1d9e:	cd b7       	in	r28, 0x3d	; 61
    1da0:	de b7       	in	r29, 0x3e	; 62
    1da2:	89 83       	std	Y+1, r24	; 0x01
    1da4:	6a 83       	std	Y+2, r22	; 0x02
	switch(state)
    1da6:	89 81       	ldd	r24, Y+1	; 0x01
    1da8:	28 2f       	mov	r18, r24
    1daa:	30 e0       	ldi	r19, 0x00	; 0
    1dac:	3c 83       	std	Y+4, r19	; 0x04
    1dae:	2b 83       	std	Y+3, r18	; 0x03
    1db0:	8b 81       	ldd	r24, Y+3	; 0x03
    1db2:	9c 81       	ldd	r25, Y+4	; 0x04
    1db4:	81 30       	cpi	r24, 0x01	; 1
    1db6:	91 05       	cpc	r25, r1
    1db8:	a1 f0       	breq	.+40     	; 0x1de2 <DcMotor_Rotate+0x4c>
    1dba:	2b 81       	ldd	r18, Y+3	; 0x03
    1dbc:	3c 81       	ldd	r19, Y+4	; 0x04
    1dbe:	22 30       	cpi	r18, 0x02	; 2
    1dc0:	31 05       	cpc	r19, r1
    1dc2:	d1 f0       	breq	.+52     	; 0x1df8 <DcMotor_Rotate+0x62>
    1dc4:	8b 81       	ldd	r24, Y+3	; 0x03
    1dc6:	9c 81       	ldd	r25, Y+4	; 0x04
    1dc8:	00 97       	sbiw	r24, 0x00	; 0
    1dca:	01 f5       	brne	.+64     	; 0x1e0c <DcMotor_Rotate+0x76>
    {
        case MOTOR_STOP:
            // Stops the motor by setting both control pins low
            GPIO_writePin(MOTOR_PORT_ID, MOTOR_FIRST_PIN_ID, LOGIC_LOW);
    1dcc:	81 e0       	ldi	r24, 0x01	; 1
    1dce:	62 e0       	ldi	r22, 0x02	; 2
    1dd0:	40 e0       	ldi	r20, 0x00	; 0
    1dd2:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <GPIO_writePin>
            GPIO_writePin(MOTOR_PORT_ID, MOTOR_SECOND_PIN_ID, LOGIC_LOW);
    1dd6:	81 e0       	ldi	r24, 0x01	; 1
    1dd8:	61 e0       	ldi	r22, 0x01	; 1
    1dda:	40 e0       	ldi	r20, 0x00	; 0
    1ddc:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <GPIO_writePin>
    1de0:	15 c0       	rjmp	.+42     	; 0x1e0c <DcMotor_Rotate+0x76>
            break;
        case MOTOR_CW:
            // Rotates the motor in the clockwise direction
            // by setting the first control pin low and the second control pin high
            GPIO_writePin(MOTOR_PORT_ID, MOTOR_FIRST_PIN_ID, LOGIC_LOW);
    1de2:	81 e0       	ldi	r24, 0x01	; 1
    1de4:	62 e0       	ldi	r22, 0x02	; 2
    1de6:	40 e0       	ldi	r20, 0x00	; 0
    1de8:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <GPIO_writePin>
            GPIO_writePin(MOTOR_PORT_ID, MOTOR_SECOND_PIN_ID, LOGIC_HIGH);
    1dec:	81 e0       	ldi	r24, 0x01	; 1
    1dee:	61 e0       	ldi	r22, 0x01	; 1
    1df0:	41 e0       	ldi	r20, 0x01	; 1
    1df2:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <GPIO_writePin>
    1df6:	0a c0       	rjmp	.+20     	; 0x1e0c <DcMotor_Rotate+0x76>
            break;
        case MOTOR_ACW:
            // Rotates the motor in the anti-clockwise direction
            // by setting the first control pin high and the second control pin low
            GPIO_writePin(MOTOR_PORT_ID, MOTOR_FIRST_PIN_ID, LOGIC_HIGH);
    1df8:	81 e0       	ldi	r24, 0x01	; 1
    1dfa:	62 e0       	ldi	r22, 0x02	; 2
    1dfc:	41 e0       	ldi	r20, 0x01	; 1
    1dfe:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <GPIO_writePin>
            GPIO_writePin(MOTOR_PORT_ID, MOTOR_SECOND_PIN_ID, LOGIC_LOW);
    1e02:	81 e0       	ldi	r24, 0x01	; 1
    1e04:	61 e0       	ldi	r22, 0x01	; 1
    1e06:	40 e0       	ldi	r20, 0x00	; 0
    1e08:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <GPIO_writePin>
            break;
    }

	PWM_Timer0_Start(speed);
    1e0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e0e:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <PWM_Timer0_Start>
}
    1e12:	0f 90       	pop	r0
    1e14:	0f 90       	pop	r0
    1e16:	0f 90       	pop	r0
    1e18:	0f 90       	pop	r0
    1e1a:	cf 91       	pop	r28
    1e1c:	df 91       	pop	r29
    1e1e:	08 95       	ret

00001e20 <PWM_Timer0_Start>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void PWM_Timer0_Start(uint8 duty_cycle) {
    1e20:	0f 93       	push	r16
    1e22:	1f 93       	push	r17
    1e24:	df 93       	push	r29
    1e26:	cf 93       	push	r28
    1e28:	00 d0       	rcall	.+0      	; 0x1e2a <PWM_Timer0_Start+0xa>
    1e2a:	0f 92       	push	r0
    1e2c:	cd b7       	in	r28, 0x3d	; 61
    1e2e:	de b7       	in	r29, 0x3e	; 62
    1e30:	8b 83       	std	Y+3, r24	; 0x03

	/* Set Timer Initial Value to 0 */
	TCNT0 = 0;
    1e32:	e2 e5       	ldi	r30, 0x52	; 82
    1e34:	f0 e0       	ldi	r31, 0x00	; 0
    1e36:	10 82       	st	Z, r1
	/* Set Compare Value */
    uint16 compareValue = (duty_cycle * 255) / 100;
    1e38:	8b 81       	ldd	r24, Y+3	; 0x03
    1e3a:	48 2f       	mov	r20, r24
    1e3c:	50 e0       	ldi	r21, 0x00	; 0
    1e3e:	ca 01       	movw	r24, r20
    1e40:	9c 01       	movw	r18, r24
    1e42:	22 0f       	add	r18, r18
    1e44:	33 1f       	adc	r19, r19
    1e46:	c9 01       	movw	r24, r18
    1e48:	96 95       	lsr	r25
    1e4a:	98 2f       	mov	r25, r24
    1e4c:	88 27       	eor	r24, r24
    1e4e:	97 95       	ror	r25
    1e50:	87 95       	ror	r24
    1e52:	82 1b       	sub	r24, r18
    1e54:	93 0b       	sbc	r25, r19
    1e56:	84 0f       	add	r24, r20
    1e58:	95 1f       	adc	r25, r21
    1e5a:	24 e6       	ldi	r18, 0x64	; 100
    1e5c:	30 e0       	ldi	r19, 0x00	; 0
    1e5e:	b9 01       	movw	r22, r18
    1e60:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <__divmodhi4>
    1e64:	cb 01       	movw	r24, r22
    1e66:	9a 83       	std	Y+2, r25	; 0x02
    1e68:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = round(compareValue);
    1e6a:	0c e5       	ldi	r16, 0x5C	; 92
    1e6c:	10 e0       	ldi	r17, 0x00	; 0
    1e6e:	89 81       	ldd	r24, Y+1	; 0x01
    1e70:	9a 81       	ldd	r25, Y+2	; 0x02
    1e72:	cc 01       	movw	r24, r24
    1e74:	a0 e0       	ldi	r26, 0x00	; 0
    1e76:	b0 e0       	ldi	r27, 0x00	; 0
    1e78:	bc 01       	movw	r22, r24
    1e7a:	cd 01       	movw	r24, r26
    1e7c:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    1e80:	dc 01       	movw	r26, r24
    1e82:	cb 01       	movw	r24, r22
    1e84:	bc 01       	movw	r22, r24
    1e86:	cd 01       	movw	r24, r26
    1e88:	0e 94 74 11 	call	0x22e8	; 0x22e8 <round>
    1e8c:	dc 01       	movw	r26, r24
    1e8e:	cb 01       	movw	r24, r22
    1e90:	bc 01       	movw	r22, r24
    1e92:	cd 01       	movw	r24, r26
    1e94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e98:	dc 01       	movw	r26, r24
    1e9a:	cb 01       	movw	r24, r22
    1e9c:	f8 01       	movw	r30, r16
    1e9e:	80 83       	st	Z, r24
	/* Set Pwm Pin Direction as output */
    GPIO_setupPinDirection(PWM_OC0_PORT_ID, PWM_OC0_PIN_ID, PIN_OUTPUT);
    1ea0:	81 e0       	ldi	r24, 0x01	; 1
    1ea2:	63 e0       	ldi	r22, 0x03	; 3
    1ea4:	41 e0       	ldi	r20, 0x01	; 1
    1ea6:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <GPIO_setupPinDirection>
	 * 1. Fast PWM mode FOC0=0
	 * 2. Fast PWM Mode WGM01=1 & WGM00=1
	 * 3. Clear OC0 when match occurs (non inverted mode) COM00=0 & COM01=1
	 * 4. clock = F_CPU/8 CS00=0 CS01=1 CS02=0
	 */
	TCCR0 = (1 << WGM00) | (1 << WGM01) | (1 << COM01) | (1 << CS01);
    1eaa:	e3 e5       	ldi	r30, 0x53	; 83
    1eac:	f0 e0       	ldi	r31, 0x00	; 0
    1eae:	8a e6       	ldi	r24, 0x6A	; 106
    1eb0:	80 83       	st	Z, r24
}
    1eb2:	0f 90       	pop	r0
    1eb4:	0f 90       	pop	r0
    1eb6:	0f 90       	pop	r0
    1eb8:	cf 91       	pop	r28
    1eba:	df 91       	pop	r29
    1ebc:	1f 91       	pop	r17
    1ebe:	0f 91       	pop	r16
    1ec0:	08 95       	ret

00001ec2 <__vector_7>:
/*******************************************************************************
 *                      	Functions Definitions                              *
 *******************************************************************************/
/* Timer 1 Compare Mode Interrupt ISR */
ISR(TIMER1_COMPA_vect)
{
    1ec2:	1f 92       	push	r1
    1ec4:	0f 92       	push	r0
    1ec6:	0f b6       	in	r0, 0x3f	; 63
    1ec8:	0f 92       	push	r0
    1eca:	11 24       	eor	r1, r1
    1ecc:	2f 93       	push	r18
    1ece:	3f 93       	push	r19
    1ed0:	4f 93       	push	r20
    1ed2:	5f 93       	push	r21
    1ed4:	6f 93       	push	r22
    1ed6:	7f 93       	push	r23
    1ed8:	8f 93       	push	r24
    1eda:	9f 93       	push	r25
    1edc:	af 93       	push	r26
    1ede:	bf 93       	push	r27
    1ee0:	ef 93       	push	r30
    1ee2:	ff 93       	push	r31
    1ee4:	df 93       	push	r29
    1ee6:	cf 93       	push	r28
    1ee8:	cd b7       	in	r28, 0x3d	; 61
    1eea:	de b7       	in	r29, 0x3e	; 62
	/*Increment the ticks of the program*/
	if(g_callBackPtr != NULL_PTR){
    1eec:	80 91 77 01 	lds	r24, 0x0177
    1ef0:	90 91 78 01 	lds	r25, 0x0178
    1ef4:	00 97       	sbiw	r24, 0x00	; 0
    1ef6:	29 f0       	breq	.+10     	; 0x1f02 <__vector_7+0x40>
		(*g_callBackPtr)();
    1ef8:	e0 91 77 01 	lds	r30, 0x0177
    1efc:	f0 91 78 01 	lds	r31, 0x0178
    1f00:	09 95       	icall
	}
}
    1f02:	cf 91       	pop	r28
    1f04:	df 91       	pop	r29
    1f06:	ff 91       	pop	r31
    1f08:	ef 91       	pop	r30
    1f0a:	bf 91       	pop	r27
    1f0c:	af 91       	pop	r26
    1f0e:	9f 91       	pop	r25
    1f10:	8f 91       	pop	r24
    1f12:	7f 91       	pop	r23
    1f14:	6f 91       	pop	r22
    1f16:	5f 91       	pop	r21
    1f18:	4f 91       	pop	r20
    1f1a:	3f 91       	pop	r19
    1f1c:	2f 91       	pop	r18
    1f1e:	0f 90       	pop	r0
    1f20:	0f be       	out	0x3f, r0	; 63
    1f22:	0f 90       	pop	r0
    1f24:	1f 90       	pop	r1
    1f26:	18 95       	reti

00001f28 <__vector_9>:


/* Timer 1 Normal Mode Interrupt ISR */
ISR(TIMER1_OVF_vect)
{
    1f28:	1f 92       	push	r1
    1f2a:	0f 92       	push	r0
    1f2c:	0f b6       	in	r0, 0x3f	; 63
    1f2e:	0f 92       	push	r0
    1f30:	11 24       	eor	r1, r1
    1f32:	2f 93       	push	r18
    1f34:	3f 93       	push	r19
    1f36:	4f 93       	push	r20
    1f38:	5f 93       	push	r21
    1f3a:	6f 93       	push	r22
    1f3c:	7f 93       	push	r23
    1f3e:	8f 93       	push	r24
    1f40:	9f 93       	push	r25
    1f42:	af 93       	push	r26
    1f44:	bf 93       	push	r27
    1f46:	ef 93       	push	r30
    1f48:	ff 93       	push	r31
    1f4a:	df 93       	push	r29
    1f4c:	cf 93       	push	r28
    1f4e:	cd b7       	in	r28, 0x3d	; 61
    1f50:	de b7       	in	r29, 0x3e	; 62

	/*Increment the ticks of the program*/
	(*g_callBackPtr)();
    1f52:	e0 91 77 01 	lds	r30, 0x0177
    1f56:	f0 91 78 01 	lds	r31, 0x0178
    1f5a:	09 95       	icall

}
    1f5c:	cf 91       	pop	r28
    1f5e:	df 91       	pop	r29
    1f60:	ff 91       	pop	r31
    1f62:	ef 91       	pop	r30
    1f64:	bf 91       	pop	r27
    1f66:	af 91       	pop	r26
    1f68:	9f 91       	pop	r25
    1f6a:	8f 91       	pop	r24
    1f6c:	7f 91       	pop	r23
    1f6e:	6f 91       	pop	r22
    1f70:	5f 91       	pop	r21
    1f72:	4f 91       	pop	r20
    1f74:	3f 91       	pop	r19
    1f76:	2f 91       	pop	r18
    1f78:	0f 90       	pop	r0
    1f7a:	0f be       	out	0x3f, r0	; 63
    1f7c:	0f 90       	pop	r0
    1f7e:	1f 90       	pop	r1
    1f80:	18 95       	reti

00001f82 <Timer1_init>:
void Timer1_init(const Timer1_ConfigType * Config_Ptr)
{
    1f82:	df 93       	push	r29
    1f84:	cf 93       	push	r28
    1f86:	00 d0       	rcall	.+0      	; 0x1f88 <Timer1_init+0x6>
    1f88:	cd b7       	in	r28, 0x3d	; 61
    1f8a:	de b7       	in	r29, 0x3e	; 62
    1f8c:	9a 83       	std	Y+2, r25	; 0x02
    1f8e:	89 83       	std	Y+1, r24	; 0x01
	TCCR1A = 0; // Normal mode
    1f90:	ef e4       	ldi	r30, 0x4F	; 79
    1f92:	f0 e0       	ldi	r31, 0x00	; 0
    1f94:	10 82       	st	Z, r1
	TCCR1B = 0; // Stop the timer
    1f96:	ee e4       	ldi	r30, 0x4E	; 78
    1f98:	f0 e0       	ldi	r31, 0x00	; 0
    1f9a:	10 82       	st	Z, r1
	TCNT1 = Config_Ptr->initial_value;	/* Set timer1 initial value */
    1f9c:	ac e4       	ldi	r26, 0x4C	; 76
    1f9e:	b0 e0       	ldi	r27, 0x00	; 0
    1fa0:	e9 81       	ldd	r30, Y+1	; 0x01
    1fa2:	fa 81       	ldd	r31, Y+2	; 0x02
    1fa4:	80 81       	ld	r24, Z
    1fa6:	91 81       	ldd	r25, Z+1	; 0x01
    1fa8:	11 96       	adiw	r26, 0x01	; 1
    1faa:	9c 93       	st	X, r25
    1fac:	8e 93       	st	-X, r24
	OCR1A = Config_Ptr->compare_value;	/* Set timer1 compare value */
    1fae:	aa e4       	ldi	r26, 0x4A	; 74
    1fb0:	b0 e0       	ldi	r27, 0x00	; 0
    1fb2:	e9 81       	ldd	r30, Y+1	; 0x01
    1fb4:	fa 81       	ldd	r31, Y+2	; 0x02
    1fb6:	82 81       	ldd	r24, Z+2	; 0x02
    1fb8:	93 81       	ldd	r25, Z+3	; 0x03
    1fba:	11 96       	adiw	r26, 0x01	; 1
    1fbc:	9c 93       	st	X, r25
    1fbe:	8e 93       	st	-X, r24
	TIMSK |= (1<<OCIE1A); /* Enable Timer1 Compare A Interrupt */
    1fc0:	a9 e5       	ldi	r26, 0x59	; 89
    1fc2:	b0 e0       	ldi	r27, 0x00	; 0
    1fc4:	e9 e5       	ldi	r30, 0x59	; 89
    1fc6:	f0 e0       	ldi	r31, 0x00	; 0
    1fc8:	80 81       	ld	r24, Z
    1fca:	80 61       	ori	r24, 0x10	; 16
    1fcc:	8c 93       	st	X, r24
	TCCR1B |= ((TCCR1B & 0xF8) | (Config_Ptr->prescaler & 0x07));
    1fce:	ae e4       	ldi	r26, 0x4E	; 78
    1fd0:	b0 e0       	ldi	r27, 0x00	; 0
    1fd2:	ee e4       	ldi	r30, 0x4E	; 78
    1fd4:	f0 e0       	ldi	r31, 0x00	; 0
    1fd6:	80 81       	ld	r24, Z
    1fd8:	28 2f       	mov	r18, r24
    1fda:	ee e4       	ldi	r30, 0x4E	; 78
    1fdc:	f0 e0       	ldi	r31, 0x00	; 0
    1fde:	80 81       	ld	r24, Z
    1fe0:	98 2f       	mov	r25, r24
    1fe2:	98 7f       	andi	r25, 0xF8	; 248
    1fe4:	e9 81       	ldd	r30, Y+1	; 0x01
    1fe6:	fa 81       	ldd	r31, Y+2	; 0x02
    1fe8:	84 81       	ldd	r24, Z+4	; 0x04
    1fea:	87 70       	andi	r24, 0x07	; 7
    1fec:	89 2b       	or	r24, r25
    1fee:	82 2b       	or	r24, r18
    1ff0:	8c 93       	st	X, r24

	if(Config_Ptr->mode == NORMAL_MODE)
    1ff2:	e9 81       	ldd	r30, Y+1	; 0x01
    1ff4:	fa 81       	ldd	r31, Y+2	; 0x02
    1ff6:	85 81       	ldd	r24, Z+5	; 0x05
    1ff8:	88 23       	and	r24, r24
    1ffa:	41 f4       	brne	.+16     	; 0x200c <Timer1_init+0x8a>
	{
		/* Configure timer1 control registers TCCR1A & TCCR1B
		 * 1. Normal Mode (Mode Number 0)
		*/
		TCCR1B &= ~(1 << WGM13) & ~(1 << WGM12);
    1ffc:	ae e4       	ldi	r26, 0x4E	; 78
    1ffe:	b0 e0       	ldi	r27, 0x00	; 0
    2000:	ee e4       	ldi	r30, 0x4E	; 78
    2002:	f0 e0       	ldi	r31, 0x00	; 0
    2004:	80 81       	ld	r24, Z
    2006:	87 7e       	andi	r24, 0xE7	; 231
    2008:	8c 93       	st	X, r24
    200a:	34 c0       	rjmp	.+104    	; 0x2074 <Timer1_init+0xf2>
	}
	else if (Config_Ptr->mode == PWM_MODE)
    200c:	e9 81       	ldd	r30, Y+1	; 0x01
    200e:	fa 81       	ldd	r31, Y+2	; 0x02
    2010:	85 81       	ldd	r24, Z+5	; 0x05
    2012:	81 30       	cpi	r24, 0x01	; 1
    2014:	79 f4       	brne	.+30     	; 0x2034 <Timer1_init+0xb2>
	{
		/* Configure timer1 control registers TCCR1A & TCCR1B
		 * 1. PWM Mode WGM10=1 (Mode Number 1)
		*/
		TCCR1A |= (1 << WGM10);
    2016:	af e4       	ldi	r26, 0x4F	; 79
    2018:	b0 e0       	ldi	r27, 0x00	; 0
    201a:	ef e4       	ldi	r30, 0x4F	; 79
    201c:	f0 e0       	ldi	r31, 0x00	; 0
    201e:	80 81       	ld	r24, Z
    2020:	81 60       	ori	r24, 0x01	; 1
    2022:	8c 93       	st	X, r24
        TCCR1B &= ~(1 << WGM13) & ~(1 << WGM12);
    2024:	ae e4       	ldi	r26, 0x4E	; 78
    2026:	b0 e0       	ldi	r27, 0x00	; 0
    2028:	ee e4       	ldi	r30, 0x4E	; 78
    202a:	f0 e0       	ldi	r31, 0x00	; 0
    202c:	80 81       	ld	r24, Z
    202e:	87 7e       	andi	r24, 0xE7	; 231
    2030:	8c 93       	st	X, r24
    2032:	20 c0       	rjmp	.+64     	; 0x2074 <Timer1_init+0xf2>
	}
	else if(Config_Ptr->mode == COMPARE_MODE)
    2034:	e9 81       	ldd	r30, Y+1	; 0x01
    2036:	fa 81       	ldd	r31, Y+2	; 0x02
    2038:	85 81       	ldd	r24, Z+5	; 0x05
    203a:	82 30       	cpi	r24, 0x02	; 2
    203c:	41 f4       	brne	.+16     	; 0x204e <Timer1_init+0xcc>
	{
		/* Configure timer1 control register TCCR1B
		 * 1. CTC Mode WGM12=1 WGM13=0 (Mode Number 4)
		*/
        TCCR1B |= (1 << WGM12);
    203e:	ae e4       	ldi	r26, 0x4E	; 78
    2040:	b0 e0       	ldi	r27, 0x00	; 0
    2042:	ee e4       	ldi	r30, 0x4E	; 78
    2044:	f0 e0       	ldi	r31, 0x00	; 0
    2046:	80 81       	ld	r24, Z
    2048:	88 60       	ori	r24, 0x08	; 8
    204a:	8c 93       	st	X, r24
    204c:	13 c0       	rjmp	.+38     	; 0x2074 <Timer1_init+0xf2>
	}
	else if (Config_Ptr->mode == FAST_PWM_MODE)
    204e:	e9 81       	ldd	r30, Y+1	; 0x01
    2050:	fa 81       	ldd	r31, Y+2	; 0x02
    2052:	85 81       	ldd	r24, Z+5	; 0x05
    2054:	83 30       	cpi	r24, 0x03	; 3
    2056:	71 f4       	brne	.+28     	; 0x2074 <Timer1_init+0xf2>
	{
		/* Configure timer1 control registers TCCR1A & TCCR1B
		 * 1. Fast PWM 8-bit Mode WGM10=1 WGM12=1 (Mode Number 5)
		*/
		TCCR1A |= (1 << WGM10);
    2058:	af e4       	ldi	r26, 0x4F	; 79
    205a:	b0 e0       	ldi	r27, 0x00	; 0
    205c:	ef e4       	ldi	r30, 0x4F	; 79
    205e:	f0 e0       	ldi	r31, 0x00	; 0
    2060:	80 81       	ld	r24, Z
    2062:	81 60       	ori	r24, 0x01	; 1
    2064:	8c 93       	st	X, r24
        TCCR1B |= (1 <<WGM12);
    2066:	ae e4       	ldi	r26, 0x4E	; 78
    2068:	b0 e0       	ldi	r27, 0x00	; 0
    206a:	ee e4       	ldi	r30, 0x4E	; 78
    206c:	f0 e0       	ldi	r31, 0x00	; 0
    206e:	80 81       	ld	r24, Z
    2070:	88 60       	ori	r24, 0x08	; 8
    2072:	8c 93       	st	X, r24
	}


}
    2074:	0f 90       	pop	r0
    2076:	0f 90       	pop	r0
    2078:	cf 91       	pop	r28
    207a:	df 91       	pop	r29
    207c:	08 95       	ret

0000207e <Timer1_deInit>:

void Timer1_deInit(void)
{
    207e:	df 93       	push	r29
    2080:	cf 93       	push	r28
    2082:	cd b7       	in	r28, 0x3d	; 61
    2084:	de b7       	in	r29, 0x3e	; 62
    /* Stop timer1 and clear its registers */
	TCCR1A=0;
    2086:	ef e4       	ldi	r30, 0x4F	; 79
    2088:	f0 e0       	ldi	r31, 0x00	; 0
    208a:	10 82       	st	Z, r1
	TCCR1B=0;
    208c:	ee e4       	ldi	r30, 0x4E	; 78
    208e:	f0 e0       	ldi	r31, 0x00	; 0
    2090:	10 82       	st	Z, r1
    TCNT1 = 0;
    2092:	ec e4       	ldi	r30, 0x4C	; 76
    2094:	f0 e0       	ldi	r31, 0x00	; 0
    2096:	11 82       	std	Z+1, r1	; 0x01
    2098:	10 82       	st	Z, r1
	TIMSK &= ~(1 << OCIE1A);
    209a:	a9 e5       	ldi	r26, 0x59	; 89
    209c:	b0 e0       	ldi	r27, 0x00	; 0
    209e:	e9 e5       	ldi	r30, 0x59	; 89
    20a0:	f0 e0       	ldi	r31, 0x00	; 0
    20a2:	80 81       	ld	r24, Z
    20a4:	8f 7e       	andi	r24, 0xEF	; 239
    20a6:	8c 93       	st	X, r24
}
    20a8:	cf 91       	pop	r28
    20aa:	df 91       	pop	r29
    20ac:	08 95       	ret

000020ae <Timer1_setCallBack>:

void Timer1_setCallBack(void(*a_ptr)(void))
{
    20ae:	df 93       	push	r29
    20b0:	cf 93       	push	r28
    20b2:	00 d0       	rcall	.+0      	; 0x20b4 <Timer1_setCallBack+0x6>
    20b4:	cd b7       	in	r28, 0x3d	; 61
    20b6:	de b7       	in	r29, 0x3e	; 62
    20b8:	9a 83       	std	Y+2, r25	; 0x02
    20ba:	89 83       	std	Y+1, r24	; 0x01
	/* Assign the address of the callback function to the global variable */
	g_callBackPtr = a_ptr;
    20bc:	89 81       	ldd	r24, Y+1	; 0x01
    20be:	9a 81       	ldd	r25, Y+2	; 0x02
    20c0:	90 93 78 01 	sts	0x0178, r25
    20c4:	80 93 77 01 	sts	0x0177, r24
}
    20c8:	0f 90       	pop	r0
    20ca:	0f 90       	pop	r0
    20cc:	cf 91       	pop	r28
    20ce:	df 91       	pop	r29
    20d0:	08 95       	ret

000020d2 <TWI_init>:
 
#include "twi.h"
#include "common_macros.h"
#include <avr/io.h>

void TWI_init(const TWI_ConfigType * Config_Ptr){
    20d2:	df 93       	push	r29
    20d4:	cf 93       	push	r28
    20d6:	00 d0       	rcall	.+0      	; 0x20d8 <TWI_init+0x6>
    20d8:	cd b7       	in	r28, 0x3d	; 61
    20da:	de b7       	in	r29, 0x3e	; 62
    20dc:	9a 83       	std	Y+2, r25	; 0x02
    20de:	89 83       	std	Y+1, r24	; 0x01

	TWBR = Config_Ptr->bit_Rate;
    20e0:	a0 e2       	ldi	r26, 0x20	; 32
    20e2:	b0 e0       	ldi	r27, 0x00	; 0
    20e4:	e9 81       	ldd	r30, Y+1	; 0x01
    20e6:	fa 81       	ldd	r31, Y+2	; 0x02
    20e8:	81 81       	ldd	r24, Z+1	; 0x01
    20ea:	92 81       	ldd	r25, Z+2	; 0x02
    20ec:	8c 93       	st	X, r24
	TWSR = Config_Ptr->prescaler;
    20ee:	a1 e2       	ldi	r26, 0x21	; 33
    20f0:	b0 e0       	ldi	r27, 0x00	; 0
    20f2:	e9 81       	ldd	r30, Y+1	; 0x01
    20f4:	fa 81       	ldd	r31, Y+2	; 0x02
    20f6:	83 81       	ldd	r24, Z+3	; 0x03
    20f8:	8c 93       	st	X, r24
    TWAR = (Config_Ptr->address)<<1;
    20fa:	a2 e2       	ldi	r26, 0x22	; 34
    20fc:	b0 e0       	ldi	r27, 0x00	; 0
    20fe:	e9 81       	ldd	r30, Y+1	; 0x01
    2100:	fa 81       	ldd	r31, Y+2	; 0x02
    2102:	80 81       	ld	r24, Z
    2104:	88 0f       	add	r24, r24
    2106:	8c 93       	st	X, r24
	
    TWCR = (1<<TWEN); /* enable TWI */
    2108:	e6 e5       	ldi	r30, 0x56	; 86
    210a:	f0 e0       	ldi	r31, 0x00	; 0
    210c:	84 e0       	ldi	r24, 0x04	; 4
    210e:	80 83       	st	Z, r24
}
    2110:	0f 90       	pop	r0
    2112:	0f 90       	pop	r0
    2114:	cf 91       	pop	r28
    2116:	df 91       	pop	r29
    2118:	08 95       	ret

0000211a <TWI_start>:

void TWI_start(void)
{
    211a:	df 93       	push	r29
    211c:	cf 93       	push	r28
    211e:	cd b7       	in	r28, 0x3d	; 61
    2120:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    2122:	e6 e5       	ldi	r30, 0x56	; 86
    2124:	f0 e0       	ldi	r31, 0x00	; 0
    2126:	84 ea       	ldi	r24, 0xA4	; 164
    2128:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    212a:	e6 e5       	ldi	r30, 0x56	; 86
    212c:	f0 e0       	ldi	r31, 0x00	; 0
    212e:	80 81       	ld	r24, Z
    2130:	88 23       	and	r24, r24
    2132:	dc f7       	brge	.-10     	; 0x212a <TWI_start+0x10>
}
    2134:	cf 91       	pop	r28
    2136:	df 91       	pop	r29
    2138:	08 95       	ret

0000213a <TWI_stop>:

void TWI_stop(void)
{
    213a:	df 93       	push	r29
    213c:	cf 93       	push	r28
    213e:	cd b7       	in	r28, 0x3d	; 61
    2140:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    2142:	e6 e5       	ldi	r30, 0x56	; 86
    2144:	f0 e0       	ldi	r31, 0x00	; 0
    2146:	84 e9       	ldi	r24, 0x94	; 148
    2148:	80 83       	st	Z, r24
}
    214a:	cf 91       	pop	r28
    214c:	df 91       	pop	r29
    214e:	08 95       	ret

00002150 <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    2150:	df 93       	push	r29
    2152:	cf 93       	push	r28
    2154:	0f 92       	push	r0
    2156:	cd b7       	in	r28, 0x3d	; 61
    2158:	de b7       	in	r29, 0x3e	; 62
    215a:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    215c:	e3 e2       	ldi	r30, 0x23	; 35
    215e:	f0 e0       	ldi	r31, 0x00	; 0
    2160:	89 81       	ldd	r24, Y+1	; 0x01
    2162:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    2164:	e6 e5       	ldi	r30, 0x56	; 86
    2166:	f0 e0       	ldi	r31, 0x00	; 0
    2168:	84 e8       	ldi	r24, 0x84	; 132
    216a:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    216c:	e6 e5       	ldi	r30, 0x56	; 86
    216e:	f0 e0       	ldi	r31, 0x00	; 0
    2170:	80 81       	ld	r24, Z
    2172:	88 23       	and	r24, r24
    2174:	dc f7       	brge	.-10     	; 0x216c <TWI_writeByte+0x1c>
}
    2176:	0f 90       	pop	r0
    2178:	cf 91       	pop	r28
    217a:	df 91       	pop	r29
    217c:	08 95       	ret

0000217e <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    217e:	df 93       	push	r29
    2180:	cf 93       	push	r28
    2182:	cd b7       	in	r28, 0x3d	; 61
    2184:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    2186:	e6 e5       	ldi	r30, 0x56	; 86
    2188:	f0 e0       	ldi	r31, 0x00	; 0
    218a:	84 ec       	ldi	r24, 0xC4	; 196
    218c:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    218e:	e6 e5       	ldi	r30, 0x56	; 86
    2190:	f0 e0       	ldi	r31, 0x00	; 0
    2192:	80 81       	ld	r24, Z
    2194:	88 23       	and	r24, r24
    2196:	dc f7       	brge	.-10     	; 0x218e <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    2198:	e3 e2       	ldi	r30, 0x23	; 35
    219a:	f0 e0       	ldi	r31, 0x00	; 0
    219c:	80 81       	ld	r24, Z
}
    219e:	cf 91       	pop	r28
    21a0:	df 91       	pop	r29
    21a2:	08 95       	ret

000021a4 <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    21a4:	df 93       	push	r29
    21a6:	cf 93       	push	r28
    21a8:	cd b7       	in	r28, 0x3d	; 61
    21aa:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    21ac:	e6 e5       	ldi	r30, 0x56	; 86
    21ae:	f0 e0       	ldi	r31, 0x00	; 0
    21b0:	84 e8       	ldi	r24, 0x84	; 132
    21b2:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    21b4:	e6 e5       	ldi	r30, 0x56	; 86
    21b6:	f0 e0       	ldi	r31, 0x00	; 0
    21b8:	80 81       	ld	r24, Z
    21ba:	88 23       	and	r24, r24
    21bc:	dc f7       	brge	.-10     	; 0x21b4 <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    21be:	e3 e2       	ldi	r30, 0x23	; 35
    21c0:	f0 e0       	ldi	r31, 0x00	; 0
    21c2:	80 81       	ld	r24, Z
}
    21c4:	cf 91       	pop	r28
    21c6:	df 91       	pop	r29
    21c8:	08 95       	ret

000021ca <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    21ca:	df 93       	push	r29
    21cc:	cf 93       	push	r28
    21ce:	0f 92       	push	r0
    21d0:	cd b7       	in	r28, 0x3d	; 61
    21d2:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    21d4:	e1 e2       	ldi	r30, 0x21	; 33
    21d6:	f0 e0       	ldi	r31, 0x00	; 0
    21d8:	80 81       	ld	r24, Z
    21da:	88 7f       	andi	r24, 0xF8	; 248
    21dc:	89 83       	std	Y+1, r24	; 0x01
    return status;
    21de:	89 81       	ldd	r24, Y+1	; 0x01
}
    21e0:	0f 90       	pop	r0
    21e2:	cf 91       	pop	r28
    21e4:	df 91       	pop	r29
    21e6:	08 95       	ret

000021e8 <__divmodhi4>:
    21e8:	97 fb       	bst	r25, 7
    21ea:	09 2e       	mov	r0, r25
    21ec:	07 26       	eor	r0, r23
    21ee:	0a d0       	rcall	.+20     	; 0x2204 <__divmodhi4_neg1>
    21f0:	77 fd       	sbrc	r23, 7
    21f2:	04 d0       	rcall	.+8      	; 0x21fc <__divmodhi4_neg2>
    21f4:	2e d0       	rcall	.+92     	; 0x2252 <__udivmodhi4>
    21f6:	06 d0       	rcall	.+12     	; 0x2204 <__divmodhi4_neg1>
    21f8:	00 20       	and	r0, r0
    21fa:	1a f4       	brpl	.+6      	; 0x2202 <__divmodhi4_exit>

000021fc <__divmodhi4_neg2>:
    21fc:	70 95       	com	r23
    21fe:	61 95       	neg	r22
    2200:	7f 4f       	sbci	r23, 0xFF	; 255

00002202 <__divmodhi4_exit>:
    2202:	08 95       	ret

00002204 <__divmodhi4_neg1>:
    2204:	f6 f7       	brtc	.-4      	; 0x2202 <__divmodhi4_exit>
    2206:	90 95       	com	r25
    2208:	81 95       	neg	r24
    220a:	9f 4f       	sbci	r25, 0xFF	; 255
    220c:	08 95       	ret

0000220e <__udivmodsi4>:
    220e:	a1 e2       	ldi	r26, 0x21	; 33
    2210:	1a 2e       	mov	r1, r26
    2212:	aa 1b       	sub	r26, r26
    2214:	bb 1b       	sub	r27, r27
    2216:	fd 01       	movw	r30, r26
    2218:	0d c0       	rjmp	.+26     	; 0x2234 <__udivmodsi4_ep>

0000221a <__udivmodsi4_loop>:
    221a:	aa 1f       	adc	r26, r26
    221c:	bb 1f       	adc	r27, r27
    221e:	ee 1f       	adc	r30, r30
    2220:	ff 1f       	adc	r31, r31
    2222:	a2 17       	cp	r26, r18
    2224:	b3 07       	cpc	r27, r19
    2226:	e4 07       	cpc	r30, r20
    2228:	f5 07       	cpc	r31, r21
    222a:	20 f0       	brcs	.+8      	; 0x2234 <__udivmodsi4_ep>
    222c:	a2 1b       	sub	r26, r18
    222e:	b3 0b       	sbc	r27, r19
    2230:	e4 0b       	sbc	r30, r20
    2232:	f5 0b       	sbc	r31, r21

00002234 <__udivmodsi4_ep>:
    2234:	66 1f       	adc	r22, r22
    2236:	77 1f       	adc	r23, r23
    2238:	88 1f       	adc	r24, r24
    223a:	99 1f       	adc	r25, r25
    223c:	1a 94       	dec	r1
    223e:	69 f7       	brne	.-38     	; 0x221a <__udivmodsi4_loop>
    2240:	60 95       	com	r22
    2242:	70 95       	com	r23
    2244:	80 95       	com	r24
    2246:	90 95       	com	r25
    2248:	9b 01       	movw	r18, r22
    224a:	ac 01       	movw	r20, r24
    224c:	bd 01       	movw	r22, r26
    224e:	cf 01       	movw	r24, r30
    2250:	08 95       	ret

00002252 <__udivmodhi4>:
    2252:	aa 1b       	sub	r26, r26
    2254:	bb 1b       	sub	r27, r27
    2256:	51 e1       	ldi	r21, 0x11	; 17
    2258:	07 c0       	rjmp	.+14     	; 0x2268 <__udivmodhi4_ep>

0000225a <__udivmodhi4_loop>:
    225a:	aa 1f       	adc	r26, r26
    225c:	bb 1f       	adc	r27, r27
    225e:	a6 17       	cp	r26, r22
    2260:	b7 07       	cpc	r27, r23
    2262:	10 f0       	brcs	.+4      	; 0x2268 <__udivmodhi4_ep>
    2264:	a6 1b       	sub	r26, r22
    2266:	b7 0b       	sbc	r27, r23

00002268 <__udivmodhi4_ep>:
    2268:	88 1f       	adc	r24, r24
    226a:	99 1f       	adc	r25, r25
    226c:	5a 95       	dec	r21
    226e:	a9 f7       	brne	.-22     	; 0x225a <__udivmodhi4_loop>
    2270:	80 95       	com	r24
    2272:	90 95       	com	r25
    2274:	bc 01       	movw	r22, r24
    2276:	cd 01       	movw	r24, r26
    2278:	08 95       	ret

0000227a <__prologue_saves__>:
    227a:	2f 92       	push	r2
    227c:	3f 92       	push	r3
    227e:	4f 92       	push	r4
    2280:	5f 92       	push	r5
    2282:	6f 92       	push	r6
    2284:	7f 92       	push	r7
    2286:	8f 92       	push	r8
    2288:	9f 92       	push	r9
    228a:	af 92       	push	r10
    228c:	bf 92       	push	r11
    228e:	cf 92       	push	r12
    2290:	df 92       	push	r13
    2292:	ef 92       	push	r14
    2294:	ff 92       	push	r15
    2296:	0f 93       	push	r16
    2298:	1f 93       	push	r17
    229a:	cf 93       	push	r28
    229c:	df 93       	push	r29
    229e:	cd b7       	in	r28, 0x3d	; 61
    22a0:	de b7       	in	r29, 0x3e	; 62
    22a2:	ca 1b       	sub	r28, r26
    22a4:	db 0b       	sbc	r29, r27
    22a6:	0f b6       	in	r0, 0x3f	; 63
    22a8:	f8 94       	cli
    22aa:	de bf       	out	0x3e, r29	; 62
    22ac:	0f be       	out	0x3f, r0	; 63
    22ae:	cd bf       	out	0x3d, r28	; 61
    22b0:	09 94       	ijmp

000022b2 <__epilogue_restores__>:
    22b2:	2a 88       	ldd	r2, Y+18	; 0x12
    22b4:	39 88       	ldd	r3, Y+17	; 0x11
    22b6:	48 88       	ldd	r4, Y+16	; 0x10
    22b8:	5f 84       	ldd	r5, Y+15	; 0x0f
    22ba:	6e 84       	ldd	r6, Y+14	; 0x0e
    22bc:	7d 84       	ldd	r7, Y+13	; 0x0d
    22be:	8c 84       	ldd	r8, Y+12	; 0x0c
    22c0:	9b 84       	ldd	r9, Y+11	; 0x0b
    22c2:	aa 84       	ldd	r10, Y+10	; 0x0a
    22c4:	b9 84       	ldd	r11, Y+9	; 0x09
    22c6:	c8 84       	ldd	r12, Y+8	; 0x08
    22c8:	df 80       	ldd	r13, Y+7	; 0x07
    22ca:	ee 80       	ldd	r14, Y+6	; 0x06
    22cc:	fd 80       	ldd	r15, Y+5	; 0x05
    22ce:	0c 81       	ldd	r16, Y+4	; 0x04
    22d0:	1b 81       	ldd	r17, Y+3	; 0x03
    22d2:	aa 81       	ldd	r26, Y+2	; 0x02
    22d4:	b9 81       	ldd	r27, Y+1	; 0x01
    22d6:	ce 0f       	add	r28, r30
    22d8:	d1 1d       	adc	r29, r1
    22da:	0f b6       	in	r0, 0x3f	; 63
    22dc:	f8 94       	cli
    22de:	de bf       	out	0x3e, r29	; 62
    22e0:	0f be       	out	0x3f, r0	; 63
    22e2:	cd bf       	out	0x3d, r28	; 61
    22e4:	ed 01       	movw	r28, r26
    22e6:	08 95       	ret

000022e8 <round>:
    22e8:	50 d0       	rcall	.+160    	; 0x238a <__fp_splitA>
    22ea:	e0 f0       	brcs	.+56     	; 0x2324 <round+0x3c>
    22ec:	9e 37       	cpi	r25, 0x7E	; 126
    22ee:	d8 f0       	brcs	.+54     	; 0x2326 <round+0x3e>
    22f0:	96 39       	cpi	r25, 0x96	; 150
    22f2:	b8 f4       	brcc	.+46     	; 0x2322 <round+0x3a>
    22f4:	9e 38       	cpi	r25, 0x8E	; 142
    22f6:	48 f4       	brcc	.+18     	; 0x230a <round+0x22>
    22f8:	67 2f       	mov	r22, r23
    22fa:	78 2f       	mov	r23, r24
    22fc:	88 27       	eor	r24, r24
    22fe:	98 5f       	subi	r25, 0xF8	; 248
    2300:	f9 cf       	rjmp	.-14     	; 0x22f4 <round+0xc>
    2302:	86 95       	lsr	r24
    2304:	77 95       	ror	r23
    2306:	67 95       	ror	r22
    2308:	93 95       	inc	r25
    230a:	95 39       	cpi	r25, 0x95	; 149
    230c:	d0 f3       	brcs	.-12     	; 0x2302 <round+0x1a>
    230e:	b6 2f       	mov	r27, r22
    2310:	b1 70       	andi	r27, 0x01	; 1
    2312:	6b 0f       	add	r22, r27
    2314:	71 1d       	adc	r23, r1
    2316:	81 1d       	adc	r24, r1
    2318:	20 f4       	brcc	.+8      	; 0x2322 <round+0x3a>
    231a:	87 95       	ror	r24
    231c:	77 95       	ror	r23
    231e:	67 95       	ror	r22
    2320:	93 95       	inc	r25
    2322:	02 c0       	rjmp	.+4      	; 0x2328 <__fp_mintl>
    2324:	1c c0       	rjmp	.+56     	; 0x235e <__fp_mpack>
    2326:	4c c0       	rjmp	.+152    	; 0x23c0 <__fp_szero>

00002328 <__fp_mintl>:
    2328:	88 23       	and	r24, r24
    232a:	71 f4       	brne	.+28     	; 0x2348 <__fp_mintl+0x20>
    232c:	77 23       	and	r23, r23
    232e:	21 f0       	breq	.+8      	; 0x2338 <__fp_mintl+0x10>
    2330:	98 50       	subi	r25, 0x08	; 8
    2332:	87 2b       	or	r24, r23
    2334:	76 2f       	mov	r23, r22
    2336:	07 c0       	rjmp	.+14     	; 0x2346 <__fp_mintl+0x1e>
    2338:	66 23       	and	r22, r22
    233a:	11 f4       	brne	.+4      	; 0x2340 <__fp_mintl+0x18>
    233c:	99 27       	eor	r25, r25
    233e:	0d c0       	rjmp	.+26     	; 0x235a <__fp_mintl+0x32>
    2340:	90 51       	subi	r25, 0x10	; 16
    2342:	86 2b       	or	r24, r22
    2344:	70 e0       	ldi	r23, 0x00	; 0
    2346:	60 e0       	ldi	r22, 0x00	; 0
    2348:	2a f0       	brmi	.+10     	; 0x2354 <__fp_mintl+0x2c>
    234a:	9a 95       	dec	r25
    234c:	66 0f       	add	r22, r22
    234e:	77 1f       	adc	r23, r23
    2350:	88 1f       	adc	r24, r24
    2352:	da f7       	brpl	.-10     	; 0x234a <__fp_mintl+0x22>
    2354:	88 0f       	add	r24, r24
    2356:	96 95       	lsr	r25
    2358:	87 95       	ror	r24
    235a:	97 f9       	bld	r25, 7
    235c:	08 95       	ret

0000235e <__fp_mpack>:
    235e:	9f 3f       	cpi	r25, 0xFF	; 255
    2360:	31 f0       	breq	.+12     	; 0x236e <__fp_mpack_finite+0xc>

00002362 <__fp_mpack_finite>:
    2362:	91 50       	subi	r25, 0x01	; 1
    2364:	20 f4       	brcc	.+8      	; 0x236e <__fp_mpack_finite+0xc>
    2366:	87 95       	ror	r24
    2368:	77 95       	ror	r23
    236a:	67 95       	ror	r22
    236c:	b7 95       	ror	r27
    236e:	88 0f       	add	r24, r24
    2370:	91 1d       	adc	r25, r1
    2372:	96 95       	lsr	r25
    2374:	87 95       	ror	r24
    2376:	97 f9       	bld	r25, 7
    2378:	08 95       	ret

0000237a <__fp_split3>:
    237a:	57 fd       	sbrc	r21, 7
    237c:	90 58       	subi	r25, 0x80	; 128
    237e:	44 0f       	add	r20, r20
    2380:	55 1f       	adc	r21, r21
    2382:	59 f0       	breq	.+22     	; 0x239a <__fp_splitA+0x10>
    2384:	5f 3f       	cpi	r21, 0xFF	; 255
    2386:	71 f0       	breq	.+28     	; 0x23a4 <__fp_splitA+0x1a>
    2388:	47 95       	ror	r20

0000238a <__fp_splitA>:
    238a:	88 0f       	add	r24, r24
    238c:	97 fb       	bst	r25, 7
    238e:	99 1f       	adc	r25, r25
    2390:	61 f0       	breq	.+24     	; 0x23aa <__fp_splitA+0x20>
    2392:	9f 3f       	cpi	r25, 0xFF	; 255
    2394:	79 f0       	breq	.+30     	; 0x23b4 <__fp_splitA+0x2a>
    2396:	87 95       	ror	r24
    2398:	08 95       	ret
    239a:	12 16       	cp	r1, r18
    239c:	13 06       	cpc	r1, r19
    239e:	14 06       	cpc	r1, r20
    23a0:	55 1f       	adc	r21, r21
    23a2:	f2 cf       	rjmp	.-28     	; 0x2388 <__fp_split3+0xe>
    23a4:	46 95       	lsr	r20
    23a6:	f1 df       	rcall	.-30     	; 0x238a <__fp_splitA>
    23a8:	08 c0       	rjmp	.+16     	; 0x23ba <__fp_splitA+0x30>
    23aa:	16 16       	cp	r1, r22
    23ac:	17 06       	cpc	r1, r23
    23ae:	18 06       	cpc	r1, r24
    23b0:	99 1f       	adc	r25, r25
    23b2:	f1 cf       	rjmp	.-30     	; 0x2396 <__fp_splitA+0xc>
    23b4:	86 95       	lsr	r24
    23b6:	71 05       	cpc	r23, r1
    23b8:	61 05       	cpc	r22, r1
    23ba:	08 94       	sec
    23bc:	08 95       	ret

000023be <__fp_zero>:
    23be:	e8 94       	clt

000023c0 <__fp_szero>:
    23c0:	bb 27       	eor	r27, r27
    23c2:	66 27       	eor	r22, r22
    23c4:	77 27       	eor	r23, r23
    23c6:	cb 01       	movw	r24, r22
    23c8:	97 f9       	bld	r25, 7
    23ca:	08 95       	ret

000023cc <_exit>:
    23cc:	f8 94       	cli

000023ce <__stop_program>:
    23ce:	ff cf       	rjmp	.-2      	; 0x23ce <__stop_program>
