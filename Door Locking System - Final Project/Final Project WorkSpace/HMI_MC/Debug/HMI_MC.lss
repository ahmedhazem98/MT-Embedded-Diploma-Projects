
HMI_MC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003342  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000ce  00800060  00003342  000033d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  0080012e  0080012e  000034a4  2**0
                  ALLOC
  3 .stab         00002fa0  00000000  00000000  000034a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001219  00000000  00000000  00006444  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000765d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000779d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000790d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00009556  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a441  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b1f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b350  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b5dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000bdab  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 f9 17 	jmp	0x2ff2	; 0x2ff2 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 2c 18 	jmp	0x3058	; 0x3058 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e4       	ldi	r30, 0x42	; 66
      68:	f3 e3       	ldi	r31, 0x33	; 51
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 32       	cpi	r26, 0x2E	; 46
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ae e2       	ldi	r26, 0x2E	; 46
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 33       	cpi	r26, 0x32	; 50
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 9f 19 	jmp	0x333e	; 0x333e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 23 19 	jmp	0x3246	; 0x3246 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a8 e1       	ldi	r26, 0x18	; 24
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 3f 19 	jmp	0x327e	; 0x327e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 2f 19 	jmp	0x325e	; 0x325e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 4b 19 	jmp	0x3296	; 0x3296 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 2f 19 	jmp	0x325e	; 0x325e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 4b 19 	jmp	0x3296	; 0x3296 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 23 19 	jmp	0x3246	; 0x3246 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	88 e1       	ldi	r24, 0x18	; 24
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 3f 19 	jmp	0x327e	; 0x327e <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 2f 19 	jmp	0x325e	; 0x325e <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 4b 19 	jmp	0x3296	; 0x3296 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 2f 19 	jmp	0x325e	; 0x325e <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 4b 19 	jmp	0x3296	; 0x3296 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 2f 19 	jmp	0x325e	; 0x325e <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 4b 19 	jmp	0x3296	; 0x3296 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 33 19 	jmp	0x3266	; 0x3266 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 4f 19 	jmp	0x329e	; 0x329e <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:

/******************************************************************************
 *                           Main Function
 ******************************************************************************/

int main(void) {
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	67 97       	sbiw	r28, 0x17	; 23
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
	/* Initialize UART with 8bits mode, no parity bit, 1 stop bit and 9600 baud rate */
	UART_ConfigType uart_config = { Bits_8,
									DISABLED,
									ONE_BIT,
									9600 };
     b5a:	ce 01       	movw	r24, r28
     b5c:	01 96       	adiw	r24, 0x01	; 1
     b5e:	9f 87       	std	Y+15, r25	; 0x0f
     b60:	8e 87       	std	Y+14, r24	; 0x0e
     b62:	e6 e2       	ldi	r30, 0x26	; 38
     b64:	f1 e0       	ldi	r31, 0x01	; 1
     b66:	f9 8b       	std	Y+17, r31	; 0x11
     b68:	e8 8b       	std	Y+16, r30	; 0x10
     b6a:	f7 e0       	ldi	r31, 0x07	; 7
     b6c:	fa 8b       	std	Y+18, r31	; 0x12
     b6e:	e8 89       	ldd	r30, Y+16	; 0x10
     b70:	f9 89       	ldd	r31, Y+17	; 0x11
     b72:	00 80       	ld	r0, Z
     b74:	88 89       	ldd	r24, Y+16	; 0x10
     b76:	99 89       	ldd	r25, Y+17	; 0x11
     b78:	01 96       	adiw	r24, 0x01	; 1
     b7a:	99 8b       	std	Y+17, r25	; 0x11
     b7c:	88 8b       	std	Y+16, r24	; 0x10
     b7e:	ee 85       	ldd	r30, Y+14	; 0x0e
     b80:	ff 85       	ldd	r31, Y+15	; 0x0f
     b82:	00 82       	st	Z, r0
     b84:	8e 85       	ldd	r24, Y+14	; 0x0e
     b86:	9f 85       	ldd	r25, Y+15	; 0x0f
     b88:	01 96       	adiw	r24, 0x01	; 1
     b8a:	9f 87       	std	Y+15, r25	; 0x0f
     b8c:	8e 87       	std	Y+14, r24	; 0x0e
     b8e:	9a 89       	ldd	r25, Y+18	; 0x12
     b90:	91 50       	subi	r25, 0x01	; 1
     b92:	9a 8b       	std	Y+18, r25	; 0x12
     b94:	ea 89       	ldd	r30, Y+18	; 0x12
     b96:	ee 23       	and	r30, r30
     b98:	51 f7       	brne	.-44     	; 0xb6e <main+0x28>
	/* Initialize Timer1 with 0 initial value, 23437 compare value, prescalar of 1024 and CTC mode */
	Timer1_ConfigType g_timer1_config = { 0,
										  23437,
										  F_CPU_1024,
										  COMPARE_MODE };
     b9a:	ce 01       	movw	r24, r28
     b9c:	08 96       	adiw	r24, 0x08	; 8
     b9e:	9c 8b       	std	Y+20, r25	; 0x14
     ba0:	8b 8b       	std	Y+19, r24	; 0x13
     ba2:	e0 e2       	ldi	r30, 0x20	; 32
     ba4:	f1 e0       	ldi	r31, 0x01	; 1
     ba6:	fe 8b       	std	Y+22, r31	; 0x16
     ba8:	ed 8b       	std	Y+21, r30	; 0x15
     baa:	f6 e0       	ldi	r31, 0x06	; 6
     bac:	ff 8b       	std	Y+23, r31	; 0x17
     bae:	ed 89       	ldd	r30, Y+21	; 0x15
     bb0:	fe 89       	ldd	r31, Y+22	; 0x16
     bb2:	00 80       	ld	r0, Z
     bb4:	8d 89       	ldd	r24, Y+21	; 0x15
     bb6:	9e 89       	ldd	r25, Y+22	; 0x16
     bb8:	01 96       	adiw	r24, 0x01	; 1
     bba:	9e 8b       	std	Y+22, r25	; 0x16
     bbc:	8d 8b       	std	Y+21, r24	; 0x15
     bbe:	eb 89       	ldd	r30, Y+19	; 0x13
     bc0:	fc 89       	ldd	r31, Y+20	; 0x14
     bc2:	00 82       	st	Z, r0
     bc4:	8b 89       	ldd	r24, Y+19	; 0x13
     bc6:	9c 89       	ldd	r25, Y+20	; 0x14
     bc8:	01 96       	adiw	r24, 0x01	; 1
     bca:	9c 8b       	std	Y+20, r25	; 0x14
     bcc:	8b 8b       	std	Y+19, r24	; 0x13
     bce:	9f 89       	ldd	r25, Y+23	; 0x17
     bd0:	91 50       	subi	r25, 0x01	; 1
     bd2:	9f 8b       	std	Y+23, r25	; 0x17
     bd4:	ef 89       	ldd	r30, Y+23	; 0x17
     bd6:	ee 23       	and	r30, r30
     bd8:	51 f7       	brne	.-44     	; 0xbae <main+0x68>
	UART_init(&uart_config);
     bda:	ce 01       	movw	r24, r28
     bdc:	01 96       	adiw	r24, 0x01	; 1
     bde:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <UART_init>
	Timer1_init(&g_timer1_config);
     be2:	ce 01       	movw	r24, r28
     be4:	08 96       	adiw	r24, 0x08	; 8
     be6:	0e 94 59 18 	call	0x30b2	; 0x30b2 <Timer1_init>
	Timer1_setCallBack(&timer_callback_function);
     bea:	83 ed       	ldi	r24, 0xD3	; 211
     bec:	9d e0       	ldi	r25, 0x0D	; 13
     bee:	0e 94 ef 18 	call	0x31de	; 0x31de <Timer1_setCallBack>
	LCD_init();
     bf2:	0e 94 42 13 	call	0x2684	; 0x2684 <LCD_init>
	SREG |= (1 << 7);
     bf6:	af e5       	ldi	r26, 0x5F	; 95
     bf8:	b0 e0       	ldi	r27, 0x00	; 0
     bfa:	ef e5       	ldi	r30, 0x5F	; 95
     bfc:	f0 e0       	ldi	r31, 0x00	; 0
     bfe:	80 81       	ld	r24, Z
     c00:	80 68       	ori	r24, 0x80	; 128
     c02:	8c 93       	st	X, r24

	/* Creating a password */
	LCD_clearScreen();
     c04:	0e 94 ef 17 	call	0x2fde	; 0x2fde <LCD_clearScreen>
	create_password();
     c08:	0e 94 09 06 	call	0xc12	; 0xc12 <create_password>

	while (1) {
		mainMenu();
     c0c:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <mainMenu>
     c10:	fd cf       	rjmp	.-6      	; 0xc0c <main+0xc6>

00000c12 <create_password>:
 *
 * Parameters: None
 *
 * Returns: None
 */
void create_password(void) {
     c12:	0f 93       	push	r16
     c14:	1f 93       	push	r17
     c16:	df 93       	push	r29
     c18:	cf 93       	push	r28
     c1a:	cd b7       	in	r28, 0x3d	; 61
     c1c:	de b7       	in	r29, 0x3e	; 62
     c1e:	c5 56       	subi	r28, 0x65	; 101
     c20:	d0 40       	sbci	r29, 0x00	; 0
     c22:	0f b6       	in	r0, 0x3f	; 63
     c24:	f8 94       	cli
     c26:	de bf       	out	0x3e, r29	; 62
     c28:	0f be       	out	0x3f, r0	; 63
     c2a:	cd bf       	out	0x3d, r28	; 61
	uint8 firstPassword[PASSWORD_LENGTH + 2];
	uint8 secondPassword[PASSWORD_LENGTH + 2];
	uint8 matchCheck;
	uint8 i = 0;
     c2c:	fe 01       	movw	r30, r28
     c2e:	ea 5a       	subi	r30, 0xAA	; 170
     c30:	ff 4f       	sbci	r31, 0xFF	; 255
     c32:	10 82       	st	Z, r1
	uint8 keyPressed;
	/* Prompting the user to enter a new password */
	LCD_clearScreen();
     c34:	0e 94 ef 17 	call	0x2fde	; 0x2fde <LCD_clearScreen>
	LCD_displayString("Enter Password:");
     c38:	80 e6       	ldi	r24, 0x60	; 96
     c3a:	90 e0       	ldi	r25, 0x00	; 0
     c3c:	0e 94 48 17 	call	0x2e90	; 0x2e90 <LCD_displayString>
	LCD_moveCursor(1, 0);
     c40:	81 e0       	ldi	r24, 0x01	; 1
     c42:	60 e0       	ldi	r22, 0x00	; 0
     c44:	0e 94 71 17 	call	0x2ee2	; 0x2ee2 <LCD_moveCursor>

	for (i = 0; i < PASSWORD_LENGTH; i++) {
     c48:	fe 01       	movw	r30, r28
     c4a:	ea 5a       	subi	r30, 0xAA	; 170
     c4c:	ff 4f       	sbci	r31, 0xFF	; 255
     c4e:	10 82       	st	Z, r1
     c50:	de c0       	rjmp	.+444    	; 0xe0e <create_password+0x1fc>
		/* Getting the user input */
		keyPressed = KEYPAD_getPressedKey();
     c52:	0e 94 4a 12 	call	0x2494	; 0x2494 <KEYPAD_getPressedKey>
     c56:	fe 01       	movw	r30, r28
     c58:	eb 5a       	subi	r30, 0xAB	; 171
     c5a:	ff 4f       	sbci	r31, 0xFF	; 255
     c5c:	80 83       	st	Z, r24
		/* Displaying an asterisk to mask the password */
		if (keyPressed >= 0 && keyPressed <= 9) {
     c5e:	fe 01       	movw	r30, r28
     c60:	eb 5a       	subi	r30, 0xAB	; 171
     c62:	ff 4f       	sbci	r31, 0xFF	; 255
     c64:	80 81       	ld	r24, Z
     c66:	8a 30       	cpi	r24, 0x0A	; 10
     c68:	08 f0       	brcs	.+2      	; 0xc6c <create_password+0x5a>
     c6a:	c8 c0       	rjmp	.+400    	; 0xdfc <create_password+0x1ea>
			LCD_displayString("*");
     c6c:	80 e7       	ldi	r24, 0x70	; 112
     c6e:	90 e0       	ldi	r25, 0x00	; 0
     c70:	0e 94 48 17 	call	0x2e90	; 0x2e90 <LCD_displayString>
			firstPassword[i] = keyPressed;
     c74:	fe 01       	movw	r30, r28
     c76:	ea 5a       	subi	r30, 0xAA	; 170
     c78:	ff 4f       	sbci	r31, 0xFF	; 255
     c7a:	80 81       	ld	r24, Z
     c7c:	28 2f       	mov	r18, r24
     c7e:	30 e0       	ldi	r19, 0x00	; 0
     c80:	ce 01       	movw	r24, r28
     c82:	88 5a       	subi	r24, 0xA8	; 168
     c84:	9f 4f       	sbci	r25, 0xFF	; 255
     c86:	dc 01       	movw	r26, r24
     c88:	a2 0f       	add	r26, r18
     c8a:	b3 1f       	adc	r27, r19
     c8c:	fe 01       	movw	r30, r28
     c8e:	eb 5a       	subi	r30, 0xAB	; 171
     c90:	ff 4f       	sbci	r31, 0xFF	; 255
     c92:	80 81       	ld	r24, Z
     c94:	8c 93       	st	X, r24
     c96:	fe 01       	movw	r30, r28
     c98:	ef 5a       	subi	r30, 0xAF	; 175
     c9a:	ff 4f       	sbci	r31, 0xFF	; 255
     c9c:	80 e0       	ldi	r24, 0x00	; 0
     c9e:	90 e0       	ldi	r25, 0x00	; 0
     ca0:	aa ef       	ldi	r26, 0xFA	; 250
     ca2:	b3 e4       	ldi	r27, 0x43	; 67
     ca4:	80 83       	st	Z, r24
     ca6:	91 83       	std	Z+1, r25	; 0x01
     ca8:	a2 83       	std	Z+2, r26	; 0x02
     caa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cac:	8e 01       	movw	r16, r28
     cae:	03 5b       	subi	r16, 0xB3	; 179
     cb0:	1f 4f       	sbci	r17, 0xFF	; 255
     cb2:	fe 01       	movw	r30, r28
     cb4:	ef 5a       	subi	r30, 0xAF	; 175
     cb6:	ff 4f       	sbci	r31, 0xFF	; 255
     cb8:	60 81       	ld	r22, Z
     cba:	71 81       	ldd	r23, Z+1	; 0x01
     cbc:	82 81       	ldd	r24, Z+2	; 0x02
     cbe:	93 81       	ldd	r25, Z+3	; 0x03
     cc0:	20 e0       	ldi	r18, 0x00	; 0
     cc2:	30 e0       	ldi	r19, 0x00	; 0
     cc4:	4a ef       	ldi	r20, 0xFA	; 250
     cc6:	54 e4       	ldi	r21, 0x44	; 68
     cc8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ccc:	dc 01       	movw	r26, r24
     cce:	cb 01       	movw	r24, r22
     cd0:	f8 01       	movw	r30, r16
     cd2:	80 83       	st	Z, r24
     cd4:	91 83       	std	Z+1, r25	; 0x01
     cd6:	a2 83       	std	Z+2, r26	; 0x02
     cd8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     cda:	fe 01       	movw	r30, r28
     cdc:	e3 5b       	subi	r30, 0xB3	; 179
     cde:	ff 4f       	sbci	r31, 0xFF	; 255
     ce0:	60 81       	ld	r22, Z
     ce2:	71 81       	ldd	r23, Z+1	; 0x01
     ce4:	82 81       	ldd	r24, Z+2	; 0x02
     ce6:	93 81       	ldd	r25, Z+3	; 0x03
     ce8:	20 e0       	ldi	r18, 0x00	; 0
     cea:	30 e0       	ldi	r19, 0x00	; 0
     cec:	40 e8       	ldi	r20, 0x80	; 128
     cee:	5f e3       	ldi	r21, 0x3F	; 63
     cf0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     cf4:	88 23       	and	r24, r24
     cf6:	44 f4       	brge	.+16     	; 0xd08 <create_password+0xf6>
		__ticks = 1;
     cf8:	fe 01       	movw	r30, r28
     cfa:	e5 5b       	subi	r30, 0xB5	; 181
     cfc:	ff 4f       	sbci	r31, 0xFF	; 255
     cfe:	81 e0       	ldi	r24, 0x01	; 1
     d00:	90 e0       	ldi	r25, 0x00	; 0
     d02:	91 83       	std	Z+1, r25	; 0x01
     d04:	80 83       	st	Z, r24
     d06:	64 c0       	rjmp	.+200    	; 0xdd0 <create_password+0x1be>
	else if (__tmp > 65535)
     d08:	fe 01       	movw	r30, r28
     d0a:	e3 5b       	subi	r30, 0xB3	; 179
     d0c:	ff 4f       	sbci	r31, 0xFF	; 255
     d0e:	60 81       	ld	r22, Z
     d10:	71 81       	ldd	r23, Z+1	; 0x01
     d12:	82 81       	ldd	r24, Z+2	; 0x02
     d14:	93 81       	ldd	r25, Z+3	; 0x03
     d16:	20 e0       	ldi	r18, 0x00	; 0
     d18:	3f ef       	ldi	r19, 0xFF	; 255
     d1a:	4f e7       	ldi	r20, 0x7F	; 127
     d1c:	57 e4       	ldi	r21, 0x47	; 71
     d1e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d22:	18 16       	cp	r1, r24
     d24:	0c f0       	brlt	.+2      	; 0xd28 <create_password+0x116>
     d26:	43 c0       	rjmp	.+134    	; 0xdae <create_password+0x19c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d28:	fe 01       	movw	r30, r28
     d2a:	ef 5a       	subi	r30, 0xAF	; 175
     d2c:	ff 4f       	sbci	r31, 0xFF	; 255
     d2e:	60 81       	ld	r22, Z
     d30:	71 81       	ldd	r23, Z+1	; 0x01
     d32:	82 81       	ldd	r24, Z+2	; 0x02
     d34:	93 81       	ldd	r25, Z+3	; 0x03
     d36:	20 e0       	ldi	r18, 0x00	; 0
     d38:	30 e0       	ldi	r19, 0x00	; 0
     d3a:	40 e2       	ldi	r20, 0x20	; 32
     d3c:	51 e4       	ldi	r21, 0x41	; 65
     d3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d42:	dc 01       	movw	r26, r24
     d44:	cb 01       	movw	r24, r22
     d46:	8e 01       	movw	r16, r28
     d48:	05 5b       	subi	r16, 0xB5	; 181
     d4a:	1f 4f       	sbci	r17, 0xFF	; 255
     d4c:	bc 01       	movw	r22, r24
     d4e:	cd 01       	movw	r24, r26
     d50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d54:	dc 01       	movw	r26, r24
     d56:	cb 01       	movw	r24, r22
     d58:	f8 01       	movw	r30, r16
     d5a:	91 83       	std	Z+1, r25	; 0x01
     d5c:	80 83       	st	Z, r24
     d5e:	1f c0       	rjmp	.+62     	; 0xd9e <create_password+0x18c>
     d60:	fe 01       	movw	r30, r28
     d62:	e7 5b       	subi	r30, 0xB7	; 183
     d64:	ff 4f       	sbci	r31, 0xFF	; 255
     d66:	88 ec       	ldi	r24, 0xC8	; 200
     d68:	90 e0       	ldi	r25, 0x00	; 0
     d6a:	91 83       	std	Z+1, r25	; 0x01
     d6c:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d6e:	fe 01       	movw	r30, r28
     d70:	e7 5b       	subi	r30, 0xB7	; 183
     d72:	ff 4f       	sbci	r31, 0xFF	; 255
     d74:	80 81       	ld	r24, Z
     d76:	91 81       	ldd	r25, Z+1	; 0x01
     d78:	01 97       	sbiw	r24, 0x01	; 1
     d7a:	f1 f7       	brne	.-4      	; 0xd78 <create_password+0x166>
     d7c:	fe 01       	movw	r30, r28
     d7e:	e7 5b       	subi	r30, 0xB7	; 183
     d80:	ff 4f       	sbci	r31, 0xFF	; 255
     d82:	91 83       	std	Z+1, r25	; 0x01
     d84:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d86:	de 01       	movw	r26, r28
     d88:	a5 5b       	subi	r26, 0xB5	; 181
     d8a:	bf 4f       	sbci	r27, 0xFF	; 255
     d8c:	fe 01       	movw	r30, r28
     d8e:	e5 5b       	subi	r30, 0xB5	; 181
     d90:	ff 4f       	sbci	r31, 0xFF	; 255
     d92:	80 81       	ld	r24, Z
     d94:	91 81       	ldd	r25, Z+1	; 0x01
     d96:	01 97       	sbiw	r24, 0x01	; 1
     d98:	11 96       	adiw	r26, 0x01	; 1
     d9a:	9c 93       	st	X, r25
     d9c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d9e:	fe 01       	movw	r30, r28
     da0:	e5 5b       	subi	r30, 0xB5	; 181
     da2:	ff 4f       	sbci	r31, 0xFF	; 255
     da4:	80 81       	ld	r24, Z
     da6:	91 81       	ldd	r25, Z+1	; 0x01
     da8:	00 97       	sbiw	r24, 0x00	; 0
     daa:	d1 f6       	brne	.-76     	; 0xd60 <create_password+0x14e>
     dac:	27 c0       	rjmp	.+78     	; 0xdfc <create_password+0x1ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     dae:	8e 01       	movw	r16, r28
     db0:	05 5b       	subi	r16, 0xB5	; 181
     db2:	1f 4f       	sbci	r17, 0xFF	; 255
     db4:	fe 01       	movw	r30, r28
     db6:	e3 5b       	subi	r30, 0xB3	; 179
     db8:	ff 4f       	sbci	r31, 0xFF	; 255
     dba:	60 81       	ld	r22, Z
     dbc:	71 81       	ldd	r23, Z+1	; 0x01
     dbe:	82 81       	ldd	r24, Z+2	; 0x02
     dc0:	93 81       	ldd	r25, Z+3	; 0x03
     dc2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     dc6:	dc 01       	movw	r26, r24
     dc8:	cb 01       	movw	r24, r22
     dca:	f8 01       	movw	r30, r16
     dcc:	91 83       	std	Z+1, r25	; 0x01
     dce:	80 83       	st	Z, r24
     dd0:	de 01       	movw	r26, r28
     dd2:	a9 5b       	subi	r26, 0xB9	; 185
     dd4:	bf 4f       	sbci	r27, 0xFF	; 255
     dd6:	fe 01       	movw	r30, r28
     dd8:	e5 5b       	subi	r30, 0xB5	; 181
     dda:	ff 4f       	sbci	r31, 0xFF	; 255
     ddc:	80 81       	ld	r24, Z
     dde:	91 81       	ldd	r25, Z+1	; 0x01
     de0:	8d 93       	st	X+, r24
     de2:	9c 93       	st	X, r25
     de4:	fe 01       	movw	r30, r28
     de6:	e9 5b       	subi	r30, 0xB9	; 185
     de8:	ff 4f       	sbci	r31, 0xFF	; 255
     dea:	80 81       	ld	r24, Z
     dec:	91 81       	ldd	r25, Z+1	; 0x01
     dee:	01 97       	sbiw	r24, 0x01	; 1
     df0:	f1 f7       	brne	.-4      	; 0xdee <create_password+0x1dc>
     df2:	fe 01       	movw	r30, r28
     df4:	e9 5b       	subi	r30, 0xB9	; 185
     df6:	ff 4f       	sbci	r31, 0xFF	; 255
     df8:	91 83       	std	Z+1, r25	; 0x01
     dfa:	80 83       	st	Z, r24
	/* Prompting the user to enter a new password */
	LCD_clearScreen();
	LCD_displayString("Enter Password:");
	LCD_moveCursor(1, 0);

	for (i = 0; i < PASSWORD_LENGTH; i++) {
     dfc:	de 01       	movw	r26, r28
     dfe:	aa 5a       	subi	r26, 0xAA	; 170
     e00:	bf 4f       	sbci	r27, 0xFF	; 255
     e02:	fe 01       	movw	r30, r28
     e04:	ea 5a       	subi	r30, 0xAA	; 170
     e06:	ff 4f       	sbci	r31, 0xFF	; 255
     e08:	80 81       	ld	r24, Z
     e0a:	8f 5f       	subi	r24, 0xFF	; 255
     e0c:	8c 93       	st	X, r24
     e0e:	fe 01       	movw	r30, r28
     e10:	ea 5a       	subi	r30, 0xAA	; 170
     e12:	ff 4f       	sbci	r31, 0xFF	; 255
     e14:	80 81       	ld	r24, Z
     e16:	85 30       	cpi	r24, 0x05	; 5
     e18:	08 f4       	brcc	.+2      	; 0xe1c <create_password+0x20a>
     e1a:	1b cf       	rjmp	.-458    	; 0xc52 <create_password+0x40>
			LCD_displayString("*");
			firstPassword[i] = keyPressed;
			_delay_ms(500);
		}
	}
	firstPassword[PASSWORD_LENGTH] = '#';
     e1c:	fe 01       	movw	r30, r28
     e1e:	e8 5a       	subi	r30, 0xA8	; 168
     e20:	ff 4f       	sbci	r31, 0xFF	; 255
     e22:	83 e2       	ldi	r24, 0x23	; 35
     e24:	85 83       	std	Z+5, r24	; 0x05
	firstPassword[PASSWORD_LENGTH + 1] = '\0';
     e26:	fe 01       	movw	r30, r28
     e28:	e8 5a       	subi	r30, 0xA8	; 168
     e2a:	ff 4f       	sbci	r31, 0xFF	; 255
     e2c:	16 82       	std	Z+6, r1	; 0x06
	while (KEYPAD_getPressedKey() != '=');
     e2e:	0e 94 4a 12 	call	0x2494	; 0x2494 <KEYPAD_getPressedKey>
     e32:	8d 33       	cpi	r24, 0x3D	; 61
     e34:	e1 f7       	brne	.-8      	; 0xe2e <create_password+0x21c>

	LCD_clearScreen();
     e36:	0e 94 ef 17 	call	0x2fde	; 0x2fde <LCD_clearScreen>
     e3a:	fe 01       	movw	r30, r28
     e3c:	ed 5b       	subi	r30, 0xBD	; 189
     e3e:	ff 4f       	sbci	r31, 0xFF	; 255
     e40:	80 e0       	ldi	r24, 0x00	; 0
     e42:	90 e0       	ldi	r25, 0x00	; 0
     e44:	aa ef       	ldi	r26, 0xFA	; 250
     e46:	b3 e4       	ldi	r27, 0x43	; 67
     e48:	80 83       	st	Z, r24
     e4a:	91 83       	std	Z+1, r25	; 0x01
     e4c:	a2 83       	std	Z+2, r26	; 0x02
     e4e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e50:	8e 01       	movw	r16, r28
     e52:	01 5c       	subi	r16, 0xC1	; 193
     e54:	1f 4f       	sbci	r17, 0xFF	; 255
     e56:	fe 01       	movw	r30, r28
     e58:	ed 5b       	subi	r30, 0xBD	; 189
     e5a:	ff 4f       	sbci	r31, 0xFF	; 255
     e5c:	60 81       	ld	r22, Z
     e5e:	71 81       	ldd	r23, Z+1	; 0x01
     e60:	82 81       	ldd	r24, Z+2	; 0x02
     e62:	93 81       	ldd	r25, Z+3	; 0x03
     e64:	20 e0       	ldi	r18, 0x00	; 0
     e66:	30 e0       	ldi	r19, 0x00	; 0
     e68:	4a ef       	ldi	r20, 0xFA	; 250
     e6a:	54 e4       	ldi	r21, 0x44	; 68
     e6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e70:	dc 01       	movw	r26, r24
     e72:	cb 01       	movw	r24, r22
     e74:	f8 01       	movw	r30, r16
     e76:	80 83       	st	Z, r24
     e78:	91 83       	std	Z+1, r25	; 0x01
     e7a:	a2 83       	std	Z+2, r26	; 0x02
     e7c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     e7e:	fe 01       	movw	r30, r28
     e80:	ff 96       	adiw	r30, 0x3f	; 63
     e82:	60 81       	ld	r22, Z
     e84:	71 81       	ldd	r23, Z+1	; 0x01
     e86:	82 81       	ldd	r24, Z+2	; 0x02
     e88:	93 81       	ldd	r25, Z+3	; 0x03
     e8a:	20 e0       	ldi	r18, 0x00	; 0
     e8c:	30 e0       	ldi	r19, 0x00	; 0
     e8e:	40 e8       	ldi	r20, 0x80	; 128
     e90:	5f e3       	ldi	r21, 0x3F	; 63
     e92:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e96:	88 23       	and	r24, r24
     e98:	2c f4       	brge	.+10     	; 0xea4 <create_password+0x292>
		__ticks = 1;
     e9a:	81 e0       	ldi	r24, 0x01	; 1
     e9c:	90 e0       	ldi	r25, 0x00	; 0
     e9e:	9e af       	std	Y+62, r25	; 0x3e
     ea0:	8d af       	std	Y+61, r24	; 0x3d
     ea2:	46 c0       	rjmp	.+140    	; 0xf30 <create_password+0x31e>
	else if (__tmp > 65535)
     ea4:	fe 01       	movw	r30, r28
     ea6:	ff 96       	adiw	r30, 0x3f	; 63
     ea8:	60 81       	ld	r22, Z
     eaa:	71 81       	ldd	r23, Z+1	; 0x01
     eac:	82 81       	ldd	r24, Z+2	; 0x02
     eae:	93 81       	ldd	r25, Z+3	; 0x03
     eb0:	20 e0       	ldi	r18, 0x00	; 0
     eb2:	3f ef       	ldi	r19, 0xFF	; 255
     eb4:	4f e7       	ldi	r20, 0x7F	; 127
     eb6:	57 e4       	ldi	r21, 0x47	; 71
     eb8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     ebc:	18 16       	cp	r1, r24
     ebe:	64 f5       	brge	.+88     	; 0xf18 <create_password+0x306>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ec0:	fe 01       	movw	r30, r28
     ec2:	ed 5b       	subi	r30, 0xBD	; 189
     ec4:	ff 4f       	sbci	r31, 0xFF	; 255
     ec6:	60 81       	ld	r22, Z
     ec8:	71 81       	ldd	r23, Z+1	; 0x01
     eca:	82 81       	ldd	r24, Z+2	; 0x02
     ecc:	93 81       	ldd	r25, Z+3	; 0x03
     ece:	20 e0       	ldi	r18, 0x00	; 0
     ed0:	30 e0       	ldi	r19, 0x00	; 0
     ed2:	40 e2       	ldi	r20, 0x20	; 32
     ed4:	51 e4       	ldi	r21, 0x41	; 65
     ed6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     eda:	dc 01       	movw	r26, r24
     edc:	cb 01       	movw	r24, r22
     ede:	bc 01       	movw	r22, r24
     ee0:	cd 01       	movw	r24, r26
     ee2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ee6:	dc 01       	movw	r26, r24
     ee8:	cb 01       	movw	r24, r22
     eea:	9e af       	std	Y+62, r25	; 0x3e
     eec:	8d af       	std	Y+61, r24	; 0x3d
     eee:	0f c0       	rjmp	.+30     	; 0xf0e <create_password+0x2fc>
     ef0:	88 ec       	ldi	r24, 0xC8	; 200
     ef2:	90 e0       	ldi	r25, 0x00	; 0
     ef4:	9c af       	std	Y+60, r25	; 0x3c
     ef6:	8b af       	std	Y+59, r24	; 0x3b
     ef8:	8b ad       	ldd	r24, Y+59	; 0x3b
     efa:	9c ad       	ldd	r25, Y+60	; 0x3c
     efc:	01 97       	sbiw	r24, 0x01	; 1
     efe:	f1 f7       	brne	.-4      	; 0xefc <create_password+0x2ea>
     f00:	9c af       	std	Y+60, r25	; 0x3c
     f02:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f04:	8d ad       	ldd	r24, Y+61	; 0x3d
     f06:	9e ad       	ldd	r25, Y+62	; 0x3e
     f08:	01 97       	sbiw	r24, 0x01	; 1
     f0a:	9e af       	std	Y+62, r25	; 0x3e
     f0c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f0e:	8d ad       	ldd	r24, Y+61	; 0x3d
     f10:	9e ad       	ldd	r25, Y+62	; 0x3e
     f12:	00 97       	sbiw	r24, 0x00	; 0
     f14:	69 f7       	brne	.-38     	; 0xef0 <create_password+0x2de>
     f16:	16 c0       	rjmp	.+44     	; 0xf44 <create_password+0x332>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f18:	fe 01       	movw	r30, r28
     f1a:	ff 96       	adiw	r30, 0x3f	; 63
     f1c:	60 81       	ld	r22, Z
     f1e:	71 81       	ldd	r23, Z+1	; 0x01
     f20:	82 81       	ldd	r24, Z+2	; 0x02
     f22:	93 81       	ldd	r25, Z+3	; 0x03
     f24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f28:	dc 01       	movw	r26, r24
     f2a:	cb 01       	movw	r24, r22
     f2c:	9e af       	std	Y+62, r25	; 0x3e
     f2e:	8d af       	std	Y+61, r24	; 0x3d
     f30:	8d ad       	ldd	r24, Y+61	; 0x3d
     f32:	9e ad       	ldd	r25, Y+62	; 0x3e
     f34:	9a af       	std	Y+58, r25	; 0x3a
     f36:	89 af       	std	Y+57, r24	; 0x39
     f38:	89 ad       	ldd	r24, Y+57	; 0x39
     f3a:	9a ad       	ldd	r25, Y+58	; 0x3a
     f3c:	01 97       	sbiw	r24, 0x01	; 1
     f3e:	f1 f7       	brne	.-4      	; 0xf3c <create_password+0x32a>
     f40:	9a af       	std	Y+58, r25	; 0x3a
     f42:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(500);
	/* Prompting the user to re-enter the new password */
	LCD_displayString("Re-Enter Pass:");
     f44:	82 e7       	ldi	r24, 0x72	; 114
     f46:	90 e0       	ldi	r25, 0x00	; 0
     f48:	0e 94 48 17 	call	0x2e90	; 0x2e90 <LCD_displayString>
	LCD_moveCursor(1, 0);
     f4c:	81 e0       	ldi	r24, 0x01	; 1
     f4e:	60 e0       	ldi	r22, 0x00	; 0
     f50:	0e 94 71 17 	call	0x2ee2	; 0x2ee2 <LCD_moveCursor>
	/* Getting the user input */
	for (i = 0; i < PASSWORD_LENGTH;) {
     f54:	fe 01       	movw	r30, r28
     f56:	ea 5a       	subi	r30, 0xAA	; 170
     f58:	ff 4f       	sbci	r31, 0xFF	; 255
     f5a:	10 82       	st	Z, r1
     f5c:	9d c0       	rjmp	.+314    	; 0x1098 <create_password+0x486>
		keyPressed = KEYPAD_getPressedKey();
     f5e:	0e 94 4a 12 	call	0x2494	; 0x2494 <KEYPAD_getPressedKey>
     f62:	fe 01       	movw	r30, r28
     f64:	eb 5a       	subi	r30, 0xAB	; 171
     f66:	ff 4f       	sbci	r31, 0xFF	; 255
     f68:	80 83       	st	Z, r24
		if (keyPressed >= 0 && keyPressed <= 9) {
     f6a:	fe 01       	movw	r30, r28
     f6c:	eb 5a       	subi	r30, 0xAB	; 171
     f6e:	ff 4f       	sbci	r31, 0xFF	; 255
     f70:	80 81       	ld	r24, Z
     f72:	8a 30       	cpi	r24, 0x0A	; 10
     f74:	08 f0       	brcs	.+2      	; 0xf78 <create_password+0x366>
     f76:	90 c0       	rjmp	.+288    	; 0x1098 <create_password+0x486>
			/* Displaying an asterisk to mask the password */
			LCD_displayString("*");
     f78:	80 e7       	ldi	r24, 0x70	; 112
     f7a:	90 e0       	ldi	r25, 0x00	; 0
     f7c:	0e 94 48 17 	call	0x2e90	; 0x2e90 <LCD_displayString>
			secondPassword[i] = keyPressed;
     f80:	fe 01       	movw	r30, r28
     f82:	ea 5a       	subi	r30, 0xAA	; 170
     f84:	ff 4f       	sbci	r31, 0xFF	; 255
     f86:	80 81       	ld	r24, Z
     f88:	28 2f       	mov	r18, r24
     f8a:	30 e0       	ldi	r19, 0x00	; 0
     f8c:	ce 01       	movw	r24, r28
     f8e:	81 5a       	subi	r24, 0xA1	; 161
     f90:	9f 4f       	sbci	r25, 0xFF	; 255
     f92:	dc 01       	movw	r26, r24
     f94:	a2 0f       	add	r26, r18
     f96:	b3 1f       	adc	r27, r19
     f98:	fe 01       	movw	r30, r28
     f9a:	eb 5a       	subi	r30, 0xAB	; 171
     f9c:	ff 4f       	sbci	r31, 0xFF	; 255
     f9e:	80 81       	ld	r24, Z
     fa0:	8c 93       	st	X, r24
     fa2:	80 e0       	ldi	r24, 0x00	; 0
     fa4:	90 e0       	ldi	r25, 0x00	; 0
     fa6:	aa ef       	ldi	r26, 0xFA	; 250
     fa8:	b3 e4       	ldi	r27, 0x43	; 67
     faa:	8d ab       	std	Y+53, r24	; 0x35
     fac:	9e ab       	std	Y+54, r25	; 0x36
     fae:	af ab       	std	Y+55, r26	; 0x37
     fb0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fb2:	6d a9       	ldd	r22, Y+53	; 0x35
     fb4:	7e a9       	ldd	r23, Y+54	; 0x36
     fb6:	8f a9       	ldd	r24, Y+55	; 0x37
     fb8:	98 ad       	ldd	r25, Y+56	; 0x38
     fba:	20 e0       	ldi	r18, 0x00	; 0
     fbc:	30 e0       	ldi	r19, 0x00	; 0
     fbe:	4a ef       	ldi	r20, 0xFA	; 250
     fc0:	54 e4       	ldi	r21, 0x44	; 68
     fc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fc6:	dc 01       	movw	r26, r24
     fc8:	cb 01       	movw	r24, r22
     fca:	89 ab       	std	Y+49, r24	; 0x31
     fcc:	9a ab       	std	Y+50, r25	; 0x32
     fce:	ab ab       	std	Y+51, r26	; 0x33
     fd0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     fd2:	69 a9       	ldd	r22, Y+49	; 0x31
     fd4:	7a a9       	ldd	r23, Y+50	; 0x32
     fd6:	8b a9       	ldd	r24, Y+51	; 0x33
     fd8:	9c a9       	ldd	r25, Y+52	; 0x34
     fda:	20 e0       	ldi	r18, 0x00	; 0
     fdc:	30 e0       	ldi	r19, 0x00	; 0
     fde:	40 e8       	ldi	r20, 0x80	; 128
     fe0:	5f e3       	ldi	r21, 0x3F	; 63
     fe2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     fe6:	88 23       	and	r24, r24
     fe8:	2c f4       	brge	.+10     	; 0xff4 <create_password+0x3e2>
		__ticks = 1;
     fea:	81 e0       	ldi	r24, 0x01	; 1
     fec:	90 e0       	ldi	r25, 0x00	; 0
     fee:	98 ab       	std	Y+48, r25	; 0x30
     ff0:	8f a7       	std	Y+47, r24	; 0x2f
     ff2:	3f c0       	rjmp	.+126    	; 0x1072 <create_password+0x460>
	else if (__tmp > 65535)
     ff4:	69 a9       	ldd	r22, Y+49	; 0x31
     ff6:	7a a9       	ldd	r23, Y+50	; 0x32
     ff8:	8b a9       	ldd	r24, Y+51	; 0x33
     ffa:	9c a9       	ldd	r25, Y+52	; 0x34
     ffc:	20 e0       	ldi	r18, 0x00	; 0
     ffe:	3f ef       	ldi	r19, 0xFF	; 255
    1000:	4f e7       	ldi	r20, 0x7F	; 127
    1002:	57 e4       	ldi	r21, 0x47	; 71
    1004:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1008:	18 16       	cp	r1, r24
    100a:	4c f5       	brge	.+82     	; 0x105e <create_password+0x44c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    100c:	6d a9       	ldd	r22, Y+53	; 0x35
    100e:	7e a9       	ldd	r23, Y+54	; 0x36
    1010:	8f a9       	ldd	r24, Y+55	; 0x37
    1012:	98 ad       	ldd	r25, Y+56	; 0x38
    1014:	20 e0       	ldi	r18, 0x00	; 0
    1016:	30 e0       	ldi	r19, 0x00	; 0
    1018:	40 e2       	ldi	r20, 0x20	; 32
    101a:	51 e4       	ldi	r21, 0x41	; 65
    101c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1020:	dc 01       	movw	r26, r24
    1022:	cb 01       	movw	r24, r22
    1024:	bc 01       	movw	r22, r24
    1026:	cd 01       	movw	r24, r26
    1028:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    102c:	dc 01       	movw	r26, r24
    102e:	cb 01       	movw	r24, r22
    1030:	98 ab       	std	Y+48, r25	; 0x30
    1032:	8f a7       	std	Y+47, r24	; 0x2f
    1034:	0f c0       	rjmp	.+30     	; 0x1054 <create_password+0x442>
    1036:	88 ec       	ldi	r24, 0xC8	; 200
    1038:	90 e0       	ldi	r25, 0x00	; 0
    103a:	9e a7       	std	Y+46, r25	; 0x2e
    103c:	8d a7       	std	Y+45, r24	; 0x2d
    103e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1040:	9e a5       	ldd	r25, Y+46	; 0x2e
    1042:	01 97       	sbiw	r24, 0x01	; 1
    1044:	f1 f7       	brne	.-4      	; 0x1042 <create_password+0x430>
    1046:	9e a7       	std	Y+46, r25	; 0x2e
    1048:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    104a:	8f a5       	ldd	r24, Y+47	; 0x2f
    104c:	98 a9       	ldd	r25, Y+48	; 0x30
    104e:	01 97       	sbiw	r24, 0x01	; 1
    1050:	98 ab       	std	Y+48, r25	; 0x30
    1052:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1054:	8f a5       	ldd	r24, Y+47	; 0x2f
    1056:	98 a9       	ldd	r25, Y+48	; 0x30
    1058:	00 97       	sbiw	r24, 0x00	; 0
    105a:	69 f7       	brne	.-38     	; 0x1036 <create_password+0x424>
    105c:	14 c0       	rjmp	.+40     	; 0x1086 <create_password+0x474>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    105e:	69 a9       	ldd	r22, Y+49	; 0x31
    1060:	7a a9       	ldd	r23, Y+50	; 0x32
    1062:	8b a9       	ldd	r24, Y+51	; 0x33
    1064:	9c a9       	ldd	r25, Y+52	; 0x34
    1066:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    106a:	dc 01       	movw	r26, r24
    106c:	cb 01       	movw	r24, r22
    106e:	98 ab       	std	Y+48, r25	; 0x30
    1070:	8f a7       	std	Y+47, r24	; 0x2f
    1072:	8f a5       	ldd	r24, Y+47	; 0x2f
    1074:	98 a9       	ldd	r25, Y+48	; 0x30
    1076:	9c a7       	std	Y+44, r25	; 0x2c
    1078:	8b a7       	std	Y+43, r24	; 0x2b
    107a:	8b a5       	ldd	r24, Y+43	; 0x2b
    107c:	9c a5       	ldd	r25, Y+44	; 0x2c
    107e:	01 97       	sbiw	r24, 0x01	; 1
    1080:	f1 f7       	brne	.-4      	; 0x107e <create_password+0x46c>
    1082:	9c a7       	std	Y+44, r25	; 0x2c
    1084:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(500);
			i++;
    1086:	de 01       	movw	r26, r28
    1088:	aa 5a       	subi	r26, 0xAA	; 170
    108a:	bf 4f       	sbci	r27, 0xFF	; 255
    108c:	fe 01       	movw	r30, r28
    108e:	ea 5a       	subi	r30, 0xAA	; 170
    1090:	ff 4f       	sbci	r31, 0xFF	; 255
    1092:	80 81       	ld	r24, Z
    1094:	8f 5f       	subi	r24, 0xFF	; 255
    1096:	8c 93       	st	X, r24
	_delay_ms(500);
	/* Prompting the user to re-enter the new password */
	LCD_displayString("Re-Enter Pass:");
	LCD_moveCursor(1, 0);
	/* Getting the user input */
	for (i = 0; i < PASSWORD_LENGTH;) {
    1098:	fe 01       	movw	r30, r28
    109a:	ea 5a       	subi	r30, 0xAA	; 170
    109c:	ff 4f       	sbci	r31, 0xFF	; 255
    109e:	80 81       	ld	r24, Z
    10a0:	85 30       	cpi	r24, 0x05	; 5
    10a2:	08 f4       	brcc	.+2      	; 0x10a6 <create_password+0x494>
    10a4:	5c cf       	rjmp	.-328    	; 0xf5e <create_password+0x34c>
			secondPassword[i] = keyPressed;
			_delay_ms(500);
			i++;
		}
	}
	secondPassword[PASSWORD_LENGTH] = '#';
    10a6:	fe 01       	movw	r30, r28
    10a8:	e1 5a       	subi	r30, 0xA1	; 161
    10aa:	ff 4f       	sbci	r31, 0xFF	; 255
    10ac:	83 e2       	ldi	r24, 0x23	; 35
    10ae:	85 83       	std	Z+5, r24	; 0x05
	secondPassword[PASSWORD_LENGTH + 1] = '\0';
    10b0:	fe 01       	movw	r30, r28
    10b2:	e1 5a       	subi	r30, 0xA1	; 161
    10b4:	ff 4f       	sbci	r31, 0xFF	; 255
    10b6:	16 82       	std	Z+6, r1	; 0x06
	while (KEYPAD_getPressedKey() != '=');
    10b8:	0e 94 4a 12 	call	0x2494	; 0x2494 <KEYPAD_getPressedKey>
    10bc:	8d 33       	cpi	r24, 0x3D	; 61
    10be:	e1 f7       	brne	.-8      	; 0x10b8 <create_password+0x4a6>

	while (UART_receiveByte() != CONTROL_READY_UART);/* waiting for a ready signal from the control unit */
    10c0:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <UART_receiveByte>
    10c4:	8f 3f       	cpi	r24, 0xFF	; 255
    10c6:	e1 f7       	brne	.-8      	; 0x10c0 <create_password+0x4ae>
	UART_sendString(firstPassword);
    10c8:	ce 01       	movw	r24, r28
    10ca:	88 5a       	subi	r24, 0xA8	; 168
    10cc:	9f 4f       	sbci	r25, 0xFF	; 255
    10ce:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <UART_sendString>
	while (UART_receiveByte() != CONTROL_READY_UART);/* waiting for a ready signal from the control unit */
    10d2:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <UART_receiveByte>
    10d6:	8f 3f       	cpi	r24, 0xFF	; 255
    10d8:	e1 f7       	brne	.-8      	; 0x10d2 <create_password+0x4c0>
	UART_sendString(secondPassword);
    10da:	ce 01       	movw	r24, r28
    10dc:	81 5a       	subi	r24, 0xA1	; 161
    10de:	9f 4f       	sbci	r25, 0xFF	; 255
    10e0:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <UART_sendString>
	LCD_clearScreen();
    10e4:	0e 94 ef 17 	call	0x2fde	; 0x2fde <LCD_clearScreen>
    10e8:	80 e0       	ldi	r24, 0x00	; 0
    10ea:	90 e0       	ldi	r25, 0x00	; 0
    10ec:	aa e7       	ldi	r26, 0x7A	; 122
    10ee:	b4 e4       	ldi	r27, 0x44	; 68
    10f0:	8f a3       	std	Y+39, r24	; 0x27
    10f2:	98 a7       	std	Y+40, r25	; 0x28
    10f4:	a9 a7       	std	Y+41, r26	; 0x29
    10f6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10f8:	6f a1       	ldd	r22, Y+39	; 0x27
    10fa:	78 a5       	ldd	r23, Y+40	; 0x28
    10fc:	89 a5       	ldd	r24, Y+41	; 0x29
    10fe:	9a a5       	ldd	r25, Y+42	; 0x2a
    1100:	20 e0       	ldi	r18, 0x00	; 0
    1102:	30 e0       	ldi	r19, 0x00	; 0
    1104:	4a ef       	ldi	r20, 0xFA	; 250
    1106:	54 e4       	ldi	r21, 0x44	; 68
    1108:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    110c:	dc 01       	movw	r26, r24
    110e:	cb 01       	movw	r24, r22
    1110:	8b a3       	std	Y+35, r24	; 0x23
    1112:	9c a3       	std	Y+36, r25	; 0x24
    1114:	ad a3       	std	Y+37, r26	; 0x25
    1116:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1118:	6b a1       	ldd	r22, Y+35	; 0x23
    111a:	7c a1       	ldd	r23, Y+36	; 0x24
    111c:	8d a1       	ldd	r24, Y+37	; 0x25
    111e:	9e a1       	ldd	r25, Y+38	; 0x26
    1120:	20 e0       	ldi	r18, 0x00	; 0
    1122:	30 e0       	ldi	r19, 0x00	; 0
    1124:	40 e8       	ldi	r20, 0x80	; 128
    1126:	5f e3       	ldi	r21, 0x3F	; 63
    1128:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    112c:	88 23       	and	r24, r24
    112e:	2c f4       	brge	.+10     	; 0x113a <create_password+0x528>
		__ticks = 1;
    1130:	81 e0       	ldi	r24, 0x01	; 1
    1132:	90 e0       	ldi	r25, 0x00	; 0
    1134:	9a a3       	std	Y+34, r25	; 0x22
    1136:	89 a3       	std	Y+33, r24	; 0x21
    1138:	3f c0       	rjmp	.+126    	; 0x11b8 <create_password+0x5a6>
	else if (__tmp > 65535)
    113a:	6b a1       	ldd	r22, Y+35	; 0x23
    113c:	7c a1       	ldd	r23, Y+36	; 0x24
    113e:	8d a1       	ldd	r24, Y+37	; 0x25
    1140:	9e a1       	ldd	r25, Y+38	; 0x26
    1142:	20 e0       	ldi	r18, 0x00	; 0
    1144:	3f ef       	ldi	r19, 0xFF	; 255
    1146:	4f e7       	ldi	r20, 0x7F	; 127
    1148:	57 e4       	ldi	r21, 0x47	; 71
    114a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    114e:	18 16       	cp	r1, r24
    1150:	4c f5       	brge	.+82     	; 0x11a4 <create_password+0x592>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1152:	6f a1       	ldd	r22, Y+39	; 0x27
    1154:	78 a5       	ldd	r23, Y+40	; 0x28
    1156:	89 a5       	ldd	r24, Y+41	; 0x29
    1158:	9a a5       	ldd	r25, Y+42	; 0x2a
    115a:	20 e0       	ldi	r18, 0x00	; 0
    115c:	30 e0       	ldi	r19, 0x00	; 0
    115e:	40 e2       	ldi	r20, 0x20	; 32
    1160:	51 e4       	ldi	r21, 0x41	; 65
    1162:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1166:	dc 01       	movw	r26, r24
    1168:	cb 01       	movw	r24, r22
    116a:	bc 01       	movw	r22, r24
    116c:	cd 01       	movw	r24, r26
    116e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1172:	dc 01       	movw	r26, r24
    1174:	cb 01       	movw	r24, r22
    1176:	9a a3       	std	Y+34, r25	; 0x22
    1178:	89 a3       	std	Y+33, r24	; 0x21
    117a:	0f c0       	rjmp	.+30     	; 0x119a <create_password+0x588>
    117c:	88 ec       	ldi	r24, 0xC8	; 200
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	98 a3       	std	Y+32, r25	; 0x20
    1182:	8f 8f       	std	Y+31, r24	; 0x1f
    1184:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1186:	98 a1       	ldd	r25, Y+32	; 0x20
    1188:	01 97       	sbiw	r24, 0x01	; 1
    118a:	f1 f7       	brne	.-4      	; 0x1188 <create_password+0x576>
    118c:	98 a3       	std	Y+32, r25	; 0x20
    118e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1190:	89 a1       	ldd	r24, Y+33	; 0x21
    1192:	9a a1       	ldd	r25, Y+34	; 0x22
    1194:	01 97       	sbiw	r24, 0x01	; 1
    1196:	9a a3       	std	Y+34, r25	; 0x22
    1198:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    119a:	89 a1       	ldd	r24, Y+33	; 0x21
    119c:	9a a1       	ldd	r25, Y+34	; 0x22
    119e:	00 97       	sbiw	r24, 0x00	; 0
    11a0:	69 f7       	brne	.-38     	; 0x117c <create_password+0x56a>
    11a2:	14 c0       	rjmp	.+40     	; 0x11cc <create_password+0x5ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11a4:	6b a1       	ldd	r22, Y+35	; 0x23
    11a6:	7c a1       	ldd	r23, Y+36	; 0x24
    11a8:	8d a1       	ldd	r24, Y+37	; 0x25
    11aa:	9e a1       	ldd	r25, Y+38	; 0x26
    11ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11b0:	dc 01       	movw	r26, r24
    11b2:	cb 01       	movw	r24, r22
    11b4:	9a a3       	std	Y+34, r25	; 0x22
    11b6:	89 a3       	std	Y+33, r24	; 0x21
    11b8:	89 a1       	ldd	r24, Y+33	; 0x21
    11ba:	9a a1       	ldd	r25, Y+34	; 0x22
    11bc:	9e 8f       	std	Y+30, r25	; 0x1e
    11be:	8d 8f       	std	Y+29, r24	; 0x1d
    11c0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    11c2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    11c4:	01 97       	sbiw	r24, 0x01	; 1
    11c6:	f1 f7       	brne	.-4      	; 0x11c4 <create_password+0x5b2>
    11c8:	9e 8f       	std	Y+30, r25	; 0x1e
    11ca:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1000);

	UART_sendByte(HMI_READY_UART);	/* sending a ready signal to the control unit */
    11cc:	80 e0       	ldi	r24, 0x00	; 0
    11ce:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <UART_sendByte>

	matchCheck = UART_receiveByte();
    11d2:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <UART_receiveByte>
    11d6:	fe 01       	movw	r30, r28
    11d8:	e9 5a       	subi	r30, 0xA9	; 169
    11da:	ff 4f       	sbci	r31, 0xFF	; 255
    11dc:	80 83       	st	Z, r24

	if (matchCheck) {
    11de:	fe 01       	movw	r30, r28
    11e0:	e9 5a       	subi	r30, 0xA9	; 169
    11e2:	ff 4f       	sbci	r31, 0xFF	; 255
    11e4:	80 81       	ld	r24, Z
    11e6:	88 23       	and	r24, r24
    11e8:	09 f4       	brne	.+2      	; 0x11ec <create_password+0x5da>
    11ea:	79 c0       	rjmp	.+242    	; 0x12de <create_password+0x6cc>
		/* Displaying a message to indicate that the password has been created */
		LCD_clearScreen();
    11ec:	0e 94 ef 17 	call	0x2fde	; 0x2fde <LCD_clearScreen>
		LCD_displayString("Pass Created");
    11f0:	81 e8       	ldi	r24, 0x81	; 129
    11f2:	90 e0       	ldi	r25, 0x00	; 0
    11f4:	0e 94 48 17 	call	0x2e90	; 0x2e90 <LCD_displayString>
    11f8:	80 e0       	ldi	r24, 0x00	; 0
    11fa:	90 e0       	ldi	r25, 0x00	; 0
    11fc:	aa e7       	ldi	r26, 0x7A	; 122
    11fe:	b4 e4       	ldi	r27, 0x44	; 68
    1200:	89 8f       	std	Y+25, r24	; 0x19
    1202:	9a 8f       	std	Y+26, r25	; 0x1a
    1204:	ab 8f       	std	Y+27, r26	; 0x1b
    1206:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1208:	69 8d       	ldd	r22, Y+25	; 0x19
    120a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    120c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    120e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1210:	20 e0       	ldi	r18, 0x00	; 0
    1212:	30 e0       	ldi	r19, 0x00	; 0
    1214:	4a ef       	ldi	r20, 0xFA	; 250
    1216:	54 e4       	ldi	r21, 0x44	; 68
    1218:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    121c:	dc 01       	movw	r26, r24
    121e:	cb 01       	movw	r24, r22
    1220:	8d 8b       	std	Y+21, r24	; 0x15
    1222:	9e 8b       	std	Y+22, r25	; 0x16
    1224:	af 8b       	std	Y+23, r26	; 0x17
    1226:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1228:	6d 89       	ldd	r22, Y+21	; 0x15
    122a:	7e 89       	ldd	r23, Y+22	; 0x16
    122c:	8f 89       	ldd	r24, Y+23	; 0x17
    122e:	98 8d       	ldd	r25, Y+24	; 0x18
    1230:	20 e0       	ldi	r18, 0x00	; 0
    1232:	30 e0       	ldi	r19, 0x00	; 0
    1234:	40 e8       	ldi	r20, 0x80	; 128
    1236:	5f e3       	ldi	r21, 0x3F	; 63
    1238:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    123c:	88 23       	and	r24, r24
    123e:	2c f4       	brge	.+10     	; 0x124a <create_password+0x638>
		__ticks = 1;
    1240:	81 e0       	ldi	r24, 0x01	; 1
    1242:	90 e0       	ldi	r25, 0x00	; 0
    1244:	9c 8b       	std	Y+20, r25	; 0x14
    1246:	8b 8b       	std	Y+19, r24	; 0x13
    1248:	3f c0       	rjmp	.+126    	; 0x12c8 <create_password+0x6b6>
	else if (__tmp > 65535)
    124a:	6d 89       	ldd	r22, Y+21	; 0x15
    124c:	7e 89       	ldd	r23, Y+22	; 0x16
    124e:	8f 89       	ldd	r24, Y+23	; 0x17
    1250:	98 8d       	ldd	r25, Y+24	; 0x18
    1252:	20 e0       	ldi	r18, 0x00	; 0
    1254:	3f ef       	ldi	r19, 0xFF	; 255
    1256:	4f e7       	ldi	r20, 0x7F	; 127
    1258:	57 e4       	ldi	r21, 0x47	; 71
    125a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    125e:	18 16       	cp	r1, r24
    1260:	4c f5       	brge	.+82     	; 0x12b4 <create_password+0x6a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1262:	69 8d       	ldd	r22, Y+25	; 0x19
    1264:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1266:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1268:	9c 8d       	ldd	r25, Y+28	; 0x1c
    126a:	20 e0       	ldi	r18, 0x00	; 0
    126c:	30 e0       	ldi	r19, 0x00	; 0
    126e:	40 e2       	ldi	r20, 0x20	; 32
    1270:	51 e4       	ldi	r21, 0x41	; 65
    1272:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1276:	dc 01       	movw	r26, r24
    1278:	cb 01       	movw	r24, r22
    127a:	bc 01       	movw	r22, r24
    127c:	cd 01       	movw	r24, r26
    127e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1282:	dc 01       	movw	r26, r24
    1284:	cb 01       	movw	r24, r22
    1286:	9c 8b       	std	Y+20, r25	; 0x14
    1288:	8b 8b       	std	Y+19, r24	; 0x13
    128a:	0f c0       	rjmp	.+30     	; 0x12aa <create_password+0x698>
    128c:	88 ec       	ldi	r24, 0xC8	; 200
    128e:	90 e0       	ldi	r25, 0x00	; 0
    1290:	9a 8b       	std	Y+18, r25	; 0x12
    1292:	89 8b       	std	Y+17, r24	; 0x11
    1294:	89 89       	ldd	r24, Y+17	; 0x11
    1296:	9a 89       	ldd	r25, Y+18	; 0x12
    1298:	01 97       	sbiw	r24, 0x01	; 1
    129a:	f1 f7       	brne	.-4      	; 0x1298 <create_password+0x686>
    129c:	9a 8b       	std	Y+18, r25	; 0x12
    129e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12a0:	8b 89       	ldd	r24, Y+19	; 0x13
    12a2:	9c 89       	ldd	r25, Y+20	; 0x14
    12a4:	01 97       	sbiw	r24, 0x01	; 1
    12a6:	9c 8b       	std	Y+20, r25	; 0x14
    12a8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12aa:	8b 89       	ldd	r24, Y+19	; 0x13
    12ac:	9c 89       	ldd	r25, Y+20	; 0x14
    12ae:	00 97       	sbiw	r24, 0x00	; 0
    12b0:	69 f7       	brne	.-38     	; 0x128c <create_password+0x67a>
    12b2:	8f c0       	rjmp	.+286    	; 0x13d2 <create_password+0x7c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12b4:	6d 89       	ldd	r22, Y+21	; 0x15
    12b6:	7e 89       	ldd	r23, Y+22	; 0x16
    12b8:	8f 89       	ldd	r24, Y+23	; 0x17
    12ba:	98 8d       	ldd	r25, Y+24	; 0x18
    12bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12c0:	dc 01       	movw	r26, r24
    12c2:	cb 01       	movw	r24, r22
    12c4:	9c 8b       	std	Y+20, r25	; 0x14
    12c6:	8b 8b       	std	Y+19, r24	; 0x13
    12c8:	8b 89       	ldd	r24, Y+19	; 0x13
    12ca:	9c 89       	ldd	r25, Y+20	; 0x14
    12cc:	98 8b       	std	Y+16, r25	; 0x10
    12ce:	8f 87       	std	Y+15, r24	; 0x0f
    12d0:	8f 85       	ldd	r24, Y+15	; 0x0f
    12d2:	98 89       	ldd	r25, Y+16	; 0x10
    12d4:	01 97       	sbiw	r24, 0x01	; 1
    12d6:	f1 f7       	brne	.-4      	; 0x12d4 <create_password+0x6c2>
    12d8:	98 8b       	std	Y+16, r25	; 0x10
    12da:	8f 87       	std	Y+15, r24	; 0x0f
    12dc:	7a c0       	rjmp	.+244    	; 0x13d2 <create_password+0x7c0>

	}

	else {
		/* Displaying an error message and prompting the user to enter the password again */
		LCD_clearScreen();
    12de:	0e 94 ef 17 	call	0x2fde	; 0x2fde <LCD_clearScreen>
		LCD_displayString("Not matched");
    12e2:	8e e8       	ldi	r24, 0x8E	; 142
    12e4:	90 e0       	ldi	r25, 0x00	; 0
    12e6:	0e 94 48 17 	call	0x2e90	; 0x2e90 <LCD_displayString>
    12ea:	80 e0       	ldi	r24, 0x00	; 0
    12ec:	90 e0       	ldi	r25, 0x00	; 0
    12ee:	aa e7       	ldi	r26, 0x7A	; 122
    12f0:	b4 e4       	ldi	r27, 0x44	; 68
    12f2:	8b 87       	std	Y+11, r24	; 0x0b
    12f4:	9c 87       	std	Y+12, r25	; 0x0c
    12f6:	ad 87       	std	Y+13, r26	; 0x0d
    12f8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12fa:	6b 85       	ldd	r22, Y+11	; 0x0b
    12fc:	7c 85       	ldd	r23, Y+12	; 0x0c
    12fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    1300:	9e 85       	ldd	r25, Y+14	; 0x0e
    1302:	20 e0       	ldi	r18, 0x00	; 0
    1304:	30 e0       	ldi	r19, 0x00	; 0
    1306:	4a ef       	ldi	r20, 0xFA	; 250
    1308:	54 e4       	ldi	r21, 0x44	; 68
    130a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    130e:	dc 01       	movw	r26, r24
    1310:	cb 01       	movw	r24, r22
    1312:	8f 83       	std	Y+7, r24	; 0x07
    1314:	98 87       	std	Y+8, r25	; 0x08
    1316:	a9 87       	std	Y+9, r26	; 0x09
    1318:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    131a:	6f 81       	ldd	r22, Y+7	; 0x07
    131c:	78 85       	ldd	r23, Y+8	; 0x08
    131e:	89 85       	ldd	r24, Y+9	; 0x09
    1320:	9a 85       	ldd	r25, Y+10	; 0x0a
    1322:	20 e0       	ldi	r18, 0x00	; 0
    1324:	30 e0       	ldi	r19, 0x00	; 0
    1326:	40 e8       	ldi	r20, 0x80	; 128
    1328:	5f e3       	ldi	r21, 0x3F	; 63
    132a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    132e:	88 23       	and	r24, r24
    1330:	2c f4       	brge	.+10     	; 0x133c <create_password+0x72a>
		__ticks = 1;
    1332:	81 e0       	ldi	r24, 0x01	; 1
    1334:	90 e0       	ldi	r25, 0x00	; 0
    1336:	9e 83       	std	Y+6, r25	; 0x06
    1338:	8d 83       	std	Y+5, r24	; 0x05
    133a:	3f c0       	rjmp	.+126    	; 0x13ba <create_password+0x7a8>
	else if (__tmp > 65535)
    133c:	6f 81       	ldd	r22, Y+7	; 0x07
    133e:	78 85       	ldd	r23, Y+8	; 0x08
    1340:	89 85       	ldd	r24, Y+9	; 0x09
    1342:	9a 85       	ldd	r25, Y+10	; 0x0a
    1344:	20 e0       	ldi	r18, 0x00	; 0
    1346:	3f ef       	ldi	r19, 0xFF	; 255
    1348:	4f e7       	ldi	r20, 0x7F	; 127
    134a:	57 e4       	ldi	r21, 0x47	; 71
    134c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1350:	18 16       	cp	r1, r24
    1352:	4c f5       	brge	.+82     	; 0x13a6 <create_password+0x794>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1354:	6b 85       	ldd	r22, Y+11	; 0x0b
    1356:	7c 85       	ldd	r23, Y+12	; 0x0c
    1358:	8d 85       	ldd	r24, Y+13	; 0x0d
    135a:	9e 85       	ldd	r25, Y+14	; 0x0e
    135c:	20 e0       	ldi	r18, 0x00	; 0
    135e:	30 e0       	ldi	r19, 0x00	; 0
    1360:	40 e2       	ldi	r20, 0x20	; 32
    1362:	51 e4       	ldi	r21, 0x41	; 65
    1364:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1368:	dc 01       	movw	r26, r24
    136a:	cb 01       	movw	r24, r22
    136c:	bc 01       	movw	r22, r24
    136e:	cd 01       	movw	r24, r26
    1370:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1374:	dc 01       	movw	r26, r24
    1376:	cb 01       	movw	r24, r22
    1378:	9e 83       	std	Y+6, r25	; 0x06
    137a:	8d 83       	std	Y+5, r24	; 0x05
    137c:	0f c0       	rjmp	.+30     	; 0x139c <create_password+0x78a>
    137e:	88 ec       	ldi	r24, 0xC8	; 200
    1380:	90 e0       	ldi	r25, 0x00	; 0
    1382:	9c 83       	std	Y+4, r25	; 0x04
    1384:	8b 83       	std	Y+3, r24	; 0x03
    1386:	8b 81       	ldd	r24, Y+3	; 0x03
    1388:	9c 81       	ldd	r25, Y+4	; 0x04
    138a:	01 97       	sbiw	r24, 0x01	; 1
    138c:	f1 f7       	brne	.-4      	; 0x138a <create_password+0x778>
    138e:	9c 83       	std	Y+4, r25	; 0x04
    1390:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1392:	8d 81       	ldd	r24, Y+5	; 0x05
    1394:	9e 81       	ldd	r25, Y+6	; 0x06
    1396:	01 97       	sbiw	r24, 0x01	; 1
    1398:	9e 83       	std	Y+6, r25	; 0x06
    139a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    139c:	8d 81       	ldd	r24, Y+5	; 0x05
    139e:	9e 81       	ldd	r25, Y+6	; 0x06
    13a0:	00 97       	sbiw	r24, 0x00	; 0
    13a2:	69 f7       	brne	.-38     	; 0x137e <create_password+0x76c>
    13a4:	14 c0       	rjmp	.+40     	; 0x13ce <create_password+0x7bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13a6:	6f 81       	ldd	r22, Y+7	; 0x07
    13a8:	78 85       	ldd	r23, Y+8	; 0x08
    13aa:	89 85       	ldd	r24, Y+9	; 0x09
    13ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    13ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13b2:	dc 01       	movw	r26, r24
    13b4:	cb 01       	movw	r24, r22
    13b6:	9e 83       	std	Y+6, r25	; 0x06
    13b8:	8d 83       	std	Y+5, r24	; 0x05
    13ba:	8d 81       	ldd	r24, Y+5	; 0x05
    13bc:	9e 81       	ldd	r25, Y+6	; 0x06
    13be:	9a 83       	std	Y+2, r25	; 0x02
    13c0:	89 83       	std	Y+1, r24	; 0x01
    13c2:	89 81       	ldd	r24, Y+1	; 0x01
    13c4:	9a 81       	ldd	r25, Y+2	; 0x02
    13c6:	01 97       	sbiw	r24, 0x01	; 1
    13c8:	f1 f7       	brne	.-4      	; 0x13c6 <create_password+0x7b4>
    13ca:	9a 83       	std	Y+2, r25	; 0x02
    13cc:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1000);
		create_password();
    13ce:	0e 94 09 06 	call	0xc12	; 0xc12 <create_password>
	}

}
    13d2:	cb 59       	subi	r28, 0x9B	; 155
    13d4:	df 4f       	sbci	r29, 0xFF	; 255
    13d6:	0f b6       	in	r0, 0x3f	; 63
    13d8:	f8 94       	cli
    13da:	de bf       	out	0x3e, r29	; 62
    13dc:	0f be       	out	0x3f, r0	; 63
    13de:	cd bf       	out	0x3d, r28	; 61
    13e0:	cf 91       	pop	r28
    13e2:	df 91       	pop	r29
    13e4:	1f 91       	pop	r17
    13e6:	0f 91       	pop	r16
    13e8:	08 95       	ret

000013ea <open_door>:
 * Parameters: None
 *
 * Returns: None
 */

void open_door(void) {
    13ea:	df 93       	push	r29
    13ec:	cf 93       	push	r28
    13ee:	cd b7       	in	r28, 0x3d	; 61
    13f0:	de b7       	in	r29, 0x3e	; 62
    13f2:	a6 97       	sbiw	r28, 0x26	; 38
    13f4:	0f b6       	in	r0, 0x3f	; 63
    13f6:	f8 94       	cli
    13f8:	de bf       	out	0x3e, r29	; 62
    13fa:	0f be       	out	0x3f, r0	; 63
    13fc:	cd bf       	out	0x3d, r28	; 61
	uint8 matchCheck;
	uint8 i;
	uint8 keyPressed;

	/* Prompting the user to enter a new password */
	LCD_clearScreen();
    13fe:	0e 94 ef 17 	call	0x2fde	; 0x2fde <LCD_clearScreen>
	LCD_displayString("Enter Password:");
    1402:	80 e6       	ldi	r24, 0x60	; 96
    1404:	90 e0       	ldi	r25, 0x00	; 0
    1406:	0e 94 48 17 	call	0x2e90	; 0x2e90 <LCD_displayString>
	LCD_moveCursor(1, 0);
    140a:	81 e0       	ldi	r24, 0x01	; 1
    140c:	60 e0       	ldi	r22, 0x00	; 0
    140e:	0e 94 71 17 	call	0x2ee2	; 0x2ee2 <LCD_moveCursor>
	for (i = 0; i < PASSWORD_LENGTH;) {
    1412:	1e 8e       	std	Y+30, r1	; 0x1e
    1414:	8a c0       	rjmp	.+276    	; 0x152a <open_door+0x140>
		keyPressed = KEYPAD_getPressedKey();
    1416:	0e 94 4a 12 	call	0x2494	; 0x2494 <KEYPAD_getPressedKey>
    141a:	8d 8f       	std	Y+29, r24	; 0x1d
		if (keyPressed >= 0 && keyPressed <= 9) {
    141c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    141e:	8a 30       	cpi	r24, 0x0A	; 10
    1420:	08 f0       	brcs	.+2      	; 0x1424 <open_door+0x3a>
    1422:	83 c0       	rjmp	.+262    	; 0x152a <open_door+0x140>
			/* Displaying an asterisk to mask the password */
			LCD_displayString("*");
    1424:	80 e7       	ldi	r24, 0x70	; 112
    1426:	90 e0       	ldi	r25, 0x00	; 0
    1428:	0e 94 48 17 	call	0x2e90	; 0x2e90 <LCD_displayString>
			password[i] = keyPressed;
    142c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    142e:	28 2f       	mov	r18, r24
    1430:	30 e0       	ldi	r19, 0x00	; 0
    1432:	ce 01       	movw	r24, r28
    1434:	80 96       	adiw	r24, 0x20	; 32
    1436:	fc 01       	movw	r30, r24
    1438:	e2 0f       	add	r30, r18
    143a:	f3 1f       	adc	r31, r19
    143c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    143e:	80 83       	st	Z, r24
    1440:	80 e0       	ldi	r24, 0x00	; 0
    1442:	90 e0       	ldi	r25, 0x00	; 0
    1444:	aa ef       	ldi	r26, 0xFA	; 250
    1446:	b3 e4       	ldi	r27, 0x43	; 67
    1448:	89 8f       	std	Y+25, r24	; 0x19
    144a:	9a 8f       	std	Y+26, r25	; 0x1a
    144c:	ab 8f       	std	Y+27, r26	; 0x1b
    144e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1450:	69 8d       	ldd	r22, Y+25	; 0x19
    1452:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1454:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1456:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1458:	20 e0       	ldi	r18, 0x00	; 0
    145a:	30 e0       	ldi	r19, 0x00	; 0
    145c:	4a ef       	ldi	r20, 0xFA	; 250
    145e:	54 e4       	ldi	r21, 0x44	; 68
    1460:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1464:	dc 01       	movw	r26, r24
    1466:	cb 01       	movw	r24, r22
    1468:	8d 8b       	std	Y+21, r24	; 0x15
    146a:	9e 8b       	std	Y+22, r25	; 0x16
    146c:	af 8b       	std	Y+23, r26	; 0x17
    146e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1470:	6d 89       	ldd	r22, Y+21	; 0x15
    1472:	7e 89       	ldd	r23, Y+22	; 0x16
    1474:	8f 89       	ldd	r24, Y+23	; 0x17
    1476:	98 8d       	ldd	r25, Y+24	; 0x18
    1478:	20 e0       	ldi	r18, 0x00	; 0
    147a:	30 e0       	ldi	r19, 0x00	; 0
    147c:	40 e8       	ldi	r20, 0x80	; 128
    147e:	5f e3       	ldi	r21, 0x3F	; 63
    1480:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1484:	88 23       	and	r24, r24
    1486:	2c f4       	brge	.+10     	; 0x1492 <open_door+0xa8>
		__ticks = 1;
    1488:	81 e0       	ldi	r24, 0x01	; 1
    148a:	90 e0       	ldi	r25, 0x00	; 0
    148c:	9c 8b       	std	Y+20, r25	; 0x14
    148e:	8b 8b       	std	Y+19, r24	; 0x13
    1490:	3f c0       	rjmp	.+126    	; 0x1510 <open_door+0x126>
	else if (__tmp > 65535)
    1492:	6d 89       	ldd	r22, Y+21	; 0x15
    1494:	7e 89       	ldd	r23, Y+22	; 0x16
    1496:	8f 89       	ldd	r24, Y+23	; 0x17
    1498:	98 8d       	ldd	r25, Y+24	; 0x18
    149a:	20 e0       	ldi	r18, 0x00	; 0
    149c:	3f ef       	ldi	r19, 0xFF	; 255
    149e:	4f e7       	ldi	r20, 0x7F	; 127
    14a0:	57 e4       	ldi	r21, 0x47	; 71
    14a2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14a6:	18 16       	cp	r1, r24
    14a8:	4c f5       	brge	.+82     	; 0x14fc <open_door+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14aa:	69 8d       	ldd	r22, Y+25	; 0x19
    14ac:	7a 8d       	ldd	r23, Y+26	; 0x1a
    14ae:	8b 8d       	ldd	r24, Y+27	; 0x1b
    14b0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    14b2:	20 e0       	ldi	r18, 0x00	; 0
    14b4:	30 e0       	ldi	r19, 0x00	; 0
    14b6:	40 e2       	ldi	r20, 0x20	; 32
    14b8:	51 e4       	ldi	r21, 0x41	; 65
    14ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14be:	dc 01       	movw	r26, r24
    14c0:	cb 01       	movw	r24, r22
    14c2:	bc 01       	movw	r22, r24
    14c4:	cd 01       	movw	r24, r26
    14c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14ca:	dc 01       	movw	r26, r24
    14cc:	cb 01       	movw	r24, r22
    14ce:	9c 8b       	std	Y+20, r25	; 0x14
    14d0:	8b 8b       	std	Y+19, r24	; 0x13
    14d2:	0f c0       	rjmp	.+30     	; 0x14f2 <open_door+0x108>
    14d4:	88 ec       	ldi	r24, 0xC8	; 200
    14d6:	90 e0       	ldi	r25, 0x00	; 0
    14d8:	9a 8b       	std	Y+18, r25	; 0x12
    14da:	89 8b       	std	Y+17, r24	; 0x11
    14dc:	89 89       	ldd	r24, Y+17	; 0x11
    14de:	9a 89       	ldd	r25, Y+18	; 0x12
    14e0:	01 97       	sbiw	r24, 0x01	; 1
    14e2:	f1 f7       	brne	.-4      	; 0x14e0 <open_door+0xf6>
    14e4:	9a 8b       	std	Y+18, r25	; 0x12
    14e6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14e8:	8b 89       	ldd	r24, Y+19	; 0x13
    14ea:	9c 89       	ldd	r25, Y+20	; 0x14
    14ec:	01 97       	sbiw	r24, 0x01	; 1
    14ee:	9c 8b       	std	Y+20, r25	; 0x14
    14f0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14f2:	8b 89       	ldd	r24, Y+19	; 0x13
    14f4:	9c 89       	ldd	r25, Y+20	; 0x14
    14f6:	00 97       	sbiw	r24, 0x00	; 0
    14f8:	69 f7       	brne	.-38     	; 0x14d4 <open_door+0xea>
    14fa:	14 c0       	rjmp	.+40     	; 0x1524 <open_door+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14fc:	6d 89       	ldd	r22, Y+21	; 0x15
    14fe:	7e 89       	ldd	r23, Y+22	; 0x16
    1500:	8f 89       	ldd	r24, Y+23	; 0x17
    1502:	98 8d       	ldd	r25, Y+24	; 0x18
    1504:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1508:	dc 01       	movw	r26, r24
    150a:	cb 01       	movw	r24, r22
    150c:	9c 8b       	std	Y+20, r25	; 0x14
    150e:	8b 8b       	std	Y+19, r24	; 0x13
    1510:	8b 89       	ldd	r24, Y+19	; 0x13
    1512:	9c 89       	ldd	r25, Y+20	; 0x14
    1514:	98 8b       	std	Y+16, r25	; 0x10
    1516:	8f 87       	std	Y+15, r24	; 0x0f
    1518:	8f 85       	ldd	r24, Y+15	; 0x0f
    151a:	98 89       	ldd	r25, Y+16	; 0x10
    151c:	01 97       	sbiw	r24, 0x01	; 1
    151e:	f1 f7       	brne	.-4      	; 0x151c <open_door+0x132>
    1520:	98 8b       	std	Y+16, r25	; 0x10
    1522:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(500);
			i++;
    1524:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1526:	8f 5f       	subi	r24, 0xFF	; 255
    1528:	8e 8f       	std	Y+30, r24	; 0x1e

	/* Prompting the user to enter a new password */
	LCD_clearScreen();
	LCD_displayString("Enter Password:");
	LCD_moveCursor(1, 0);
	for (i = 0; i < PASSWORD_LENGTH;) {
    152a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    152c:	85 30       	cpi	r24, 0x05	; 5
    152e:	08 f4       	brcc	.+2      	; 0x1532 <open_door+0x148>
    1530:	72 cf       	rjmp	.-284    	; 0x1416 <open_door+0x2c>
			password[i] = keyPressed;
			_delay_ms(500);
			i++;
		}
	}
	password[PASSWORD_LENGTH] = '#';
    1532:	83 e2       	ldi	r24, 0x23	; 35
    1534:	8d a3       	std	Y+37, r24	; 0x25
	password[PASSWORD_LENGTH + 1] = '\0';
    1536:	1e a2       	std	Y+38, r1	; 0x26
	while (KEYPAD_getPressedKey() != '=');
    1538:	0e 94 4a 12 	call	0x2494	; 0x2494 <KEYPAD_getPressedKey>
    153c:	8d 33       	cpi	r24, 0x3D	; 61
    153e:	e1 f7       	brne	.-8      	; 0x1538 <open_door+0x14e>

	UART_sendByte(HMI_READY_UART);	/* sending a ready signal to the control unit */
    1540:	80 e0       	ldi	r24, 0x00	; 0
    1542:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <UART_sendByte>
	while (UART_receiveByte() != CONTROL_READY_UART);/* waiting for a ready signal from the control unit */
    1546:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <UART_receiveByte>
    154a:	8f 3f       	cpi	r24, 0xFF	; 255
    154c:	e1 f7       	brne	.-8      	; 0x1546 <open_door+0x15c>

	UART_sendString(password); /* sending the password to the control unit */
    154e:	ce 01       	movw	r24, r28
    1550:	80 96       	adiw	r24, 0x20	; 32
    1552:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <UART_sendString>

	UART_sendByte(HMI_READY_UART);	/* sending a ready signal to the control unit */
    1556:	80 e0       	ldi	r24, 0x00	; 0
    1558:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <UART_sendByte>
	while (UART_receiveByte() != CONTROL_READY_UART);/* waiting for a ready signal from the control unit */
    155c:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <UART_receiveByte>
    1560:	8f 3f       	cpi	r24, 0xFF	; 255
    1562:	e1 f7       	brne	.-8      	; 0x155c <open_door+0x172>

	matchCheck = UART_receiveByte(); /* receiving the result of the password match check from the control unit */
    1564:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <UART_receiveByte>
    1568:	8f 8f       	std	Y+31, r24	; 0x1f

		if (matchCheck) {
    156a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    156c:	88 23       	and	r24, r24
    156e:	39 f1       	breq	.+78     	; 0x15be <open_door+0x1d4>
			Trials = 0;
    1570:	10 92 2e 01 	sts	0x012E, r1
			/* Open the door for 15 Secs */
			g_ticks = 0;
    1574:	10 92 31 01 	sts	0x0131, r1
			LCD_clearScreen();
    1578:	0e 94 ef 17 	call	0x2fde	; 0x2fde <LCD_clearScreen>
			LCD_displayString("Door Opening");
    157c:	8a e9       	ldi	r24, 0x9A	; 154
    157e:	90 e0       	ldi	r25, 0x00	; 0
    1580:	0e 94 48 17 	call	0x2e90	; 0x2e90 <LCD_displayString>
			while (g_ticks < DOOR_OPEN_TIME/3);	/* waiting for the door opening time */
    1584:	80 91 31 01 	lds	r24, 0x0131
    1588:	85 30       	cpi	r24, 0x05	; 5
    158a:	e0 f3       	brcs	.-8      	; 0x1584 <open_door+0x19a>
			/* Hold the door for 3 Secs */
			g_ticks = 0;
    158c:	10 92 31 01 	sts	0x0131, r1
			LCD_clearScreen();
    1590:	0e 94 ef 17 	call	0x2fde	; 0x2fde <LCD_clearScreen>
			LCD_displayString("Door Open");
    1594:	87 ea       	ldi	r24, 0xA7	; 167
    1596:	90 e0       	ldi	r25, 0x00	; 0
    1598:	0e 94 48 17 	call	0x2e90	; 0x2e90 <LCD_displayString>
			while (g_ticks < DOOR_HOLD_TIME/3);	/* waiting for the door hold time */
    159c:	80 91 31 01 	lds	r24, 0x0131
    15a0:	88 23       	and	r24, r24
    15a2:	e1 f3       	breq	.-8      	; 0x159c <open_door+0x1b2>
			/* Close the door for 15 Secs */
			g_ticks = 0;
    15a4:	10 92 31 01 	sts	0x0131, r1
			LCD_clearScreen();
    15a8:	0e 94 ef 17 	call	0x2fde	; 0x2fde <LCD_clearScreen>
			LCD_displayString("Door Closing");
    15ac:	81 eb       	ldi	r24, 0xB1	; 177
    15ae:	90 e0       	ldi	r25, 0x00	; 0
    15b0:	0e 94 48 17 	call	0x2e90	; 0x2e90 <LCD_displayString>
			while (g_ticks < DOOR_CLOSE_TIME/3); /* waiting for the door closing time */
    15b4:	80 91 31 01 	lds	r24, 0x0131
    15b8:	85 30       	cpi	r24, 0x05	; 5
    15ba:	e0 f3       	brcs	.-8      	; 0x15b4 <open_door+0x1ca>
    15bc:	86 c0       	rjmp	.+268    	; 0x16ca <open_door+0x2e0>
		}

		else {
			LCD_clearScreen();
    15be:	0e 94 ef 17 	call	0x2fde	; 0x2fde <LCD_clearScreen>
			LCD_displayString("Pass Incorrect");
    15c2:	8e eb       	ldi	r24, 0xBE	; 190
    15c4:	90 e0       	ldi	r25, 0x00	; 0
    15c6:	0e 94 48 17 	call	0x2e90	; 0x2e90 <LCD_displayString>
    15ca:	80 e0       	ldi	r24, 0x00	; 0
    15cc:	90 e0       	ldi	r25, 0x00	; 0
    15ce:	aa e7       	ldi	r26, 0x7A	; 122
    15d0:	b4 e4       	ldi	r27, 0x44	; 68
    15d2:	8b 87       	std	Y+11, r24	; 0x0b
    15d4:	9c 87       	std	Y+12, r25	; 0x0c
    15d6:	ad 87       	std	Y+13, r26	; 0x0d
    15d8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15da:	6b 85       	ldd	r22, Y+11	; 0x0b
    15dc:	7c 85       	ldd	r23, Y+12	; 0x0c
    15de:	8d 85       	ldd	r24, Y+13	; 0x0d
    15e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    15e2:	20 e0       	ldi	r18, 0x00	; 0
    15e4:	30 e0       	ldi	r19, 0x00	; 0
    15e6:	4a ef       	ldi	r20, 0xFA	; 250
    15e8:	54 e4       	ldi	r21, 0x44	; 68
    15ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15ee:	dc 01       	movw	r26, r24
    15f0:	cb 01       	movw	r24, r22
    15f2:	8f 83       	std	Y+7, r24	; 0x07
    15f4:	98 87       	std	Y+8, r25	; 0x08
    15f6:	a9 87       	std	Y+9, r26	; 0x09
    15f8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    15fa:	6f 81       	ldd	r22, Y+7	; 0x07
    15fc:	78 85       	ldd	r23, Y+8	; 0x08
    15fe:	89 85       	ldd	r24, Y+9	; 0x09
    1600:	9a 85       	ldd	r25, Y+10	; 0x0a
    1602:	20 e0       	ldi	r18, 0x00	; 0
    1604:	30 e0       	ldi	r19, 0x00	; 0
    1606:	40 e8       	ldi	r20, 0x80	; 128
    1608:	5f e3       	ldi	r21, 0x3F	; 63
    160a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    160e:	88 23       	and	r24, r24
    1610:	2c f4       	brge	.+10     	; 0x161c <open_door+0x232>
		__ticks = 1;
    1612:	81 e0       	ldi	r24, 0x01	; 1
    1614:	90 e0       	ldi	r25, 0x00	; 0
    1616:	9e 83       	std	Y+6, r25	; 0x06
    1618:	8d 83       	std	Y+5, r24	; 0x05
    161a:	3f c0       	rjmp	.+126    	; 0x169a <open_door+0x2b0>
	else if (__tmp > 65535)
    161c:	6f 81       	ldd	r22, Y+7	; 0x07
    161e:	78 85       	ldd	r23, Y+8	; 0x08
    1620:	89 85       	ldd	r24, Y+9	; 0x09
    1622:	9a 85       	ldd	r25, Y+10	; 0x0a
    1624:	20 e0       	ldi	r18, 0x00	; 0
    1626:	3f ef       	ldi	r19, 0xFF	; 255
    1628:	4f e7       	ldi	r20, 0x7F	; 127
    162a:	57 e4       	ldi	r21, 0x47	; 71
    162c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1630:	18 16       	cp	r1, r24
    1632:	4c f5       	brge	.+82     	; 0x1686 <open_door+0x29c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1634:	6b 85       	ldd	r22, Y+11	; 0x0b
    1636:	7c 85       	ldd	r23, Y+12	; 0x0c
    1638:	8d 85       	ldd	r24, Y+13	; 0x0d
    163a:	9e 85       	ldd	r25, Y+14	; 0x0e
    163c:	20 e0       	ldi	r18, 0x00	; 0
    163e:	30 e0       	ldi	r19, 0x00	; 0
    1640:	40 e2       	ldi	r20, 0x20	; 32
    1642:	51 e4       	ldi	r21, 0x41	; 65
    1644:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1648:	dc 01       	movw	r26, r24
    164a:	cb 01       	movw	r24, r22
    164c:	bc 01       	movw	r22, r24
    164e:	cd 01       	movw	r24, r26
    1650:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1654:	dc 01       	movw	r26, r24
    1656:	cb 01       	movw	r24, r22
    1658:	9e 83       	std	Y+6, r25	; 0x06
    165a:	8d 83       	std	Y+5, r24	; 0x05
    165c:	0f c0       	rjmp	.+30     	; 0x167c <open_door+0x292>
    165e:	88 ec       	ldi	r24, 0xC8	; 200
    1660:	90 e0       	ldi	r25, 0x00	; 0
    1662:	9c 83       	std	Y+4, r25	; 0x04
    1664:	8b 83       	std	Y+3, r24	; 0x03
    1666:	8b 81       	ldd	r24, Y+3	; 0x03
    1668:	9c 81       	ldd	r25, Y+4	; 0x04
    166a:	01 97       	sbiw	r24, 0x01	; 1
    166c:	f1 f7       	brne	.-4      	; 0x166a <open_door+0x280>
    166e:	9c 83       	std	Y+4, r25	; 0x04
    1670:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1672:	8d 81       	ldd	r24, Y+5	; 0x05
    1674:	9e 81       	ldd	r25, Y+6	; 0x06
    1676:	01 97       	sbiw	r24, 0x01	; 1
    1678:	9e 83       	std	Y+6, r25	; 0x06
    167a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    167c:	8d 81       	ldd	r24, Y+5	; 0x05
    167e:	9e 81       	ldd	r25, Y+6	; 0x06
    1680:	00 97       	sbiw	r24, 0x00	; 0
    1682:	69 f7       	brne	.-38     	; 0x165e <open_door+0x274>
    1684:	14 c0       	rjmp	.+40     	; 0x16ae <open_door+0x2c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1686:	6f 81       	ldd	r22, Y+7	; 0x07
    1688:	78 85       	ldd	r23, Y+8	; 0x08
    168a:	89 85       	ldd	r24, Y+9	; 0x09
    168c:	9a 85       	ldd	r25, Y+10	; 0x0a
    168e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1692:	dc 01       	movw	r26, r24
    1694:	cb 01       	movw	r24, r22
    1696:	9e 83       	std	Y+6, r25	; 0x06
    1698:	8d 83       	std	Y+5, r24	; 0x05
    169a:	8d 81       	ldd	r24, Y+5	; 0x05
    169c:	9e 81       	ldd	r25, Y+6	; 0x06
    169e:	9a 83       	std	Y+2, r25	; 0x02
    16a0:	89 83       	std	Y+1, r24	; 0x01
    16a2:	89 81       	ldd	r24, Y+1	; 0x01
    16a4:	9a 81       	ldd	r25, Y+2	; 0x02
    16a6:	01 97       	sbiw	r24, 0x01	; 1
    16a8:	f1 f7       	brne	.-4      	; 0x16a6 <open_door+0x2bc>
    16aa:	9a 83       	std	Y+2, r25	; 0x02
    16ac:	89 83       	std	Y+1, r24	; 0x01

			_delay_ms(1000);

			Trials++;
    16ae:	80 91 2e 01 	lds	r24, 0x012E
    16b2:	8f 5f       	subi	r24, 0xFF	; 255
    16b4:	80 93 2e 01 	sts	0x012E, r24

			if (Trials == 3)
    16b8:	80 91 2e 01 	lds	r24, 0x012E
    16bc:	83 30       	cpi	r24, 0x03	; 3
    16be:	19 f4       	brne	.+6      	; 0x16c6 <open_door+0x2dc>
				activate_alarm_mode(); /* activating the alarm mode if the maximum number of trials has been reached */
    16c0:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <activate_alarm_mode>
    16c4:	02 c0       	rjmp	.+4      	; 0x16ca <open_door+0x2e0>

			else
				open_door(); /* allowing the user to try again if the maximum number of trials has not been reached */
    16c6:	0e 94 f5 09 	call	0x13ea	; 0x13ea <open_door>
		}
	}
    16ca:	a6 96       	adiw	r28, 0x26	; 38
    16cc:	0f b6       	in	r0, 0x3f	; 63
    16ce:	f8 94       	cli
    16d0:	de bf       	out	0x3e, r29	; 62
    16d2:	0f be       	out	0x3f, r0	; 63
    16d4:	cd bf       	out	0x3d, r28	; 61
    16d6:	cf 91       	pop	r28
    16d8:	df 91       	pop	r29
    16da:	08 95       	ret

000016dc <change_password>:
 *
 * Parameters: None
 *
 * Returns: None
 */
void change_password(void) {
    16dc:	df 93       	push	r29
    16de:	cf 93       	push	r28
    16e0:	cd b7       	in	r28, 0x3d	; 61
    16e2:	de b7       	in	r29, 0x3e	; 62
    16e4:	e4 97       	sbiw	r28, 0x34	; 52
    16e6:	0f b6       	in	r0, 0x3f	; 63
    16e8:	f8 94       	cli
    16ea:	de bf       	out	0x3e, r29	; 62
    16ec:	0f be       	out	0x3f, r0	; 63
    16ee:	cd bf       	out	0x3d, r28	; 61
	uint8 oldPassword[PASSWORD_LENGTH + 2];
	uint8 matchCheck;
	uint8 i;
	uint8 keyPressed;

	LCD_clearScreen();
    16f0:	0e 94 ef 17 	call	0x2fde	; 0x2fde <LCD_clearScreen>
	LCD_displayString("Enter Old Pass"); /* prompting the user to enter the old password */
    16f4:	8d ec       	ldi	r24, 0xCD	; 205
    16f6:	90 e0       	ldi	r25, 0x00	; 0
    16f8:	0e 94 48 17 	call	0x2e90	; 0x2e90 <LCD_displayString>
	LCD_moveCursor(1, 0);
    16fc:	81 e0       	ldi	r24, 0x01	; 1
    16fe:	60 e0       	ldi	r22, 0x00	; 0
    1700:	0e 94 71 17 	call	0x2ee2	; 0x2ee2 <LCD_moveCursor>

	for (i = 0; i < PASSWORD_LENGTH;) {
    1704:	1c a6       	std	Y+44, r1	; 0x2c
    1706:	8a c0       	rjmp	.+276    	; 0x181c <change_password+0x140>
		keyPressed = KEYPAD_getPressedKey(); /* getting the key pressed by the user */
    1708:	0e 94 4a 12 	call	0x2494	; 0x2494 <KEYPAD_getPressedKey>
    170c:	8b a7       	std	Y+43, r24	; 0x2b
		if (keyPressed >= 0 && keyPressed <= 9) {
    170e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1710:	8a 30       	cpi	r24, 0x0A	; 10
    1712:	08 f0       	brcs	.+2      	; 0x1716 <change_password+0x3a>
    1714:	83 c0       	rjmp	.+262    	; 0x181c <change_password+0x140>
			LCD_displayString("*"); /* displaying an asterisk to mask the password */
    1716:	80 e7       	ldi	r24, 0x70	; 112
    1718:	90 e0       	ldi	r25, 0x00	; 0
    171a:	0e 94 48 17 	call	0x2e90	; 0x2e90 <LCD_displayString>
			oldPassword[i] = keyPressed;
    171e:	8c a5       	ldd	r24, Y+44	; 0x2c
    1720:	28 2f       	mov	r18, r24
    1722:	30 e0       	ldi	r19, 0x00	; 0
    1724:	ce 01       	movw	r24, r28
    1726:	8e 96       	adiw	r24, 0x2e	; 46
    1728:	fc 01       	movw	r30, r24
    172a:	e2 0f       	add	r30, r18
    172c:	f3 1f       	adc	r31, r19
    172e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1730:	80 83       	st	Z, r24
    1732:	80 e0       	ldi	r24, 0x00	; 0
    1734:	90 e0       	ldi	r25, 0x00	; 0
    1736:	aa ef       	ldi	r26, 0xFA	; 250
    1738:	b3 e4       	ldi	r27, 0x43	; 67
    173a:	8f a3       	std	Y+39, r24	; 0x27
    173c:	98 a7       	std	Y+40, r25	; 0x28
    173e:	a9 a7       	std	Y+41, r26	; 0x29
    1740:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1742:	6f a1       	ldd	r22, Y+39	; 0x27
    1744:	78 a5       	ldd	r23, Y+40	; 0x28
    1746:	89 a5       	ldd	r24, Y+41	; 0x29
    1748:	9a a5       	ldd	r25, Y+42	; 0x2a
    174a:	20 e0       	ldi	r18, 0x00	; 0
    174c:	30 e0       	ldi	r19, 0x00	; 0
    174e:	4a ef       	ldi	r20, 0xFA	; 250
    1750:	54 e4       	ldi	r21, 0x44	; 68
    1752:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1756:	dc 01       	movw	r26, r24
    1758:	cb 01       	movw	r24, r22
    175a:	8b a3       	std	Y+35, r24	; 0x23
    175c:	9c a3       	std	Y+36, r25	; 0x24
    175e:	ad a3       	std	Y+37, r26	; 0x25
    1760:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1762:	6b a1       	ldd	r22, Y+35	; 0x23
    1764:	7c a1       	ldd	r23, Y+36	; 0x24
    1766:	8d a1       	ldd	r24, Y+37	; 0x25
    1768:	9e a1       	ldd	r25, Y+38	; 0x26
    176a:	20 e0       	ldi	r18, 0x00	; 0
    176c:	30 e0       	ldi	r19, 0x00	; 0
    176e:	40 e8       	ldi	r20, 0x80	; 128
    1770:	5f e3       	ldi	r21, 0x3F	; 63
    1772:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1776:	88 23       	and	r24, r24
    1778:	2c f4       	brge	.+10     	; 0x1784 <change_password+0xa8>
		__ticks = 1;
    177a:	81 e0       	ldi	r24, 0x01	; 1
    177c:	90 e0       	ldi	r25, 0x00	; 0
    177e:	9a a3       	std	Y+34, r25	; 0x22
    1780:	89 a3       	std	Y+33, r24	; 0x21
    1782:	3f c0       	rjmp	.+126    	; 0x1802 <change_password+0x126>
	else if (__tmp > 65535)
    1784:	6b a1       	ldd	r22, Y+35	; 0x23
    1786:	7c a1       	ldd	r23, Y+36	; 0x24
    1788:	8d a1       	ldd	r24, Y+37	; 0x25
    178a:	9e a1       	ldd	r25, Y+38	; 0x26
    178c:	20 e0       	ldi	r18, 0x00	; 0
    178e:	3f ef       	ldi	r19, 0xFF	; 255
    1790:	4f e7       	ldi	r20, 0x7F	; 127
    1792:	57 e4       	ldi	r21, 0x47	; 71
    1794:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1798:	18 16       	cp	r1, r24
    179a:	4c f5       	brge	.+82     	; 0x17ee <change_password+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    179c:	6f a1       	ldd	r22, Y+39	; 0x27
    179e:	78 a5       	ldd	r23, Y+40	; 0x28
    17a0:	89 a5       	ldd	r24, Y+41	; 0x29
    17a2:	9a a5       	ldd	r25, Y+42	; 0x2a
    17a4:	20 e0       	ldi	r18, 0x00	; 0
    17a6:	30 e0       	ldi	r19, 0x00	; 0
    17a8:	40 e2       	ldi	r20, 0x20	; 32
    17aa:	51 e4       	ldi	r21, 0x41	; 65
    17ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17b0:	dc 01       	movw	r26, r24
    17b2:	cb 01       	movw	r24, r22
    17b4:	bc 01       	movw	r22, r24
    17b6:	cd 01       	movw	r24, r26
    17b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17bc:	dc 01       	movw	r26, r24
    17be:	cb 01       	movw	r24, r22
    17c0:	9a a3       	std	Y+34, r25	; 0x22
    17c2:	89 a3       	std	Y+33, r24	; 0x21
    17c4:	0f c0       	rjmp	.+30     	; 0x17e4 <change_password+0x108>
    17c6:	88 ec       	ldi	r24, 0xC8	; 200
    17c8:	90 e0       	ldi	r25, 0x00	; 0
    17ca:	98 a3       	std	Y+32, r25	; 0x20
    17cc:	8f 8f       	std	Y+31, r24	; 0x1f
    17ce:	8f 8d       	ldd	r24, Y+31	; 0x1f
    17d0:	98 a1       	ldd	r25, Y+32	; 0x20
    17d2:	01 97       	sbiw	r24, 0x01	; 1
    17d4:	f1 f7       	brne	.-4      	; 0x17d2 <change_password+0xf6>
    17d6:	98 a3       	std	Y+32, r25	; 0x20
    17d8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17da:	89 a1       	ldd	r24, Y+33	; 0x21
    17dc:	9a a1       	ldd	r25, Y+34	; 0x22
    17de:	01 97       	sbiw	r24, 0x01	; 1
    17e0:	9a a3       	std	Y+34, r25	; 0x22
    17e2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17e4:	89 a1       	ldd	r24, Y+33	; 0x21
    17e6:	9a a1       	ldd	r25, Y+34	; 0x22
    17e8:	00 97       	sbiw	r24, 0x00	; 0
    17ea:	69 f7       	brne	.-38     	; 0x17c6 <change_password+0xea>
    17ec:	14 c0       	rjmp	.+40     	; 0x1816 <change_password+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17ee:	6b a1       	ldd	r22, Y+35	; 0x23
    17f0:	7c a1       	ldd	r23, Y+36	; 0x24
    17f2:	8d a1       	ldd	r24, Y+37	; 0x25
    17f4:	9e a1       	ldd	r25, Y+38	; 0x26
    17f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17fa:	dc 01       	movw	r26, r24
    17fc:	cb 01       	movw	r24, r22
    17fe:	9a a3       	std	Y+34, r25	; 0x22
    1800:	89 a3       	std	Y+33, r24	; 0x21
    1802:	89 a1       	ldd	r24, Y+33	; 0x21
    1804:	9a a1       	ldd	r25, Y+34	; 0x22
    1806:	9e 8f       	std	Y+30, r25	; 0x1e
    1808:	8d 8f       	std	Y+29, r24	; 0x1d
    180a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    180c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    180e:	01 97       	sbiw	r24, 0x01	; 1
    1810:	f1 f7       	brne	.-4      	; 0x180e <change_password+0x132>
    1812:	9e 8f       	std	Y+30, r25	; 0x1e
    1814:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(500);
			i++;
    1816:	8c a5       	ldd	r24, Y+44	; 0x2c
    1818:	8f 5f       	subi	r24, 0xFF	; 255
    181a:	8c a7       	std	Y+44, r24	; 0x2c

	LCD_clearScreen();
	LCD_displayString("Enter Old Pass"); /* prompting the user to enter the old password */
	LCD_moveCursor(1, 0);

	for (i = 0; i < PASSWORD_LENGTH;) {
    181c:	8c a5       	ldd	r24, Y+44	; 0x2c
    181e:	85 30       	cpi	r24, 0x05	; 5
    1820:	08 f4       	brcc	.+2      	; 0x1824 <change_password+0x148>
    1822:	72 cf       	rjmp	.-284    	; 0x1708 <change_password+0x2c>
			_delay_ms(500);
			i++;
		}
	}

	oldPassword[PASSWORD_LENGTH] = '#';
    1824:	83 e2       	ldi	r24, 0x23	; 35
    1826:	8b ab       	std	Y+51, r24	; 0x33
	oldPassword[PASSWORD_LENGTH + 1] = '\0';
    1828:	1c aa       	std	Y+52, r1	; 0x34
	while (KEYPAD_getPressedKey() != '=');
    182a:	0e 94 4a 12 	call	0x2494	; 0x2494 <KEYPAD_getPressedKey>
    182e:	8d 33       	cpi	r24, 0x3D	; 61
    1830:	e1 f7       	brne	.-8      	; 0x182a <change_password+0x14e>

	UART_sendByte(HMI_READY_UART); /* sending a ready signal to the control unit */
    1832:	80 e0       	ldi	r24, 0x00	; 0
    1834:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <UART_sendByte>
	while (UART_receiveByte() != CONTROL_READY_UART); /* waiting for a ready signal from the control unit */
    1838:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <UART_receiveByte>
    183c:	8f 3f       	cpi	r24, 0xFF	; 255
    183e:	e1 f7       	brne	.-8      	; 0x1838 <change_password+0x15c>

	UART_sendString(oldPassword); /* sending the old password to the control unit */
    1840:	ce 01       	movw	r24, r28
    1842:	8e 96       	adiw	r24, 0x2e	; 46
    1844:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <UART_sendString>

	UART_sendByte(HMI_READY_UART); /* sending a ready signal to the control unit */
    1848:	80 e0       	ldi	r24, 0x00	; 0
    184a:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <UART_sendByte>
	while (UART_receiveByte() != CONTROL_READY_UART); /* waiting for a ready signal from the control unit */
    184e:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <UART_receiveByte>
    1852:	8f 3f       	cpi	r24, 0xFF	; 255
    1854:	e1 f7       	brne	.-8      	; 0x184e <change_password+0x172>

	matchCheck = UART_receiveByte(); /* receiving the result of the password match check from the control unit */
    1856:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <UART_receiveByte>
    185a:	8d a7       	std	Y+45, r24	; 0x2d

	if (matchCheck) {
    185c:	8d a5       	ldd	r24, Y+45	; 0x2d
    185e:	88 23       	and	r24, r24
    1860:	09 f4       	brne	.+2      	; 0x1864 <change_password+0x188>
    1862:	7b c0       	rjmp	.+246    	; 0x195a <change_password+0x27e>
		LCD_clearScreen();
    1864:	0e 94 ef 17 	call	0x2fde	; 0x2fde <LCD_clearScreen>
		LCD_displayString("Pass Correct");
    1868:	8c ed       	ldi	r24, 0xDC	; 220
    186a:	90 e0       	ldi	r25, 0x00	; 0
    186c:	0e 94 48 17 	call	0x2e90	; 0x2e90 <LCD_displayString>
    1870:	80 e0       	ldi	r24, 0x00	; 0
    1872:	90 e0       	ldi	r25, 0x00	; 0
    1874:	aa e7       	ldi	r26, 0x7A	; 122
    1876:	b4 e4       	ldi	r27, 0x44	; 68
    1878:	89 8f       	std	Y+25, r24	; 0x19
    187a:	9a 8f       	std	Y+26, r25	; 0x1a
    187c:	ab 8f       	std	Y+27, r26	; 0x1b
    187e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1880:	69 8d       	ldd	r22, Y+25	; 0x19
    1882:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1884:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1886:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1888:	20 e0       	ldi	r18, 0x00	; 0
    188a:	30 e0       	ldi	r19, 0x00	; 0
    188c:	4a ef       	ldi	r20, 0xFA	; 250
    188e:	54 e4       	ldi	r21, 0x44	; 68
    1890:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1894:	dc 01       	movw	r26, r24
    1896:	cb 01       	movw	r24, r22
    1898:	8d 8b       	std	Y+21, r24	; 0x15
    189a:	9e 8b       	std	Y+22, r25	; 0x16
    189c:	af 8b       	std	Y+23, r26	; 0x17
    189e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    18a0:	6d 89       	ldd	r22, Y+21	; 0x15
    18a2:	7e 89       	ldd	r23, Y+22	; 0x16
    18a4:	8f 89       	ldd	r24, Y+23	; 0x17
    18a6:	98 8d       	ldd	r25, Y+24	; 0x18
    18a8:	20 e0       	ldi	r18, 0x00	; 0
    18aa:	30 e0       	ldi	r19, 0x00	; 0
    18ac:	40 e8       	ldi	r20, 0x80	; 128
    18ae:	5f e3       	ldi	r21, 0x3F	; 63
    18b0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18b4:	88 23       	and	r24, r24
    18b6:	2c f4       	brge	.+10     	; 0x18c2 <change_password+0x1e6>
		__ticks = 1;
    18b8:	81 e0       	ldi	r24, 0x01	; 1
    18ba:	90 e0       	ldi	r25, 0x00	; 0
    18bc:	9c 8b       	std	Y+20, r25	; 0x14
    18be:	8b 8b       	std	Y+19, r24	; 0x13
    18c0:	3f c0       	rjmp	.+126    	; 0x1940 <change_password+0x264>
	else if (__tmp > 65535)
    18c2:	6d 89       	ldd	r22, Y+21	; 0x15
    18c4:	7e 89       	ldd	r23, Y+22	; 0x16
    18c6:	8f 89       	ldd	r24, Y+23	; 0x17
    18c8:	98 8d       	ldd	r25, Y+24	; 0x18
    18ca:	20 e0       	ldi	r18, 0x00	; 0
    18cc:	3f ef       	ldi	r19, 0xFF	; 255
    18ce:	4f e7       	ldi	r20, 0x7F	; 127
    18d0:	57 e4       	ldi	r21, 0x47	; 71
    18d2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18d6:	18 16       	cp	r1, r24
    18d8:	4c f5       	brge	.+82     	; 0x192c <change_password+0x250>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18da:	69 8d       	ldd	r22, Y+25	; 0x19
    18dc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18de:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18e0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18e2:	20 e0       	ldi	r18, 0x00	; 0
    18e4:	30 e0       	ldi	r19, 0x00	; 0
    18e6:	40 e2       	ldi	r20, 0x20	; 32
    18e8:	51 e4       	ldi	r21, 0x41	; 65
    18ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18ee:	dc 01       	movw	r26, r24
    18f0:	cb 01       	movw	r24, r22
    18f2:	bc 01       	movw	r22, r24
    18f4:	cd 01       	movw	r24, r26
    18f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18fa:	dc 01       	movw	r26, r24
    18fc:	cb 01       	movw	r24, r22
    18fe:	9c 8b       	std	Y+20, r25	; 0x14
    1900:	8b 8b       	std	Y+19, r24	; 0x13
    1902:	0f c0       	rjmp	.+30     	; 0x1922 <change_password+0x246>
    1904:	88 ec       	ldi	r24, 0xC8	; 200
    1906:	90 e0       	ldi	r25, 0x00	; 0
    1908:	9a 8b       	std	Y+18, r25	; 0x12
    190a:	89 8b       	std	Y+17, r24	; 0x11
    190c:	89 89       	ldd	r24, Y+17	; 0x11
    190e:	9a 89       	ldd	r25, Y+18	; 0x12
    1910:	01 97       	sbiw	r24, 0x01	; 1
    1912:	f1 f7       	brne	.-4      	; 0x1910 <change_password+0x234>
    1914:	9a 8b       	std	Y+18, r25	; 0x12
    1916:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1918:	8b 89       	ldd	r24, Y+19	; 0x13
    191a:	9c 89       	ldd	r25, Y+20	; 0x14
    191c:	01 97       	sbiw	r24, 0x01	; 1
    191e:	9c 8b       	std	Y+20, r25	; 0x14
    1920:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1922:	8b 89       	ldd	r24, Y+19	; 0x13
    1924:	9c 89       	ldd	r25, Y+20	; 0x14
    1926:	00 97       	sbiw	r24, 0x00	; 0
    1928:	69 f7       	brne	.-38     	; 0x1904 <change_password+0x228>
    192a:	14 c0       	rjmp	.+40     	; 0x1954 <change_password+0x278>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    192c:	6d 89       	ldd	r22, Y+21	; 0x15
    192e:	7e 89       	ldd	r23, Y+22	; 0x16
    1930:	8f 89       	ldd	r24, Y+23	; 0x17
    1932:	98 8d       	ldd	r25, Y+24	; 0x18
    1934:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1938:	dc 01       	movw	r26, r24
    193a:	cb 01       	movw	r24, r22
    193c:	9c 8b       	std	Y+20, r25	; 0x14
    193e:	8b 8b       	std	Y+19, r24	; 0x13
    1940:	8b 89       	ldd	r24, Y+19	; 0x13
    1942:	9c 89       	ldd	r25, Y+20	; 0x14
    1944:	98 8b       	std	Y+16, r25	; 0x10
    1946:	8f 87       	std	Y+15, r24	; 0x0f
    1948:	8f 85       	ldd	r24, Y+15	; 0x0f
    194a:	98 89       	ldd	r25, Y+16	; 0x10
    194c:	01 97       	sbiw	r24, 0x01	; 1
    194e:	f1 f7       	brne	.-4      	; 0x194c <change_password+0x270>
    1950:	98 8b       	std	Y+16, r25	; 0x10
    1952:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1000);

		create_password(); /* prompting the user to create a new password */
    1954:	0e 94 09 06 	call	0xc12	; 0xc12 <create_password>
    1958:	86 c0       	rjmp	.+268    	; 0x1a66 <change_password+0x38a>
	}

	else {
		LCD_clearScreen();
    195a:	0e 94 ef 17 	call	0x2fde	; 0x2fde <LCD_clearScreen>
		LCD_displayString("Pass Incorrect");
    195e:	8e eb       	ldi	r24, 0xBE	; 190
    1960:	90 e0       	ldi	r25, 0x00	; 0
    1962:	0e 94 48 17 	call	0x2e90	; 0x2e90 <LCD_displayString>
    1966:	80 e0       	ldi	r24, 0x00	; 0
    1968:	90 e0       	ldi	r25, 0x00	; 0
    196a:	aa e7       	ldi	r26, 0x7A	; 122
    196c:	b4 e4       	ldi	r27, 0x44	; 68
    196e:	8b 87       	std	Y+11, r24	; 0x0b
    1970:	9c 87       	std	Y+12, r25	; 0x0c
    1972:	ad 87       	std	Y+13, r26	; 0x0d
    1974:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1976:	6b 85       	ldd	r22, Y+11	; 0x0b
    1978:	7c 85       	ldd	r23, Y+12	; 0x0c
    197a:	8d 85       	ldd	r24, Y+13	; 0x0d
    197c:	9e 85       	ldd	r25, Y+14	; 0x0e
    197e:	20 e0       	ldi	r18, 0x00	; 0
    1980:	30 e0       	ldi	r19, 0x00	; 0
    1982:	4a ef       	ldi	r20, 0xFA	; 250
    1984:	54 e4       	ldi	r21, 0x44	; 68
    1986:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    198a:	dc 01       	movw	r26, r24
    198c:	cb 01       	movw	r24, r22
    198e:	8f 83       	std	Y+7, r24	; 0x07
    1990:	98 87       	std	Y+8, r25	; 0x08
    1992:	a9 87       	std	Y+9, r26	; 0x09
    1994:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1996:	6f 81       	ldd	r22, Y+7	; 0x07
    1998:	78 85       	ldd	r23, Y+8	; 0x08
    199a:	89 85       	ldd	r24, Y+9	; 0x09
    199c:	9a 85       	ldd	r25, Y+10	; 0x0a
    199e:	20 e0       	ldi	r18, 0x00	; 0
    19a0:	30 e0       	ldi	r19, 0x00	; 0
    19a2:	40 e8       	ldi	r20, 0x80	; 128
    19a4:	5f e3       	ldi	r21, 0x3F	; 63
    19a6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19aa:	88 23       	and	r24, r24
    19ac:	2c f4       	brge	.+10     	; 0x19b8 <change_password+0x2dc>
		__ticks = 1;
    19ae:	81 e0       	ldi	r24, 0x01	; 1
    19b0:	90 e0       	ldi	r25, 0x00	; 0
    19b2:	9e 83       	std	Y+6, r25	; 0x06
    19b4:	8d 83       	std	Y+5, r24	; 0x05
    19b6:	3f c0       	rjmp	.+126    	; 0x1a36 <change_password+0x35a>
	else if (__tmp > 65535)
    19b8:	6f 81       	ldd	r22, Y+7	; 0x07
    19ba:	78 85       	ldd	r23, Y+8	; 0x08
    19bc:	89 85       	ldd	r24, Y+9	; 0x09
    19be:	9a 85       	ldd	r25, Y+10	; 0x0a
    19c0:	20 e0       	ldi	r18, 0x00	; 0
    19c2:	3f ef       	ldi	r19, 0xFF	; 255
    19c4:	4f e7       	ldi	r20, 0x7F	; 127
    19c6:	57 e4       	ldi	r21, 0x47	; 71
    19c8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19cc:	18 16       	cp	r1, r24
    19ce:	4c f5       	brge	.+82     	; 0x1a22 <change_password+0x346>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19d0:	6b 85       	ldd	r22, Y+11	; 0x0b
    19d2:	7c 85       	ldd	r23, Y+12	; 0x0c
    19d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    19d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    19d8:	20 e0       	ldi	r18, 0x00	; 0
    19da:	30 e0       	ldi	r19, 0x00	; 0
    19dc:	40 e2       	ldi	r20, 0x20	; 32
    19de:	51 e4       	ldi	r21, 0x41	; 65
    19e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19e4:	dc 01       	movw	r26, r24
    19e6:	cb 01       	movw	r24, r22
    19e8:	bc 01       	movw	r22, r24
    19ea:	cd 01       	movw	r24, r26
    19ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19f0:	dc 01       	movw	r26, r24
    19f2:	cb 01       	movw	r24, r22
    19f4:	9e 83       	std	Y+6, r25	; 0x06
    19f6:	8d 83       	std	Y+5, r24	; 0x05
    19f8:	0f c0       	rjmp	.+30     	; 0x1a18 <change_password+0x33c>
    19fa:	88 ec       	ldi	r24, 0xC8	; 200
    19fc:	90 e0       	ldi	r25, 0x00	; 0
    19fe:	9c 83       	std	Y+4, r25	; 0x04
    1a00:	8b 83       	std	Y+3, r24	; 0x03
    1a02:	8b 81       	ldd	r24, Y+3	; 0x03
    1a04:	9c 81       	ldd	r25, Y+4	; 0x04
    1a06:	01 97       	sbiw	r24, 0x01	; 1
    1a08:	f1 f7       	brne	.-4      	; 0x1a06 <change_password+0x32a>
    1a0a:	9c 83       	std	Y+4, r25	; 0x04
    1a0c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a0e:	8d 81       	ldd	r24, Y+5	; 0x05
    1a10:	9e 81       	ldd	r25, Y+6	; 0x06
    1a12:	01 97       	sbiw	r24, 0x01	; 1
    1a14:	9e 83       	std	Y+6, r25	; 0x06
    1a16:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a18:	8d 81       	ldd	r24, Y+5	; 0x05
    1a1a:	9e 81       	ldd	r25, Y+6	; 0x06
    1a1c:	00 97       	sbiw	r24, 0x00	; 0
    1a1e:	69 f7       	brne	.-38     	; 0x19fa <change_password+0x31e>
    1a20:	14 c0       	rjmp	.+40     	; 0x1a4a <change_password+0x36e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a22:	6f 81       	ldd	r22, Y+7	; 0x07
    1a24:	78 85       	ldd	r23, Y+8	; 0x08
    1a26:	89 85       	ldd	r24, Y+9	; 0x09
    1a28:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a2e:	dc 01       	movw	r26, r24
    1a30:	cb 01       	movw	r24, r22
    1a32:	9e 83       	std	Y+6, r25	; 0x06
    1a34:	8d 83       	std	Y+5, r24	; 0x05
    1a36:	8d 81       	ldd	r24, Y+5	; 0x05
    1a38:	9e 81       	ldd	r25, Y+6	; 0x06
    1a3a:	9a 83       	std	Y+2, r25	; 0x02
    1a3c:	89 83       	std	Y+1, r24	; 0x01
    1a3e:	89 81       	ldd	r24, Y+1	; 0x01
    1a40:	9a 81       	ldd	r25, Y+2	; 0x02
    1a42:	01 97       	sbiw	r24, 0x01	; 1
    1a44:	f1 f7       	brne	.-4      	; 0x1a42 <change_password+0x366>
    1a46:	9a 83       	std	Y+2, r25	; 0x02
    1a48:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1000);

		Trials++; /* incrementing the number of password change trials */
    1a4a:	80 91 2e 01 	lds	r24, 0x012E
    1a4e:	8f 5f       	subi	r24, 0xFF	; 255
    1a50:	80 93 2e 01 	sts	0x012E, r24

		if (Trials == 3)
    1a54:	80 91 2e 01 	lds	r24, 0x012E
    1a58:	83 30       	cpi	r24, 0x03	; 3
    1a5a:	19 f4       	brne	.+6      	; 0x1a62 <change_password+0x386>
			activate_alarm_mode(); /* activating the alarm mode if the maximum number of trials has been reached */
    1a5c:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <activate_alarm_mode>
    1a60:	02 c0       	rjmp	.+4      	; 0x1a66 <change_password+0x38a>

		else
			change_password(); /* allowing the user to try again if the maximum number of trials has not been reached */
    1a62:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <change_password>
	}
}
    1a66:	e4 96       	adiw	r28, 0x34	; 52
    1a68:	0f b6       	in	r0, 0x3f	; 63
    1a6a:	f8 94       	cli
    1a6c:	de bf       	out	0x3e, r29	; 62
    1a6e:	0f be       	out	0x3f, r0	; 63
    1a70:	cd bf       	out	0x3d, r28	; 61
    1a72:	cf 91       	pop	r28
    1a74:	df 91       	pop	r29
    1a76:	08 95       	ret

00001a78 <activate_alarm_mode>:
 *
 * Parameters: None
 *
 * Returns: None
 */
void activate_alarm_mode(void) {
    1a78:	df 93       	push	r29
    1a7a:	cf 93       	push	r28
    1a7c:	cd b7       	in	r28, 0x3d	; 61
    1a7e:	de b7       	in	r29, 0x3e	; 62
    1a80:	2e 97       	sbiw	r28, 0x0e	; 14
    1a82:	0f b6       	in	r0, 0x3f	; 63
    1a84:	f8 94       	cli
    1a86:	de bf       	out	0x3e, r29	; 62
    1a88:	0f be       	out	0x3f, r0	; 63
    1a8a:	cd bf       	out	0x3d, r28	; 61
	/* Displaying a message to indicate that the alarm has been activated */
	LCD_clearScreen();
    1a8c:	0e 94 ef 17 	call	0x2fde	; 0x2fde <LCD_clearScreen>
	LCD_displayString("ALARM ACTIVATED!");
    1a90:	89 ee       	ldi	r24, 0xE9	; 233
    1a92:	90 e0       	ldi	r25, 0x00	; 0
    1a94:	0e 94 48 17 	call	0x2e90	; 0x2e90 <LCD_displayString>
    1a98:	80 e0       	ldi	r24, 0x00	; 0
    1a9a:	90 e0       	ldi	r25, 0x00	; 0
    1a9c:	a0 e7       	ldi	r26, 0x70	; 112
    1a9e:	b2 e4       	ldi	r27, 0x42	; 66
    1aa0:	8b 87       	std	Y+11, r24	; 0x0b
    1aa2:	9c 87       	std	Y+12, r25	; 0x0c
    1aa4:	ad 87       	std	Y+13, r26	; 0x0d
    1aa6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1aa8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1aaa:	7c 85       	ldd	r23, Y+12	; 0x0c
    1aac:	8d 85       	ldd	r24, Y+13	; 0x0d
    1aae:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ab0:	20 e0       	ldi	r18, 0x00	; 0
    1ab2:	30 e0       	ldi	r19, 0x00	; 0
    1ab4:	4a ef       	ldi	r20, 0xFA	; 250
    1ab6:	54 e4       	ldi	r21, 0x44	; 68
    1ab8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1abc:	dc 01       	movw	r26, r24
    1abe:	cb 01       	movw	r24, r22
    1ac0:	8f 83       	std	Y+7, r24	; 0x07
    1ac2:	98 87       	std	Y+8, r25	; 0x08
    1ac4:	a9 87       	std	Y+9, r26	; 0x09
    1ac6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ac8:	6f 81       	ldd	r22, Y+7	; 0x07
    1aca:	78 85       	ldd	r23, Y+8	; 0x08
    1acc:	89 85       	ldd	r24, Y+9	; 0x09
    1ace:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ad0:	20 e0       	ldi	r18, 0x00	; 0
    1ad2:	30 e0       	ldi	r19, 0x00	; 0
    1ad4:	40 e8       	ldi	r20, 0x80	; 128
    1ad6:	5f e3       	ldi	r21, 0x3F	; 63
    1ad8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1adc:	88 23       	and	r24, r24
    1ade:	2c f4       	brge	.+10     	; 0x1aea <activate_alarm_mode+0x72>
		__ticks = 1;
    1ae0:	81 e0       	ldi	r24, 0x01	; 1
    1ae2:	90 e0       	ldi	r25, 0x00	; 0
    1ae4:	9e 83       	std	Y+6, r25	; 0x06
    1ae6:	8d 83       	std	Y+5, r24	; 0x05
    1ae8:	3f c0       	rjmp	.+126    	; 0x1b68 <activate_alarm_mode+0xf0>
	else if (__tmp > 65535)
    1aea:	6f 81       	ldd	r22, Y+7	; 0x07
    1aec:	78 85       	ldd	r23, Y+8	; 0x08
    1aee:	89 85       	ldd	r24, Y+9	; 0x09
    1af0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1af2:	20 e0       	ldi	r18, 0x00	; 0
    1af4:	3f ef       	ldi	r19, 0xFF	; 255
    1af6:	4f e7       	ldi	r20, 0x7F	; 127
    1af8:	57 e4       	ldi	r21, 0x47	; 71
    1afa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1afe:	18 16       	cp	r1, r24
    1b00:	4c f5       	brge	.+82     	; 0x1b54 <activate_alarm_mode+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b02:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b04:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b06:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b08:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b0a:	20 e0       	ldi	r18, 0x00	; 0
    1b0c:	30 e0       	ldi	r19, 0x00	; 0
    1b0e:	40 e2       	ldi	r20, 0x20	; 32
    1b10:	51 e4       	ldi	r21, 0x41	; 65
    1b12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b16:	dc 01       	movw	r26, r24
    1b18:	cb 01       	movw	r24, r22
    1b1a:	bc 01       	movw	r22, r24
    1b1c:	cd 01       	movw	r24, r26
    1b1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b22:	dc 01       	movw	r26, r24
    1b24:	cb 01       	movw	r24, r22
    1b26:	9e 83       	std	Y+6, r25	; 0x06
    1b28:	8d 83       	std	Y+5, r24	; 0x05
    1b2a:	0f c0       	rjmp	.+30     	; 0x1b4a <activate_alarm_mode+0xd2>
    1b2c:	88 ec       	ldi	r24, 0xC8	; 200
    1b2e:	90 e0       	ldi	r25, 0x00	; 0
    1b30:	9c 83       	std	Y+4, r25	; 0x04
    1b32:	8b 83       	std	Y+3, r24	; 0x03
    1b34:	8b 81       	ldd	r24, Y+3	; 0x03
    1b36:	9c 81       	ldd	r25, Y+4	; 0x04
    1b38:	01 97       	sbiw	r24, 0x01	; 1
    1b3a:	f1 f7       	brne	.-4      	; 0x1b38 <activate_alarm_mode+0xc0>
    1b3c:	9c 83       	std	Y+4, r25	; 0x04
    1b3e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b40:	8d 81       	ldd	r24, Y+5	; 0x05
    1b42:	9e 81       	ldd	r25, Y+6	; 0x06
    1b44:	01 97       	sbiw	r24, 0x01	; 1
    1b46:	9e 83       	std	Y+6, r25	; 0x06
    1b48:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b4a:	8d 81       	ldd	r24, Y+5	; 0x05
    1b4c:	9e 81       	ldd	r25, Y+6	; 0x06
    1b4e:	00 97       	sbiw	r24, 0x00	; 0
    1b50:	69 f7       	brne	.-38     	; 0x1b2c <activate_alarm_mode+0xb4>
    1b52:	14 c0       	rjmp	.+40     	; 0x1b7c <activate_alarm_mode+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b54:	6f 81       	ldd	r22, Y+7	; 0x07
    1b56:	78 85       	ldd	r23, Y+8	; 0x08
    1b58:	89 85       	ldd	r24, Y+9	; 0x09
    1b5a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b60:	dc 01       	movw	r26, r24
    1b62:	cb 01       	movw	r24, r22
    1b64:	9e 83       	std	Y+6, r25	; 0x06
    1b66:	8d 83       	std	Y+5, r24	; 0x05
    1b68:	8d 81       	ldd	r24, Y+5	; 0x05
    1b6a:	9e 81       	ldd	r25, Y+6	; 0x06
    1b6c:	9a 83       	std	Y+2, r25	; 0x02
    1b6e:	89 83       	std	Y+1, r24	; 0x01
    1b70:	89 81       	ldd	r24, Y+1	; 0x01
    1b72:	9a 81       	ldd	r25, Y+2	; 0x02
    1b74:	01 97       	sbiw	r24, 0x01	; 1
    1b76:	f1 f7       	brne	.-4      	; 0x1b74 <activate_alarm_mode+0xfc>
    1b78:	9a 83       	std	Y+2, r25	; 0x02
    1b7a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(ALARM_TIME);

	/* Sending a ready signal to the control unit */
	UART_sendByte(HMI_READY_UART);
    1b7c:	80 e0       	ldi	r24, 0x00	; 0
    1b7e:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <UART_sendByte>
	while (UART_receiveByte() != CONTROL_READY_UART);
    1b82:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <UART_receiveByte>
    1b86:	8f 3f       	cpi	r24, 0xFF	; 255
    1b88:	e1 f7       	brne	.-8      	; 0x1b82 <activate_alarm_mode+0x10a>

	/* Sending a signal to the control unit to deactivate the alarm */
	UART_sendByte(0xAA);
    1b8a:	8a ea       	ldi	r24, 0xAA	; 170
    1b8c:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <UART_sendByte>

	/* Resetting the incorrect password count */
	Trials = 0;
    1b90:	10 92 2e 01 	sts	0x012E, r1
}
    1b94:	2e 96       	adiw	r28, 0x0e	; 14
    1b96:	0f b6       	in	r0, 0x3f	; 63
    1b98:	f8 94       	cli
    1b9a:	de bf       	out	0x3e, r29	; 62
    1b9c:	0f be       	out	0x3f, r0	; 63
    1b9e:	cd bf       	out	0x3d, r28	; 61
    1ba0:	cf 91       	pop	r28
    1ba2:	df 91       	pop	r29
    1ba4:	08 95       	ret

00001ba6 <timer_callback_function>:
 *
 * Parameters: None
 *
 * Returns: None
 */
void timer_callback_function(void) {
    1ba6:	df 93       	push	r29
    1ba8:	cf 93       	push	r28
    1baa:	cd b7       	in	r28, 0x3d	; 61
    1bac:	de b7       	in	r29, 0x3e	; 62
	g_ticks++;
    1bae:	80 91 31 01 	lds	r24, 0x0131
    1bb2:	8f 5f       	subi	r24, 0xFF	; 255
    1bb4:	80 93 31 01 	sts	0x0131, r24
}
    1bb8:	cf 91       	pop	r28
    1bba:	df 91       	pop	r29
    1bbc:	08 95       	ret

00001bbe <mainMenu>:
 *
 * Parameters: None
 *
 * Returns: None
 */
void mainMenu(){
    1bbe:	df 93       	push	r29
    1bc0:	cf 93       	push	r28
    1bc2:	0f 92       	push	r0
    1bc4:	cd b7       	in	r28, 0x3d	; 61
    1bc6:	de b7       	in	r29, 0x3e	; 62
	uint8_t key_pressed;

			/* Displaying options for the user */
			LCD_clearScreen();
    1bc8:	0e 94 ef 17 	call	0x2fde	; 0x2fde <LCD_clearScreen>
			LCD_displayString("+ : Open Door");
    1bcc:	8a ef       	ldi	r24, 0xFA	; 250
    1bce:	90 e0       	ldi	r25, 0x00	; 0
    1bd0:	0e 94 48 17 	call	0x2e90	; 0x2e90 <LCD_displayString>
			LCD_displayStringRowColumn(1, 0, "- : Change Pass");
    1bd4:	28 e0       	ldi	r18, 0x08	; 8
    1bd6:	31 e0       	ldi	r19, 0x01	; 1
    1bd8:	81 e0       	ldi	r24, 0x01	; 1
    1bda:	60 e0       	ldi	r22, 0x00	; 0
    1bdc:	a9 01       	movw	r20, r18
    1bde:	0e 94 b3 17 	call	0x2f66	; 0x2f66 <LCD_displayStringRowColumn>

			/* Getting the user input */
			key_pressed = KEYPAD_getPressedKey();
    1be2:	0e 94 4a 12 	call	0x2494	; 0x2494 <KEYPAD_getPressedKey>
    1be6:	89 83       	std	Y+1, r24	; 0x01

			/* Sending a ready signal to the control unit */
			UART_sendByte(HMI_READY_UART);
    1be8:	80 e0       	ldi	r24, 0x00	; 0
    1bea:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <UART_sendByte>
			while (UART_receiveByte() != CONTROL_READY_UART)
    1bee:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <UART_receiveByte>
    1bf2:	8f 3f       	cpi	r24, 0xFF	; 255
    1bf4:	e1 f7       	brne	.-8      	; 0x1bee <mainMenu+0x30>
				;

			/* Sending the user input to the control unit */
			UART_sendByte(key_pressed);
    1bf6:	89 81       	ldd	r24, Y+1	; 0x01
    1bf8:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <UART_sendByte>

			/* Handling the user input */
			if (key_pressed == '+') {
    1bfc:	89 81       	ldd	r24, Y+1	; 0x01
    1bfe:	8b 32       	cpi	r24, 0x2B	; 43
    1c00:	29 f4       	brne	.+10     	; 0x1c0c <mainMenu+0x4e>
				LCD_clearScreen();
    1c02:	0e 94 ef 17 	call	0x2fde	; 0x2fde <LCD_clearScreen>
				open_door();
    1c06:	0e 94 f5 09 	call	0x13ea	; 0x13ea <open_door>
    1c0a:	07 c0       	rjmp	.+14     	; 0x1c1a <mainMenu+0x5c>
			} else if (key_pressed == '-') {
    1c0c:	89 81       	ldd	r24, Y+1	; 0x01
    1c0e:	8d 32       	cpi	r24, 0x2D	; 45
    1c10:	21 f4       	brne	.+8      	; 0x1c1a <mainMenu+0x5c>
				LCD_clearScreen();
    1c12:	0e 94 ef 17 	call	0x2fde	; 0x2fde <LCD_clearScreen>
				change_password();
    1c16:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <change_password>
			}
}
    1c1a:	0f 90       	pop	r0
    1c1c:	cf 91       	pop	r28
    1c1e:	df 91       	pop	r29
    1c20:	08 95       	ret

00001c22 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType *Config_Ptr)
{
    1c22:	df 93       	push	r29
    1c24:	cf 93       	push	r28
    1c26:	00 d0       	rcall	.+0      	; 0x1c28 <UART_init+0x6>
    1c28:	00 d0       	rcall	.+0      	; 0x1c2a <UART_init+0x8>
    1c2a:	cd b7       	in	r28, 0x3d	; 61
    1c2c:	de b7       	in	r29, 0x3e	; 62
    1c2e:	9c 83       	std	Y+4, r25	; 0x04
    1c30:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    1c32:	1a 82       	std	Y+2, r1	; 0x02
    1c34:	19 82       	std	Y+1, r1	; 0x01

	/*Enable UART Double speed mode*/
	UCSRA = (1<<U2X);
    1c36:	eb e2       	ldi	r30, 0x2B	; 43
    1c38:	f0 e0       	ldi	r31, 0x00	; 0
    1c3a:	82 e0       	ldi	r24, 0x02	; 2
    1c3c:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * TXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For (5,6,7,8) bit data mode
	 * RXB8 & TXB8 not used for (5,6,7,8) bit data mode
	 */
	UCSRB = (1<<RXEN) | (1<<TXEN);
    1c3e:	ea e2       	ldi	r30, 0x2A	; 42
    1c40:	f0 e0       	ldi	r31, 0x00	; 0
    1c42:	88 e1       	ldi	r24, 0x18	; 24
    1c44:	80 83       	st	Z, r24
	 * UMSEL 	= 0 Asynchronous mode select
	 * UPM1:0 	= Parity data-type in Configuration structure
	 * USBS		= Stop bits data-type in Configuration structure
	 * UCSZ1:0	= Data bits data-type in Configuration structure
	 */
	UCSRC = (1<<URSEL) | ((Config_Ptr->parity)<<UPM0) | ((Config_Ptr->stop_bit)<<USBS) | ((Config_Ptr->bit_data)<<UCSZ0);
    1c46:	a0 e4       	ldi	r26, 0x40	; 64
    1c48:	b0 e0       	ldi	r27, 0x00	; 0
    1c4a:	eb 81       	ldd	r30, Y+3	; 0x03
    1c4c:	fc 81       	ldd	r31, Y+4	; 0x04
    1c4e:	81 81       	ldd	r24, Z+1	; 0x01
    1c50:	88 2f       	mov	r24, r24
    1c52:	90 e0       	ldi	r25, 0x00	; 0
    1c54:	82 95       	swap	r24
    1c56:	92 95       	swap	r25
    1c58:	90 7f       	andi	r25, 0xF0	; 240
    1c5a:	98 27       	eor	r25, r24
    1c5c:	80 7f       	andi	r24, 0xF0	; 240
    1c5e:	98 27       	eor	r25, r24
    1c60:	28 2f       	mov	r18, r24
    1c62:	20 68       	ori	r18, 0x80	; 128
    1c64:	eb 81       	ldd	r30, Y+3	; 0x03
    1c66:	fc 81       	ldd	r31, Y+4	; 0x04
    1c68:	82 81       	ldd	r24, Z+2	; 0x02
    1c6a:	88 2f       	mov	r24, r24
    1c6c:	90 e0       	ldi	r25, 0x00	; 0
    1c6e:	88 0f       	add	r24, r24
    1c70:	99 1f       	adc	r25, r25
    1c72:	88 0f       	add	r24, r24
    1c74:	99 1f       	adc	r25, r25
    1c76:	88 0f       	add	r24, r24
    1c78:	99 1f       	adc	r25, r25
    1c7a:	28 2b       	or	r18, r24
    1c7c:	eb 81       	ldd	r30, Y+3	; 0x03
    1c7e:	fc 81       	ldd	r31, Y+4	; 0x04
    1c80:	80 81       	ld	r24, Z
    1c82:	88 2f       	mov	r24, r24
    1c84:	90 e0       	ldi	r25, 0x00	; 0
    1c86:	88 0f       	add	r24, r24
    1c88:	99 1f       	adc	r25, r25
    1c8a:	82 2b       	or	r24, r18
    1c8c:	8c 93       	st	X, r24

	/* BaudRate = (F_CPU) / 8(UBRR + 1)		"UART Double speed mode"
	 * UBRR = ((F_CPU) / (BaudRate * 8)) - 1
	 */
	ubrr_value = (uint16)(F_CPU / ((Config_Ptr->baud_rate) * 8UL) - 1);
    1c8e:	eb 81       	ldd	r30, Y+3	; 0x03
    1c90:	fc 81       	ldd	r31, Y+4	; 0x04
    1c92:	83 81       	ldd	r24, Z+3	; 0x03
    1c94:	94 81       	ldd	r25, Z+4	; 0x04
    1c96:	a5 81       	ldd	r26, Z+5	; 0x05
    1c98:	b6 81       	ldd	r27, Z+6	; 0x06
    1c9a:	88 0f       	add	r24, r24
    1c9c:	99 1f       	adc	r25, r25
    1c9e:	aa 1f       	adc	r26, r26
    1ca0:	bb 1f       	adc	r27, r27
    1ca2:	88 0f       	add	r24, r24
    1ca4:	99 1f       	adc	r25, r25
    1ca6:	aa 1f       	adc	r26, r26
    1ca8:	bb 1f       	adc	r27, r27
    1caa:	88 0f       	add	r24, r24
    1cac:	99 1f       	adc	r25, r25
    1cae:	aa 1f       	adc	r26, r26
    1cb0:	bb 1f       	adc	r27, r27
    1cb2:	9c 01       	movw	r18, r24
    1cb4:	ad 01       	movw	r20, r26
    1cb6:	80 e0       	ldi	r24, 0x00	; 0
    1cb8:	92 e1       	ldi	r25, 0x12	; 18
    1cba:	aa e7       	ldi	r26, 0x7A	; 122
    1cbc:	b0 e0       	ldi	r27, 0x00	; 0
    1cbe:	bc 01       	movw	r22, r24
    1cc0:	cd 01       	movw	r24, r26
    1cc2:	0e 94 01 19 	call	0x3202	; 0x3202 <__udivmodsi4>
    1cc6:	da 01       	movw	r26, r20
    1cc8:	c9 01       	movw	r24, r18
    1cca:	01 97       	sbiw	r24, 0x01	; 1
    1ccc:	9a 83       	std	Y+2, r25	; 0x02
    1cce:	89 83       	std	Y+1, r24	; 0x01


	UBRRH = (ubrr_value>>8);		/*UBRR-High = ubrr_value shifted right by 8 bits*/
    1cd0:	e0 e4       	ldi	r30, 0x40	; 64
    1cd2:	f0 e0       	ldi	r31, 0x00	; 0
    1cd4:	89 81       	ldd	r24, Y+1	; 0x01
    1cd6:	9a 81       	ldd	r25, Y+2	; 0x02
    1cd8:	89 2f       	mov	r24, r25
    1cda:	99 27       	eor	r25, r25
    1cdc:	80 83       	st	Z, r24
	UBRRL = ubrr_value;				/*UBRR-Low = first 8 bits of ubrr_value*/
    1cde:	e9 e2       	ldi	r30, 0x29	; 41
    1ce0:	f0 e0       	ldi	r31, 0x00	; 0
    1ce2:	89 81       	ldd	r24, Y+1	; 0x01
    1ce4:	80 83       	st	Z, r24
}
    1ce6:	0f 90       	pop	r0
    1ce8:	0f 90       	pop	r0
    1cea:	0f 90       	pop	r0
    1cec:	0f 90       	pop	r0
    1cee:	cf 91       	pop	r28
    1cf0:	df 91       	pop	r29
    1cf2:	08 95       	ret

00001cf4 <UART_sendByte>:
/*
 * Description :
 * Function responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    1cf4:	df 93       	push	r29
    1cf6:	cf 93       	push	r28
    1cf8:	0f 92       	push	r0
    1cfa:	cd b7       	in	r28, 0x3d	; 61
    1cfc:	de b7       	in	r29, 0x3e	; 62
    1cfe:	89 83       	std	Y+1, r24	; 0x01
	/*Wait until the buffer is empty and ready to take new data frame*/
	while(BIT_IS_CLEAR(UCSRA, UDRE));
    1d00:	eb e2       	ldi	r30, 0x2B	; 43
    1d02:	f0 e0       	ldi	r31, 0x00	; 0
    1d04:	80 81       	ld	r24, Z
    1d06:	88 2f       	mov	r24, r24
    1d08:	90 e0       	ldi	r25, 0x00	; 0
    1d0a:	80 72       	andi	r24, 0x20	; 32
    1d0c:	90 70       	andi	r25, 0x00	; 0
    1d0e:	00 97       	sbiw	r24, 0x00	; 0
    1d10:	b9 f3       	breq	.-18     	; 0x1d00 <UART_sendByte+0xc>

	UDR = data;
    1d12:	ec e2       	ldi	r30, 0x2C	; 44
    1d14:	f0 e0       	ldi	r31, 0x00	; 0
    1d16:	89 81       	ldd	r24, Y+1	; 0x01
    1d18:	80 83       	st	Z, r24
}
    1d1a:	0f 90       	pop	r0
    1d1c:	cf 91       	pop	r28
    1d1e:	df 91       	pop	r29
    1d20:	08 95       	ret

00001d22 <UART_receiveByte>:
/*
 * Description :
 * Function responsible for receive byte from another UART device.
 */
uint8 UART_receiveByte(void)
{
    1d22:	df 93       	push	r29
    1d24:	cf 93       	push	r28
    1d26:	cd b7       	in	r28, 0x3d	; 61
    1d28:	de b7       	in	r29, 0x3e	; 62
	while(BIT_IS_CLEAR(UCSRA, RXC));
    1d2a:	eb e2       	ldi	r30, 0x2B	; 43
    1d2c:	f0 e0       	ldi	r31, 0x00	; 0
    1d2e:	80 81       	ld	r24, Z
    1d30:	88 23       	and	r24, r24
    1d32:	dc f7       	brge	.-10     	; 0x1d2a <UART_receiveByte+0x8>

	return UDR;
    1d34:	ec e2       	ldi	r30, 0x2C	; 44
    1d36:	f0 e0       	ldi	r31, 0x00	; 0
    1d38:	80 81       	ld	r24, Z
}
    1d3a:	cf 91       	pop	r28
    1d3c:	df 91       	pop	r29
    1d3e:	08 95       	ret

00001d40 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    1d40:	df 93       	push	r29
    1d42:	cf 93       	push	r28
    1d44:	00 d0       	rcall	.+0      	; 0x1d46 <UART_sendString+0x6>
    1d46:	0f 92       	push	r0
    1d48:	cd b7       	in	r28, 0x3d	; 61
    1d4a:	de b7       	in	r29, 0x3e	; 62
    1d4c:	9b 83       	std	Y+3, r25	; 0x03
    1d4e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1d50:	19 82       	std	Y+1, r1	; 0x01
    1d52:	0e c0       	rjmp	.+28     	; 0x1d70 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    1d54:	89 81       	ldd	r24, Y+1	; 0x01
    1d56:	28 2f       	mov	r18, r24
    1d58:	30 e0       	ldi	r19, 0x00	; 0
    1d5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d5c:	9b 81       	ldd	r25, Y+3	; 0x03
    1d5e:	fc 01       	movw	r30, r24
    1d60:	e2 0f       	add	r30, r18
    1d62:	f3 1f       	adc	r31, r19
    1d64:	80 81       	ld	r24, Z
    1d66:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <UART_sendByte>
		i++;
    1d6a:	89 81       	ldd	r24, Y+1	; 0x01
    1d6c:	8f 5f       	subi	r24, 0xFF	; 255
    1d6e:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    1d70:	89 81       	ldd	r24, Y+1	; 0x01
    1d72:	28 2f       	mov	r18, r24
    1d74:	30 e0       	ldi	r19, 0x00	; 0
    1d76:	8a 81       	ldd	r24, Y+2	; 0x02
    1d78:	9b 81       	ldd	r25, Y+3	; 0x03
    1d7a:	fc 01       	movw	r30, r24
    1d7c:	e2 0f       	add	r30, r18
    1d7e:	f3 1f       	adc	r31, r19
    1d80:	80 81       	ld	r24, Z
    1d82:	88 23       	and	r24, r24
    1d84:	39 f7       	brne	.-50     	; 0x1d54 <UART_sendString+0x14>
	{
		UART_sendByte(Str[i]);
		i++;
	}
}
    1d86:	0f 90       	pop	r0
    1d88:	0f 90       	pop	r0
    1d8a:	0f 90       	pop	r0
    1d8c:	cf 91       	pop	r28
    1d8e:	df 91       	pop	r29
    1d90:	08 95       	ret

00001d92 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    1d92:	0f 93       	push	r16
    1d94:	1f 93       	push	r17
    1d96:	df 93       	push	r29
    1d98:	cf 93       	push	r28
    1d9a:	00 d0       	rcall	.+0      	; 0x1d9c <UART_receiveString+0xa>
    1d9c:	0f 92       	push	r0
    1d9e:	cd b7       	in	r28, 0x3d	; 61
    1da0:	de b7       	in	r29, 0x3e	; 62
    1da2:	9b 83       	std	Y+3, r25	; 0x03
    1da4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1da6:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_receiveByte();
    1da8:	89 81       	ldd	r24, Y+1	; 0x01
    1daa:	28 2f       	mov	r18, r24
    1dac:	30 e0       	ldi	r19, 0x00	; 0
    1dae:	8a 81       	ldd	r24, Y+2	; 0x02
    1db0:	9b 81       	ldd	r25, Y+3	; 0x03
    1db2:	8c 01       	movw	r16, r24
    1db4:	02 0f       	add	r16, r18
    1db6:	13 1f       	adc	r17, r19
    1db8:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <UART_receiveByte>
    1dbc:	f8 01       	movw	r30, r16
    1dbe:	80 83       	st	Z, r24
    1dc0:	0f c0       	rjmp	.+30     	; 0x1de0 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    1dc2:	89 81       	ldd	r24, Y+1	; 0x01
    1dc4:	8f 5f       	subi	r24, 0xFF	; 255
    1dc6:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_receiveByte();
    1dc8:	89 81       	ldd	r24, Y+1	; 0x01
    1dca:	28 2f       	mov	r18, r24
    1dcc:	30 e0       	ldi	r19, 0x00	; 0
    1dce:	8a 81       	ldd	r24, Y+2	; 0x02
    1dd0:	9b 81       	ldd	r25, Y+3	; 0x03
    1dd2:	8c 01       	movw	r16, r24
    1dd4:	02 0f       	add	r16, r18
    1dd6:	13 1f       	adc	r17, r19
    1dd8:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <UART_receiveByte>
    1ddc:	f8 01       	movw	r30, r16
    1dde:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_receiveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    1de0:	89 81       	ldd	r24, Y+1	; 0x01
    1de2:	28 2f       	mov	r18, r24
    1de4:	30 e0       	ldi	r19, 0x00	; 0
    1de6:	8a 81       	ldd	r24, Y+2	; 0x02
    1de8:	9b 81       	ldd	r25, Y+3	; 0x03
    1dea:	fc 01       	movw	r30, r24
    1dec:	e2 0f       	add	r30, r18
    1dee:	f3 1f       	adc	r31, r19
    1df0:	80 81       	ld	r24, Z
    1df2:	83 32       	cpi	r24, 0x23	; 35
    1df4:	31 f7       	brne	.-52     	; 0x1dc2 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_receiveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    1df6:	89 81       	ldd	r24, Y+1	; 0x01
    1df8:	28 2f       	mov	r18, r24
    1dfa:	30 e0       	ldi	r19, 0x00	; 0
    1dfc:	8a 81       	ldd	r24, Y+2	; 0x02
    1dfe:	9b 81       	ldd	r25, Y+3	; 0x03
    1e00:	fc 01       	movw	r30, r24
    1e02:	e2 0f       	add	r30, r18
    1e04:	f3 1f       	adc	r31, r19
    1e06:	10 82       	st	Z, r1
}
    1e08:	0f 90       	pop	r0
    1e0a:	0f 90       	pop	r0
    1e0c:	0f 90       	pop	r0
    1e0e:	cf 91       	pop	r28
    1e10:	df 91       	pop	r29
    1e12:	1f 91       	pop	r17
    1e14:	0f 91       	pop	r16
    1e16:	08 95       	ret

00001e18 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1e18:	df 93       	push	r29
    1e1a:	cf 93       	push	r28
    1e1c:	00 d0       	rcall	.+0      	; 0x1e1e <GPIO_setupPinDirection+0x6>
    1e1e:	00 d0       	rcall	.+0      	; 0x1e20 <GPIO_setupPinDirection+0x8>
    1e20:	0f 92       	push	r0
    1e22:	cd b7       	in	r28, 0x3d	; 61
    1e24:	de b7       	in	r29, 0x3e	; 62
    1e26:	89 83       	std	Y+1, r24	; 0x01
    1e28:	6a 83       	std	Y+2, r22	; 0x02
    1e2a:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1e2c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e2e:	88 30       	cpi	r24, 0x08	; 8
    1e30:	08 f0       	brcs	.+2      	; 0x1e34 <GPIO_setupPinDirection+0x1c>
    1e32:	d5 c0       	rjmp	.+426    	; 0x1fde <GPIO_setupPinDirection+0x1c6>
    1e34:	89 81       	ldd	r24, Y+1	; 0x01
    1e36:	84 30       	cpi	r24, 0x04	; 4
    1e38:	08 f0       	brcs	.+2      	; 0x1e3c <GPIO_setupPinDirection+0x24>
    1e3a:	d1 c0       	rjmp	.+418    	; 0x1fde <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1e3c:	89 81       	ldd	r24, Y+1	; 0x01
    1e3e:	28 2f       	mov	r18, r24
    1e40:	30 e0       	ldi	r19, 0x00	; 0
    1e42:	3d 83       	std	Y+5, r19	; 0x05
    1e44:	2c 83       	std	Y+4, r18	; 0x04
    1e46:	8c 81       	ldd	r24, Y+4	; 0x04
    1e48:	9d 81       	ldd	r25, Y+5	; 0x05
    1e4a:	81 30       	cpi	r24, 0x01	; 1
    1e4c:	91 05       	cpc	r25, r1
    1e4e:	09 f4       	brne	.+2      	; 0x1e52 <GPIO_setupPinDirection+0x3a>
    1e50:	43 c0       	rjmp	.+134    	; 0x1ed8 <GPIO_setupPinDirection+0xc0>
    1e52:	2c 81       	ldd	r18, Y+4	; 0x04
    1e54:	3d 81       	ldd	r19, Y+5	; 0x05
    1e56:	22 30       	cpi	r18, 0x02	; 2
    1e58:	31 05       	cpc	r19, r1
    1e5a:	2c f4       	brge	.+10     	; 0x1e66 <GPIO_setupPinDirection+0x4e>
    1e5c:	8c 81       	ldd	r24, Y+4	; 0x04
    1e5e:	9d 81       	ldd	r25, Y+5	; 0x05
    1e60:	00 97       	sbiw	r24, 0x00	; 0
    1e62:	71 f0       	breq	.+28     	; 0x1e80 <GPIO_setupPinDirection+0x68>
    1e64:	bc c0       	rjmp	.+376    	; 0x1fde <GPIO_setupPinDirection+0x1c6>
    1e66:	2c 81       	ldd	r18, Y+4	; 0x04
    1e68:	3d 81       	ldd	r19, Y+5	; 0x05
    1e6a:	22 30       	cpi	r18, 0x02	; 2
    1e6c:	31 05       	cpc	r19, r1
    1e6e:	09 f4       	brne	.+2      	; 0x1e72 <GPIO_setupPinDirection+0x5a>
    1e70:	5f c0       	rjmp	.+190    	; 0x1f30 <GPIO_setupPinDirection+0x118>
    1e72:	8c 81       	ldd	r24, Y+4	; 0x04
    1e74:	9d 81       	ldd	r25, Y+5	; 0x05
    1e76:	83 30       	cpi	r24, 0x03	; 3
    1e78:	91 05       	cpc	r25, r1
    1e7a:	09 f4       	brne	.+2      	; 0x1e7e <GPIO_setupPinDirection+0x66>
    1e7c:	85 c0       	rjmp	.+266    	; 0x1f88 <GPIO_setupPinDirection+0x170>
    1e7e:	af c0       	rjmp	.+350    	; 0x1fde <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1e80:	8b 81       	ldd	r24, Y+3	; 0x03
    1e82:	81 30       	cpi	r24, 0x01	; 1
    1e84:	a1 f4       	brne	.+40     	; 0x1eae <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1e86:	aa e3       	ldi	r26, 0x3A	; 58
    1e88:	b0 e0       	ldi	r27, 0x00	; 0
    1e8a:	ea e3       	ldi	r30, 0x3A	; 58
    1e8c:	f0 e0       	ldi	r31, 0x00	; 0
    1e8e:	80 81       	ld	r24, Z
    1e90:	48 2f       	mov	r20, r24
    1e92:	8a 81       	ldd	r24, Y+2	; 0x02
    1e94:	28 2f       	mov	r18, r24
    1e96:	30 e0       	ldi	r19, 0x00	; 0
    1e98:	81 e0       	ldi	r24, 0x01	; 1
    1e9a:	90 e0       	ldi	r25, 0x00	; 0
    1e9c:	02 2e       	mov	r0, r18
    1e9e:	02 c0       	rjmp	.+4      	; 0x1ea4 <GPIO_setupPinDirection+0x8c>
    1ea0:	88 0f       	add	r24, r24
    1ea2:	99 1f       	adc	r25, r25
    1ea4:	0a 94       	dec	r0
    1ea6:	e2 f7       	brpl	.-8      	; 0x1ea0 <GPIO_setupPinDirection+0x88>
    1ea8:	84 2b       	or	r24, r20
    1eaa:	8c 93       	st	X, r24
    1eac:	98 c0       	rjmp	.+304    	; 0x1fde <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1eae:	aa e3       	ldi	r26, 0x3A	; 58
    1eb0:	b0 e0       	ldi	r27, 0x00	; 0
    1eb2:	ea e3       	ldi	r30, 0x3A	; 58
    1eb4:	f0 e0       	ldi	r31, 0x00	; 0
    1eb6:	80 81       	ld	r24, Z
    1eb8:	48 2f       	mov	r20, r24
    1eba:	8a 81       	ldd	r24, Y+2	; 0x02
    1ebc:	28 2f       	mov	r18, r24
    1ebe:	30 e0       	ldi	r19, 0x00	; 0
    1ec0:	81 e0       	ldi	r24, 0x01	; 1
    1ec2:	90 e0       	ldi	r25, 0x00	; 0
    1ec4:	02 2e       	mov	r0, r18
    1ec6:	02 c0       	rjmp	.+4      	; 0x1ecc <GPIO_setupPinDirection+0xb4>
    1ec8:	88 0f       	add	r24, r24
    1eca:	99 1f       	adc	r25, r25
    1ecc:	0a 94       	dec	r0
    1ece:	e2 f7       	brpl	.-8      	; 0x1ec8 <GPIO_setupPinDirection+0xb0>
    1ed0:	80 95       	com	r24
    1ed2:	84 23       	and	r24, r20
    1ed4:	8c 93       	st	X, r24
    1ed6:	83 c0       	rjmp	.+262    	; 0x1fde <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1ed8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eda:	81 30       	cpi	r24, 0x01	; 1
    1edc:	a1 f4       	brne	.+40     	; 0x1f06 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1ede:	a7 e3       	ldi	r26, 0x37	; 55
    1ee0:	b0 e0       	ldi	r27, 0x00	; 0
    1ee2:	e7 e3       	ldi	r30, 0x37	; 55
    1ee4:	f0 e0       	ldi	r31, 0x00	; 0
    1ee6:	80 81       	ld	r24, Z
    1ee8:	48 2f       	mov	r20, r24
    1eea:	8a 81       	ldd	r24, Y+2	; 0x02
    1eec:	28 2f       	mov	r18, r24
    1eee:	30 e0       	ldi	r19, 0x00	; 0
    1ef0:	81 e0       	ldi	r24, 0x01	; 1
    1ef2:	90 e0       	ldi	r25, 0x00	; 0
    1ef4:	02 2e       	mov	r0, r18
    1ef6:	02 c0       	rjmp	.+4      	; 0x1efc <GPIO_setupPinDirection+0xe4>
    1ef8:	88 0f       	add	r24, r24
    1efa:	99 1f       	adc	r25, r25
    1efc:	0a 94       	dec	r0
    1efe:	e2 f7       	brpl	.-8      	; 0x1ef8 <GPIO_setupPinDirection+0xe0>
    1f00:	84 2b       	or	r24, r20
    1f02:	8c 93       	st	X, r24
    1f04:	6c c0       	rjmp	.+216    	; 0x1fde <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1f06:	a7 e3       	ldi	r26, 0x37	; 55
    1f08:	b0 e0       	ldi	r27, 0x00	; 0
    1f0a:	e7 e3       	ldi	r30, 0x37	; 55
    1f0c:	f0 e0       	ldi	r31, 0x00	; 0
    1f0e:	80 81       	ld	r24, Z
    1f10:	48 2f       	mov	r20, r24
    1f12:	8a 81       	ldd	r24, Y+2	; 0x02
    1f14:	28 2f       	mov	r18, r24
    1f16:	30 e0       	ldi	r19, 0x00	; 0
    1f18:	81 e0       	ldi	r24, 0x01	; 1
    1f1a:	90 e0       	ldi	r25, 0x00	; 0
    1f1c:	02 2e       	mov	r0, r18
    1f1e:	02 c0       	rjmp	.+4      	; 0x1f24 <GPIO_setupPinDirection+0x10c>
    1f20:	88 0f       	add	r24, r24
    1f22:	99 1f       	adc	r25, r25
    1f24:	0a 94       	dec	r0
    1f26:	e2 f7       	brpl	.-8      	; 0x1f20 <GPIO_setupPinDirection+0x108>
    1f28:	80 95       	com	r24
    1f2a:	84 23       	and	r24, r20
    1f2c:	8c 93       	st	X, r24
    1f2e:	57 c0       	rjmp	.+174    	; 0x1fde <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1f30:	8b 81       	ldd	r24, Y+3	; 0x03
    1f32:	81 30       	cpi	r24, 0x01	; 1
    1f34:	a1 f4       	brne	.+40     	; 0x1f5e <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1f36:	a4 e3       	ldi	r26, 0x34	; 52
    1f38:	b0 e0       	ldi	r27, 0x00	; 0
    1f3a:	e4 e3       	ldi	r30, 0x34	; 52
    1f3c:	f0 e0       	ldi	r31, 0x00	; 0
    1f3e:	80 81       	ld	r24, Z
    1f40:	48 2f       	mov	r20, r24
    1f42:	8a 81       	ldd	r24, Y+2	; 0x02
    1f44:	28 2f       	mov	r18, r24
    1f46:	30 e0       	ldi	r19, 0x00	; 0
    1f48:	81 e0       	ldi	r24, 0x01	; 1
    1f4a:	90 e0       	ldi	r25, 0x00	; 0
    1f4c:	02 2e       	mov	r0, r18
    1f4e:	02 c0       	rjmp	.+4      	; 0x1f54 <GPIO_setupPinDirection+0x13c>
    1f50:	88 0f       	add	r24, r24
    1f52:	99 1f       	adc	r25, r25
    1f54:	0a 94       	dec	r0
    1f56:	e2 f7       	brpl	.-8      	; 0x1f50 <GPIO_setupPinDirection+0x138>
    1f58:	84 2b       	or	r24, r20
    1f5a:	8c 93       	st	X, r24
    1f5c:	40 c0       	rjmp	.+128    	; 0x1fde <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1f5e:	a4 e3       	ldi	r26, 0x34	; 52
    1f60:	b0 e0       	ldi	r27, 0x00	; 0
    1f62:	e4 e3       	ldi	r30, 0x34	; 52
    1f64:	f0 e0       	ldi	r31, 0x00	; 0
    1f66:	80 81       	ld	r24, Z
    1f68:	48 2f       	mov	r20, r24
    1f6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f6c:	28 2f       	mov	r18, r24
    1f6e:	30 e0       	ldi	r19, 0x00	; 0
    1f70:	81 e0       	ldi	r24, 0x01	; 1
    1f72:	90 e0       	ldi	r25, 0x00	; 0
    1f74:	02 2e       	mov	r0, r18
    1f76:	02 c0       	rjmp	.+4      	; 0x1f7c <GPIO_setupPinDirection+0x164>
    1f78:	88 0f       	add	r24, r24
    1f7a:	99 1f       	adc	r25, r25
    1f7c:	0a 94       	dec	r0
    1f7e:	e2 f7       	brpl	.-8      	; 0x1f78 <GPIO_setupPinDirection+0x160>
    1f80:	80 95       	com	r24
    1f82:	84 23       	and	r24, r20
    1f84:	8c 93       	st	X, r24
    1f86:	2b c0       	rjmp	.+86     	; 0x1fde <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1f88:	8b 81       	ldd	r24, Y+3	; 0x03
    1f8a:	81 30       	cpi	r24, 0x01	; 1
    1f8c:	a1 f4       	brne	.+40     	; 0x1fb6 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1f8e:	a1 e3       	ldi	r26, 0x31	; 49
    1f90:	b0 e0       	ldi	r27, 0x00	; 0
    1f92:	e1 e3       	ldi	r30, 0x31	; 49
    1f94:	f0 e0       	ldi	r31, 0x00	; 0
    1f96:	80 81       	ld	r24, Z
    1f98:	48 2f       	mov	r20, r24
    1f9a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f9c:	28 2f       	mov	r18, r24
    1f9e:	30 e0       	ldi	r19, 0x00	; 0
    1fa0:	81 e0       	ldi	r24, 0x01	; 1
    1fa2:	90 e0       	ldi	r25, 0x00	; 0
    1fa4:	02 2e       	mov	r0, r18
    1fa6:	02 c0       	rjmp	.+4      	; 0x1fac <GPIO_setupPinDirection+0x194>
    1fa8:	88 0f       	add	r24, r24
    1faa:	99 1f       	adc	r25, r25
    1fac:	0a 94       	dec	r0
    1fae:	e2 f7       	brpl	.-8      	; 0x1fa8 <GPIO_setupPinDirection+0x190>
    1fb0:	84 2b       	or	r24, r20
    1fb2:	8c 93       	st	X, r24
    1fb4:	14 c0       	rjmp	.+40     	; 0x1fde <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1fb6:	a1 e3       	ldi	r26, 0x31	; 49
    1fb8:	b0 e0       	ldi	r27, 0x00	; 0
    1fba:	e1 e3       	ldi	r30, 0x31	; 49
    1fbc:	f0 e0       	ldi	r31, 0x00	; 0
    1fbe:	80 81       	ld	r24, Z
    1fc0:	48 2f       	mov	r20, r24
    1fc2:	8a 81       	ldd	r24, Y+2	; 0x02
    1fc4:	28 2f       	mov	r18, r24
    1fc6:	30 e0       	ldi	r19, 0x00	; 0
    1fc8:	81 e0       	ldi	r24, 0x01	; 1
    1fca:	90 e0       	ldi	r25, 0x00	; 0
    1fcc:	02 2e       	mov	r0, r18
    1fce:	02 c0       	rjmp	.+4      	; 0x1fd4 <GPIO_setupPinDirection+0x1bc>
    1fd0:	88 0f       	add	r24, r24
    1fd2:	99 1f       	adc	r25, r25
    1fd4:	0a 94       	dec	r0
    1fd6:	e2 f7       	brpl	.-8      	; 0x1fd0 <GPIO_setupPinDirection+0x1b8>
    1fd8:	80 95       	com	r24
    1fda:	84 23       	and	r24, r20
    1fdc:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1fde:	0f 90       	pop	r0
    1fe0:	0f 90       	pop	r0
    1fe2:	0f 90       	pop	r0
    1fe4:	0f 90       	pop	r0
    1fe6:	0f 90       	pop	r0
    1fe8:	cf 91       	pop	r28
    1fea:	df 91       	pop	r29
    1fec:	08 95       	ret

00001fee <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1fee:	df 93       	push	r29
    1ff0:	cf 93       	push	r28
    1ff2:	00 d0       	rcall	.+0      	; 0x1ff4 <GPIO_writePin+0x6>
    1ff4:	00 d0       	rcall	.+0      	; 0x1ff6 <GPIO_writePin+0x8>
    1ff6:	0f 92       	push	r0
    1ff8:	cd b7       	in	r28, 0x3d	; 61
    1ffa:	de b7       	in	r29, 0x3e	; 62
    1ffc:	89 83       	std	Y+1, r24	; 0x01
    1ffe:	6a 83       	std	Y+2, r22	; 0x02
    2000:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    2002:	8a 81       	ldd	r24, Y+2	; 0x02
    2004:	88 30       	cpi	r24, 0x08	; 8
    2006:	08 f0       	brcs	.+2      	; 0x200a <GPIO_writePin+0x1c>
    2008:	d5 c0       	rjmp	.+426    	; 0x21b4 <GPIO_writePin+0x1c6>
    200a:	89 81       	ldd	r24, Y+1	; 0x01
    200c:	84 30       	cpi	r24, 0x04	; 4
    200e:	08 f0       	brcs	.+2      	; 0x2012 <GPIO_writePin+0x24>
    2010:	d1 c0       	rjmp	.+418    	; 0x21b4 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    2012:	89 81       	ldd	r24, Y+1	; 0x01
    2014:	28 2f       	mov	r18, r24
    2016:	30 e0       	ldi	r19, 0x00	; 0
    2018:	3d 83       	std	Y+5, r19	; 0x05
    201a:	2c 83       	std	Y+4, r18	; 0x04
    201c:	8c 81       	ldd	r24, Y+4	; 0x04
    201e:	9d 81       	ldd	r25, Y+5	; 0x05
    2020:	81 30       	cpi	r24, 0x01	; 1
    2022:	91 05       	cpc	r25, r1
    2024:	09 f4       	brne	.+2      	; 0x2028 <GPIO_writePin+0x3a>
    2026:	43 c0       	rjmp	.+134    	; 0x20ae <GPIO_writePin+0xc0>
    2028:	2c 81       	ldd	r18, Y+4	; 0x04
    202a:	3d 81       	ldd	r19, Y+5	; 0x05
    202c:	22 30       	cpi	r18, 0x02	; 2
    202e:	31 05       	cpc	r19, r1
    2030:	2c f4       	brge	.+10     	; 0x203c <GPIO_writePin+0x4e>
    2032:	8c 81       	ldd	r24, Y+4	; 0x04
    2034:	9d 81       	ldd	r25, Y+5	; 0x05
    2036:	00 97       	sbiw	r24, 0x00	; 0
    2038:	71 f0       	breq	.+28     	; 0x2056 <GPIO_writePin+0x68>
    203a:	bc c0       	rjmp	.+376    	; 0x21b4 <GPIO_writePin+0x1c6>
    203c:	2c 81       	ldd	r18, Y+4	; 0x04
    203e:	3d 81       	ldd	r19, Y+5	; 0x05
    2040:	22 30       	cpi	r18, 0x02	; 2
    2042:	31 05       	cpc	r19, r1
    2044:	09 f4       	brne	.+2      	; 0x2048 <GPIO_writePin+0x5a>
    2046:	5f c0       	rjmp	.+190    	; 0x2106 <GPIO_writePin+0x118>
    2048:	8c 81       	ldd	r24, Y+4	; 0x04
    204a:	9d 81       	ldd	r25, Y+5	; 0x05
    204c:	83 30       	cpi	r24, 0x03	; 3
    204e:	91 05       	cpc	r25, r1
    2050:	09 f4       	brne	.+2      	; 0x2054 <GPIO_writePin+0x66>
    2052:	85 c0       	rjmp	.+266    	; 0x215e <GPIO_writePin+0x170>
    2054:	af c0       	rjmp	.+350    	; 0x21b4 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    2056:	8b 81       	ldd	r24, Y+3	; 0x03
    2058:	81 30       	cpi	r24, 0x01	; 1
    205a:	a1 f4       	brne	.+40     	; 0x2084 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    205c:	ab e3       	ldi	r26, 0x3B	; 59
    205e:	b0 e0       	ldi	r27, 0x00	; 0
    2060:	eb e3       	ldi	r30, 0x3B	; 59
    2062:	f0 e0       	ldi	r31, 0x00	; 0
    2064:	80 81       	ld	r24, Z
    2066:	48 2f       	mov	r20, r24
    2068:	8a 81       	ldd	r24, Y+2	; 0x02
    206a:	28 2f       	mov	r18, r24
    206c:	30 e0       	ldi	r19, 0x00	; 0
    206e:	81 e0       	ldi	r24, 0x01	; 1
    2070:	90 e0       	ldi	r25, 0x00	; 0
    2072:	02 2e       	mov	r0, r18
    2074:	02 c0       	rjmp	.+4      	; 0x207a <GPIO_writePin+0x8c>
    2076:	88 0f       	add	r24, r24
    2078:	99 1f       	adc	r25, r25
    207a:	0a 94       	dec	r0
    207c:	e2 f7       	brpl	.-8      	; 0x2076 <GPIO_writePin+0x88>
    207e:	84 2b       	or	r24, r20
    2080:	8c 93       	st	X, r24
    2082:	98 c0       	rjmp	.+304    	; 0x21b4 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    2084:	ab e3       	ldi	r26, 0x3B	; 59
    2086:	b0 e0       	ldi	r27, 0x00	; 0
    2088:	eb e3       	ldi	r30, 0x3B	; 59
    208a:	f0 e0       	ldi	r31, 0x00	; 0
    208c:	80 81       	ld	r24, Z
    208e:	48 2f       	mov	r20, r24
    2090:	8a 81       	ldd	r24, Y+2	; 0x02
    2092:	28 2f       	mov	r18, r24
    2094:	30 e0       	ldi	r19, 0x00	; 0
    2096:	81 e0       	ldi	r24, 0x01	; 1
    2098:	90 e0       	ldi	r25, 0x00	; 0
    209a:	02 2e       	mov	r0, r18
    209c:	02 c0       	rjmp	.+4      	; 0x20a2 <GPIO_writePin+0xb4>
    209e:	88 0f       	add	r24, r24
    20a0:	99 1f       	adc	r25, r25
    20a2:	0a 94       	dec	r0
    20a4:	e2 f7       	brpl	.-8      	; 0x209e <GPIO_writePin+0xb0>
    20a6:	80 95       	com	r24
    20a8:	84 23       	and	r24, r20
    20aa:	8c 93       	st	X, r24
    20ac:	83 c0       	rjmp	.+262    	; 0x21b4 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    20ae:	8b 81       	ldd	r24, Y+3	; 0x03
    20b0:	81 30       	cpi	r24, 0x01	; 1
    20b2:	a1 f4       	brne	.+40     	; 0x20dc <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    20b4:	a8 e3       	ldi	r26, 0x38	; 56
    20b6:	b0 e0       	ldi	r27, 0x00	; 0
    20b8:	e8 e3       	ldi	r30, 0x38	; 56
    20ba:	f0 e0       	ldi	r31, 0x00	; 0
    20bc:	80 81       	ld	r24, Z
    20be:	48 2f       	mov	r20, r24
    20c0:	8a 81       	ldd	r24, Y+2	; 0x02
    20c2:	28 2f       	mov	r18, r24
    20c4:	30 e0       	ldi	r19, 0x00	; 0
    20c6:	81 e0       	ldi	r24, 0x01	; 1
    20c8:	90 e0       	ldi	r25, 0x00	; 0
    20ca:	02 2e       	mov	r0, r18
    20cc:	02 c0       	rjmp	.+4      	; 0x20d2 <GPIO_writePin+0xe4>
    20ce:	88 0f       	add	r24, r24
    20d0:	99 1f       	adc	r25, r25
    20d2:	0a 94       	dec	r0
    20d4:	e2 f7       	brpl	.-8      	; 0x20ce <GPIO_writePin+0xe0>
    20d6:	84 2b       	or	r24, r20
    20d8:	8c 93       	st	X, r24
    20da:	6c c0       	rjmp	.+216    	; 0x21b4 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    20dc:	a8 e3       	ldi	r26, 0x38	; 56
    20de:	b0 e0       	ldi	r27, 0x00	; 0
    20e0:	e8 e3       	ldi	r30, 0x38	; 56
    20e2:	f0 e0       	ldi	r31, 0x00	; 0
    20e4:	80 81       	ld	r24, Z
    20e6:	48 2f       	mov	r20, r24
    20e8:	8a 81       	ldd	r24, Y+2	; 0x02
    20ea:	28 2f       	mov	r18, r24
    20ec:	30 e0       	ldi	r19, 0x00	; 0
    20ee:	81 e0       	ldi	r24, 0x01	; 1
    20f0:	90 e0       	ldi	r25, 0x00	; 0
    20f2:	02 2e       	mov	r0, r18
    20f4:	02 c0       	rjmp	.+4      	; 0x20fa <GPIO_writePin+0x10c>
    20f6:	88 0f       	add	r24, r24
    20f8:	99 1f       	adc	r25, r25
    20fa:	0a 94       	dec	r0
    20fc:	e2 f7       	brpl	.-8      	; 0x20f6 <GPIO_writePin+0x108>
    20fe:	80 95       	com	r24
    2100:	84 23       	and	r24, r20
    2102:	8c 93       	st	X, r24
    2104:	57 c0       	rjmp	.+174    	; 0x21b4 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    2106:	8b 81       	ldd	r24, Y+3	; 0x03
    2108:	81 30       	cpi	r24, 0x01	; 1
    210a:	a1 f4       	brne	.+40     	; 0x2134 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    210c:	a5 e3       	ldi	r26, 0x35	; 53
    210e:	b0 e0       	ldi	r27, 0x00	; 0
    2110:	e5 e3       	ldi	r30, 0x35	; 53
    2112:	f0 e0       	ldi	r31, 0x00	; 0
    2114:	80 81       	ld	r24, Z
    2116:	48 2f       	mov	r20, r24
    2118:	8a 81       	ldd	r24, Y+2	; 0x02
    211a:	28 2f       	mov	r18, r24
    211c:	30 e0       	ldi	r19, 0x00	; 0
    211e:	81 e0       	ldi	r24, 0x01	; 1
    2120:	90 e0       	ldi	r25, 0x00	; 0
    2122:	02 2e       	mov	r0, r18
    2124:	02 c0       	rjmp	.+4      	; 0x212a <GPIO_writePin+0x13c>
    2126:	88 0f       	add	r24, r24
    2128:	99 1f       	adc	r25, r25
    212a:	0a 94       	dec	r0
    212c:	e2 f7       	brpl	.-8      	; 0x2126 <GPIO_writePin+0x138>
    212e:	84 2b       	or	r24, r20
    2130:	8c 93       	st	X, r24
    2132:	40 c0       	rjmp	.+128    	; 0x21b4 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    2134:	a5 e3       	ldi	r26, 0x35	; 53
    2136:	b0 e0       	ldi	r27, 0x00	; 0
    2138:	e5 e3       	ldi	r30, 0x35	; 53
    213a:	f0 e0       	ldi	r31, 0x00	; 0
    213c:	80 81       	ld	r24, Z
    213e:	48 2f       	mov	r20, r24
    2140:	8a 81       	ldd	r24, Y+2	; 0x02
    2142:	28 2f       	mov	r18, r24
    2144:	30 e0       	ldi	r19, 0x00	; 0
    2146:	81 e0       	ldi	r24, 0x01	; 1
    2148:	90 e0       	ldi	r25, 0x00	; 0
    214a:	02 2e       	mov	r0, r18
    214c:	02 c0       	rjmp	.+4      	; 0x2152 <GPIO_writePin+0x164>
    214e:	88 0f       	add	r24, r24
    2150:	99 1f       	adc	r25, r25
    2152:	0a 94       	dec	r0
    2154:	e2 f7       	brpl	.-8      	; 0x214e <GPIO_writePin+0x160>
    2156:	80 95       	com	r24
    2158:	84 23       	and	r24, r20
    215a:	8c 93       	st	X, r24
    215c:	2b c0       	rjmp	.+86     	; 0x21b4 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    215e:	8b 81       	ldd	r24, Y+3	; 0x03
    2160:	81 30       	cpi	r24, 0x01	; 1
    2162:	a1 f4       	brne	.+40     	; 0x218c <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    2164:	a2 e3       	ldi	r26, 0x32	; 50
    2166:	b0 e0       	ldi	r27, 0x00	; 0
    2168:	e2 e3       	ldi	r30, 0x32	; 50
    216a:	f0 e0       	ldi	r31, 0x00	; 0
    216c:	80 81       	ld	r24, Z
    216e:	48 2f       	mov	r20, r24
    2170:	8a 81       	ldd	r24, Y+2	; 0x02
    2172:	28 2f       	mov	r18, r24
    2174:	30 e0       	ldi	r19, 0x00	; 0
    2176:	81 e0       	ldi	r24, 0x01	; 1
    2178:	90 e0       	ldi	r25, 0x00	; 0
    217a:	02 2e       	mov	r0, r18
    217c:	02 c0       	rjmp	.+4      	; 0x2182 <GPIO_writePin+0x194>
    217e:	88 0f       	add	r24, r24
    2180:	99 1f       	adc	r25, r25
    2182:	0a 94       	dec	r0
    2184:	e2 f7       	brpl	.-8      	; 0x217e <GPIO_writePin+0x190>
    2186:	84 2b       	or	r24, r20
    2188:	8c 93       	st	X, r24
    218a:	14 c0       	rjmp	.+40     	; 0x21b4 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    218c:	a2 e3       	ldi	r26, 0x32	; 50
    218e:	b0 e0       	ldi	r27, 0x00	; 0
    2190:	e2 e3       	ldi	r30, 0x32	; 50
    2192:	f0 e0       	ldi	r31, 0x00	; 0
    2194:	80 81       	ld	r24, Z
    2196:	48 2f       	mov	r20, r24
    2198:	8a 81       	ldd	r24, Y+2	; 0x02
    219a:	28 2f       	mov	r18, r24
    219c:	30 e0       	ldi	r19, 0x00	; 0
    219e:	81 e0       	ldi	r24, 0x01	; 1
    21a0:	90 e0       	ldi	r25, 0x00	; 0
    21a2:	02 2e       	mov	r0, r18
    21a4:	02 c0       	rjmp	.+4      	; 0x21aa <GPIO_writePin+0x1bc>
    21a6:	88 0f       	add	r24, r24
    21a8:	99 1f       	adc	r25, r25
    21aa:	0a 94       	dec	r0
    21ac:	e2 f7       	brpl	.-8      	; 0x21a6 <GPIO_writePin+0x1b8>
    21ae:	80 95       	com	r24
    21b0:	84 23       	and	r24, r20
    21b2:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    21b4:	0f 90       	pop	r0
    21b6:	0f 90       	pop	r0
    21b8:	0f 90       	pop	r0
    21ba:	0f 90       	pop	r0
    21bc:	0f 90       	pop	r0
    21be:	cf 91       	pop	r28
    21c0:	df 91       	pop	r29
    21c2:	08 95       	ret

000021c4 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    21c4:	df 93       	push	r29
    21c6:	cf 93       	push	r28
    21c8:	00 d0       	rcall	.+0      	; 0x21ca <GPIO_readPin+0x6>
    21ca:	00 d0       	rcall	.+0      	; 0x21cc <GPIO_readPin+0x8>
    21cc:	0f 92       	push	r0
    21ce:	cd b7       	in	r28, 0x3d	; 61
    21d0:	de b7       	in	r29, 0x3e	; 62
    21d2:	8a 83       	std	Y+2, r24	; 0x02
    21d4:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    21d6:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    21d8:	8b 81       	ldd	r24, Y+3	; 0x03
    21da:	88 30       	cpi	r24, 0x08	; 8
    21dc:	08 f0       	brcs	.+2      	; 0x21e0 <GPIO_readPin+0x1c>
    21de:	84 c0       	rjmp	.+264    	; 0x22e8 <GPIO_readPin+0x124>
    21e0:	8a 81       	ldd	r24, Y+2	; 0x02
    21e2:	84 30       	cpi	r24, 0x04	; 4
    21e4:	08 f0       	brcs	.+2      	; 0x21e8 <GPIO_readPin+0x24>
    21e6:	80 c0       	rjmp	.+256    	; 0x22e8 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    21e8:	8a 81       	ldd	r24, Y+2	; 0x02
    21ea:	28 2f       	mov	r18, r24
    21ec:	30 e0       	ldi	r19, 0x00	; 0
    21ee:	3d 83       	std	Y+5, r19	; 0x05
    21f0:	2c 83       	std	Y+4, r18	; 0x04
    21f2:	4c 81       	ldd	r20, Y+4	; 0x04
    21f4:	5d 81       	ldd	r21, Y+5	; 0x05
    21f6:	41 30       	cpi	r20, 0x01	; 1
    21f8:	51 05       	cpc	r21, r1
    21fa:	79 f1       	breq	.+94     	; 0x225a <GPIO_readPin+0x96>
    21fc:	8c 81       	ldd	r24, Y+4	; 0x04
    21fe:	9d 81       	ldd	r25, Y+5	; 0x05
    2200:	82 30       	cpi	r24, 0x02	; 2
    2202:	91 05       	cpc	r25, r1
    2204:	34 f4       	brge	.+12     	; 0x2212 <GPIO_readPin+0x4e>
    2206:	2c 81       	ldd	r18, Y+4	; 0x04
    2208:	3d 81       	ldd	r19, Y+5	; 0x05
    220a:	21 15       	cp	r18, r1
    220c:	31 05       	cpc	r19, r1
    220e:	69 f0       	breq	.+26     	; 0x222a <GPIO_readPin+0x66>
    2210:	6b c0       	rjmp	.+214    	; 0x22e8 <GPIO_readPin+0x124>
    2212:	4c 81       	ldd	r20, Y+4	; 0x04
    2214:	5d 81       	ldd	r21, Y+5	; 0x05
    2216:	42 30       	cpi	r20, 0x02	; 2
    2218:	51 05       	cpc	r21, r1
    221a:	b9 f1       	breq	.+110    	; 0x228a <GPIO_readPin+0xc6>
    221c:	8c 81       	ldd	r24, Y+4	; 0x04
    221e:	9d 81       	ldd	r25, Y+5	; 0x05
    2220:	83 30       	cpi	r24, 0x03	; 3
    2222:	91 05       	cpc	r25, r1
    2224:	09 f4       	brne	.+2      	; 0x2228 <GPIO_readPin+0x64>
    2226:	49 c0       	rjmp	.+146    	; 0x22ba <GPIO_readPin+0xf6>
    2228:	5f c0       	rjmp	.+190    	; 0x22e8 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    222a:	e9 e3       	ldi	r30, 0x39	; 57
    222c:	f0 e0       	ldi	r31, 0x00	; 0
    222e:	80 81       	ld	r24, Z
    2230:	28 2f       	mov	r18, r24
    2232:	30 e0       	ldi	r19, 0x00	; 0
    2234:	8b 81       	ldd	r24, Y+3	; 0x03
    2236:	88 2f       	mov	r24, r24
    2238:	90 e0       	ldi	r25, 0x00	; 0
    223a:	a9 01       	movw	r20, r18
    223c:	02 c0       	rjmp	.+4      	; 0x2242 <GPIO_readPin+0x7e>
    223e:	55 95       	asr	r21
    2240:	47 95       	ror	r20
    2242:	8a 95       	dec	r24
    2244:	e2 f7       	brpl	.-8      	; 0x223e <GPIO_readPin+0x7a>
    2246:	ca 01       	movw	r24, r20
    2248:	81 70       	andi	r24, 0x01	; 1
    224a:	90 70       	andi	r25, 0x00	; 0
    224c:	88 23       	and	r24, r24
    224e:	19 f0       	breq	.+6      	; 0x2256 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    2250:	81 e0       	ldi	r24, 0x01	; 1
    2252:	89 83       	std	Y+1, r24	; 0x01
    2254:	49 c0       	rjmp	.+146    	; 0x22e8 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2256:	19 82       	std	Y+1, r1	; 0x01
    2258:	47 c0       	rjmp	.+142    	; 0x22e8 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    225a:	e6 e3       	ldi	r30, 0x36	; 54
    225c:	f0 e0       	ldi	r31, 0x00	; 0
    225e:	80 81       	ld	r24, Z
    2260:	28 2f       	mov	r18, r24
    2262:	30 e0       	ldi	r19, 0x00	; 0
    2264:	8b 81       	ldd	r24, Y+3	; 0x03
    2266:	88 2f       	mov	r24, r24
    2268:	90 e0       	ldi	r25, 0x00	; 0
    226a:	a9 01       	movw	r20, r18
    226c:	02 c0       	rjmp	.+4      	; 0x2272 <GPIO_readPin+0xae>
    226e:	55 95       	asr	r21
    2270:	47 95       	ror	r20
    2272:	8a 95       	dec	r24
    2274:	e2 f7       	brpl	.-8      	; 0x226e <GPIO_readPin+0xaa>
    2276:	ca 01       	movw	r24, r20
    2278:	81 70       	andi	r24, 0x01	; 1
    227a:	90 70       	andi	r25, 0x00	; 0
    227c:	88 23       	and	r24, r24
    227e:	19 f0       	breq	.+6      	; 0x2286 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    2280:	81 e0       	ldi	r24, 0x01	; 1
    2282:	89 83       	std	Y+1, r24	; 0x01
    2284:	31 c0       	rjmp	.+98     	; 0x22e8 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2286:	19 82       	std	Y+1, r1	; 0x01
    2288:	2f c0       	rjmp	.+94     	; 0x22e8 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    228a:	e3 e3       	ldi	r30, 0x33	; 51
    228c:	f0 e0       	ldi	r31, 0x00	; 0
    228e:	80 81       	ld	r24, Z
    2290:	28 2f       	mov	r18, r24
    2292:	30 e0       	ldi	r19, 0x00	; 0
    2294:	8b 81       	ldd	r24, Y+3	; 0x03
    2296:	88 2f       	mov	r24, r24
    2298:	90 e0       	ldi	r25, 0x00	; 0
    229a:	a9 01       	movw	r20, r18
    229c:	02 c0       	rjmp	.+4      	; 0x22a2 <GPIO_readPin+0xde>
    229e:	55 95       	asr	r21
    22a0:	47 95       	ror	r20
    22a2:	8a 95       	dec	r24
    22a4:	e2 f7       	brpl	.-8      	; 0x229e <GPIO_readPin+0xda>
    22a6:	ca 01       	movw	r24, r20
    22a8:	81 70       	andi	r24, 0x01	; 1
    22aa:	90 70       	andi	r25, 0x00	; 0
    22ac:	88 23       	and	r24, r24
    22ae:	19 f0       	breq	.+6      	; 0x22b6 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    22b0:	81 e0       	ldi	r24, 0x01	; 1
    22b2:	89 83       	std	Y+1, r24	; 0x01
    22b4:	19 c0       	rjmp	.+50     	; 0x22e8 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    22b6:	19 82       	std	Y+1, r1	; 0x01
    22b8:	17 c0       	rjmp	.+46     	; 0x22e8 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    22ba:	e0 e3       	ldi	r30, 0x30	; 48
    22bc:	f0 e0       	ldi	r31, 0x00	; 0
    22be:	80 81       	ld	r24, Z
    22c0:	28 2f       	mov	r18, r24
    22c2:	30 e0       	ldi	r19, 0x00	; 0
    22c4:	8b 81       	ldd	r24, Y+3	; 0x03
    22c6:	88 2f       	mov	r24, r24
    22c8:	90 e0       	ldi	r25, 0x00	; 0
    22ca:	a9 01       	movw	r20, r18
    22cc:	02 c0       	rjmp	.+4      	; 0x22d2 <GPIO_readPin+0x10e>
    22ce:	55 95       	asr	r21
    22d0:	47 95       	ror	r20
    22d2:	8a 95       	dec	r24
    22d4:	e2 f7       	brpl	.-8      	; 0x22ce <GPIO_readPin+0x10a>
    22d6:	ca 01       	movw	r24, r20
    22d8:	81 70       	andi	r24, 0x01	; 1
    22da:	90 70       	andi	r25, 0x00	; 0
    22dc:	88 23       	and	r24, r24
    22de:	19 f0       	breq	.+6      	; 0x22e6 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    22e0:	81 e0       	ldi	r24, 0x01	; 1
    22e2:	89 83       	std	Y+1, r24	; 0x01
    22e4:	01 c0       	rjmp	.+2      	; 0x22e8 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    22e6:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    22e8:	89 81       	ldd	r24, Y+1	; 0x01
}
    22ea:	0f 90       	pop	r0
    22ec:	0f 90       	pop	r0
    22ee:	0f 90       	pop	r0
    22f0:	0f 90       	pop	r0
    22f2:	0f 90       	pop	r0
    22f4:	cf 91       	pop	r28
    22f6:	df 91       	pop	r29
    22f8:	08 95       	ret

000022fa <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    22fa:	df 93       	push	r29
    22fc:	cf 93       	push	r28
    22fe:	00 d0       	rcall	.+0      	; 0x2300 <GPIO_setupPortDirection+0x6>
    2300:	00 d0       	rcall	.+0      	; 0x2302 <GPIO_setupPortDirection+0x8>
    2302:	cd b7       	in	r28, 0x3d	; 61
    2304:	de b7       	in	r29, 0x3e	; 62
    2306:	89 83       	std	Y+1, r24	; 0x01
    2308:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    230a:	89 81       	ldd	r24, Y+1	; 0x01
    230c:	84 30       	cpi	r24, 0x04	; 4
    230e:	90 f5       	brcc	.+100    	; 0x2374 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    2310:	89 81       	ldd	r24, Y+1	; 0x01
    2312:	28 2f       	mov	r18, r24
    2314:	30 e0       	ldi	r19, 0x00	; 0
    2316:	3c 83       	std	Y+4, r19	; 0x04
    2318:	2b 83       	std	Y+3, r18	; 0x03
    231a:	8b 81       	ldd	r24, Y+3	; 0x03
    231c:	9c 81       	ldd	r25, Y+4	; 0x04
    231e:	81 30       	cpi	r24, 0x01	; 1
    2320:	91 05       	cpc	r25, r1
    2322:	d1 f0       	breq	.+52     	; 0x2358 <GPIO_setupPortDirection+0x5e>
    2324:	2b 81       	ldd	r18, Y+3	; 0x03
    2326:	3c 81       	ldd	r19, Y+4	; 0x04
    2328:	22 30       	cpi	r18, 0x02	; 2
    232a:	31 05       	cpc	r19, r1
    232c:	2c f4       	brge	.+10     	; 0x2338 <GPIO_setupPortDirection+0x3e>
    232e:	8b 81       	ldd	r24, Y+3	; 0x03
    2330:	9c 81       	ldd	r25, Y+4	; 0x04
    2332:	00 97       	sbiw	r24, 0x00	; 0
    2334:	61 f0       	breq	.+24     	; 0x234e <GPIO_setupPortDirection+0x54>
    2336:	1e c0       	rjmp	.+60     	; 0x2374 <GPIO_setupPortDirection+0x7a>
    2338:	2b 81       	ldd	r18, Y+3	; 0x03
    233a:	3c 81       	ldd	r19, Y+4	; 0x04
    233c:	22 30       	cpi	r18, 0x02	; 2
    233e:	31 05       	cpc	r19, r1
    2340:	81 f0       	breq	.+32     	; 0x2362 <GPIO_setupPortDirection+0x68>
    2342:	8b 81       	ldd	r24, Y+3	; 0x03
    2344:	9c 81       	ldd	r25, Y+4	; 0x04
    2346:	83 30       	cpi	r24, 0x03	; 3
    2348:	91 05       	cpc	r25, r1
    234a:	81 f0       	breq	.+32     	; 0x236c <GPIO_setupPortDirection+0x72>
    234c:	13 c0       	rjmp	.+38     	; 0x2374 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    234e:	ea e3       	ldi	r30, 0x3A	; 58
    2350:	f0 e0       	ldi	r31, 0x00	; 0
    2352:	8a 81       	ldd	r24, Y+2	; 0x02
    2354:	80 83       	st	Z, r24
    2356:	0e c0       	rjmp	.+28     	; 0x2374 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    2358:	e7 e3       	ldi	r30, 0x37	; 55
    235a:	f0 e0       	ldi	r31, 0x00	; 0
    235c:	8a 81       	ldd	r24, Y+2	; 0x02
    235e:	80 83       	st	Z, r24
    2360:	09 c0       	rjmp	.+18     	; 0x2374 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    2362:	e4 e3       	ldi	r30, 0x34	; 52
    2364:	f0 e0       	ldi	r31, 0x00	; 0
    2366:	8a 81       	ldd	r24, Y+2	; 0x02
    2368:	80 83       	st	Z, r24
    236a:	04 c0       	rjmp	.+8      	; 0x2374 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    236c:	e1 e3       	ldi	r30, 0x31	; 49
    236e:	f0 e0       	ldi	r31, 0x00	; 0
    2370:	8a 81       	ldd	r24, Y+2	; 0x02
    2372:	80 83       	st	Z, r24
			break;
		}
	}
}
    2374:	0f 90       	pop	r0
    2376:	0f 90       	pop	r0
    2378:	0f 90       	pop	r0
    237a:	0f 90       	pop	r0
    237c:	cf 91       	pop	r28
    237e:	df 91       	pop	r29
    2380:	08 95       	ret

00002382 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    2382:	df 93       	push	r29
    2384:	cf 93       	push	r28
    2386:	00 d0       	rcall	.+0      	; 0x2388 <GPIO_writePort+0x6>
    2388:	00 d0       	rcall	.+0      	; 0x238a <GPIO_writePort+0x8>
    238a:	cd b7       	in	r28, 0x3d	; 61
    238c:	de b7       	in	r29, 0x3e	; 62
    238e:	89 83       	std	Y+1, r24	; 0x01
    2390:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2392:	89 81       	ldd	r24, Y+1	; 0x01
    2394:	84 30       	cpi	r24, 0x04	; 4
    2396:	90 f5       	brcc	.+100    	; 0x23fc <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    2398:	89 81       	ldd	r24, Y+1	; 0x01
    239a:	28 2f       	mov	r18, r24
    239c:	30 e0       	ldi	r19, 0x00	; 0
    239e:	3c 83       	std	Y+4, r19	; 0x04
    23a0:	2b 83       	std	Y+3, r18	; 0x03
    23a2:	8b 81       	ldd	r24, Y+3	; 0x03
    23a4:	9c 81       	ldd	r25, Y+4	; 0x04
    23a6:	81 30       	cpi	r24, 0x01	; 1
    23a8:	91 05       	cpc	r25, r1
    23aa:	d1 f0       	breq	.+52     	; 0x23e0 <GPIO_writePort+0x5e>
    23ac:	2b 81       	ldd	r18, Y+3	; 0x03
    23ae:	3c 81       	ldd	r19, Y+4	; 0x04
    23b0:	22 30       	cpi	r18, 0x02	; 2
    23b2:	31 05       	cpc	r19, r1
    23b4:	2c f4       	brge	.+10     	; 0x23c0 <GPIO_writePort+0x3e>
    23b6:	8b 81       	ldd	r24, Y+3	; 0x03
    23b8:	9c 81       	ldd	r25, Y+4	; 0x04
    23ba:	00 97       	sbiw	r24, 0x00	; 0
    23bc:	61 f0       	breq	.+24     	; 0x23d6 <GPIO_writePort+0x54>
    23be:	1e c0       	rjmp	.+60     	; 0x23fc <GPIO_writePort+0x7a>
    23c0:	2b 81       	ldd	r18, Y+3	; 0x03
    23c2:	3c 81       	ldd	r19, Y+4	; 0x04
    23c4:	22 30       	cpi	r18, 0x02	; 2
    23c6:	31 05       	cpc	r19, r1
    23c8:	81 f0       	breq	.+32     	; 0x23ea <GPIO_writePort+0x68>
    23ca:	8b 81       	ldd	r24, Y+3	; 0x03
    23cc:	9c 81       	ldd	r25, Y+4	; 0x04
    23ce:	83 30       	cpi	r24, 0x03	; 3
    23d0:	91 05       	cpc	r25, r1
    23d2:	81 f0       	breq	.+32     	; 0x23f4 <GPIO_writePort+0x72>
    23d4:	13 c0       	rjmp	.+38     	; 0x23fc <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    23d6:	eb e3       	ldi	r30, 0x3B	; 59
    23d8:	f0 e0       	ldi	r31, 0x00	; 0
    23da:	8a 81       	ldd	r24, Y+2	; 0x02
    23dc:	80 83       	st	Z, r24
    23de:	0e c0       	rjmp	.+28     	; 0x23fc <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    23e0:	e8 e3       	ldi	r30, 0x38	; 56
    23e2:	f0 e0       	ldi	r31, 0x00	; 0
    23e4:	8a 81       	ldd	r24, Y+2	; 0x02
    23e6:	80 83       	st	Z, r24
    23e8:	09 c0       	rjmp	.+18     	; 0x23fc <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    23ea:	e5 e3       	ldi	r30, 0x35	; 53
    23ec:	f0 e0       	ldi	r31, 0x00	; 0
    23ee:	8a 81       	ldd	r24, Y+2	; 0x02
    23f0:	80 83       	st	Z, r24
    23f2:	04 c0       	rjmp	.+8      	; 0x23fc <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    23f4:	e2 e3       	ldi	r30, 0x32	; 50
    23f6:	f0 e0       	ldi	r31, 0x00	; 0
    23f8:	8a 81       	ldd	r24, Y+2	; 0x02
    23fa:	80 83       	st	Z, r24
			break;
		}
	}
}
    23fc:	0f 90       	pop	r0
    23fe:	0f 90       	pop	r0
    2400:	0f 90       	pop	r0
    2402:	0f 90       	pop	r0
    2404:	cf 91       	pop	r28
    2406:	df 91       	pop	r29
    2408:	08 95       	ret

0000240a <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    240a:	df 93       	push	r29
    240c:	cf 93       	push	r28
    240e:	00 d0       	rcall	.+0      	; 0x2410 <GPIO_readPort+0x6>
    2410:	00 d0       	rcall	.+0      	; 0x2412 <GPIO_readPort+0x8>
    2412:	cd b7       	in	r28, 0x3d	; 61
    2414:	de b7       	in	r29, 0x3e	; 62
    2416:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    2418:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    241a:	8a 81       	ldd	r24, Y+2	; 0x02
    241c:	84 30       	cpi	r24, 0x04	; 4
    241e:	90 f5       	brcc	.+100    	; 0x2484 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    2420:	8a 81       	ldd	r24, Y+2	; 0x02
    2422:	28 2f       	mov	r18, r24
    2424:	30 e0       	ldi	r19, 0x00	; 0
    2426:	3c 83       	std	Y+4, r19	; 0x04
    2428:	2b 83       	std	Y+3, r18	; 0x03
    242a:	8b 81       	ldd	r24, Y+3	; 0x03
    242c:	9c 81       	ldd	r25, Y+4	; 0x04
    242e:	81 30       	cpi	r24, 0x01	; 1
    2430:	91 05       	cpc	r25, r1
    2432:	d1 f0       	breq	.+52     	; 0x2468 <GPIO_readPort+0x5e>
    2434:	2b 81       	ldd	r18, Y+3	; 0x03
    2436:	3c 81       	ldd	r19, Y+4	; 0x04
    2438:	22 30       	cpi	r18, 0x02	; 2
    243a:	31 05       	cpc	r19, r1
    243c:	2c f4       	brge	.+10     	; 0x2448 <GPIO_readPort+0x3e>
    243e:	8b 81       	ldd	r24, Y+3	; 0x03
    2440:	9c 81       	ldd	r25, Y+4	; 0x04
    2442:	00 97       	sbiw	r24, 0x00	; 0
    2444:	61 f0       	breq	.+24     	; 0x245e <GPIO_readPort+0x54>
    2446:	1e c0       	rjmp	.+60     	; 0x2484 <GPIO_readPort+0x7a>
    2448:	2b 81       	ldd	r18, Y+3	; 0x03
    244a:	3c 81       	ldd	r19, Y+4	; 0x04
    244c:	22 30       	cpi	r18, 0x02	; 2
    244e:	31 05       	cpc	r19, r1
    2450:	81 f0       	breq	.+32     	; 0x2472 <GPIO_readPort+0x68>
    2452:	8b 81       	ldd	r24, Y+3	; 0x03
    2454:	9c 81       	ldd	r25, Y+4	; 0x04
    2456:	83 30       	cpi	r24, 0x03	; 3
    2458:	91 05       	cpc	r25, r1
    245a:	81 f0       	breq	.+32     	; 0x247c <GPIO_readPort+0x72>
    245c:	13 c0       	rjmp	.+38     	; 0x2484 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    245e:	e9 e3       	ldi	r30, 0x39	; 57
    2460:	f0 e0       	ldi	r31, 0x00	; 0
    2462:	80 81       	ld	r24, Z
    2464:	89 83       	std	Y+1, r24	; 0x01
    2466:	0e c0       	rjmp	.+28     	; 0x2484 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    2468:	e6 e3       	ldi	r30, 0x36	; 54
    246a:	f0 e0       	ldi	r31, 0x00	; 0
    246c:	80 81       	ld	r24, Z
    246e:	89 83       	std	Y+1, r24	; 0x01
    2470:	09 c0       	rjmp	.+18     	; 0x2484 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    2472:	e3 e3       	ldi	r30, 0x33	; 51
    2474:	f0 e0       	ldi	r31, 0x00	; 0
    2476:	80 81       	ld	r24, Z
    2478:	89 83       	std	Y+1, r24	; 0x01
    247a:	04 c0       	rjmp	.+8      	; 0x2484 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    247c:	e0 e3       	ldi	r30, 0x30	; 48
    247e:	f0 e0       	ldi	r31, 0x00	; 0
    2480:	80 81       	ld	r24, Z
    2482:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    2484:	89 81       	ldd	r24, Y+1	; 0x01
}
    2486:	0f 90       	pop	r0
    2488:	0f 90       	pop	r0
    248a:	0f 90       	pop	r0
    248c:	0f 90       	pop	r0
    248e:	cf 91       	pop	r28
    2490:	df 91       	pop	r29
    2492:	08 95       	ret

00002494 <KEYPAD_getPressedKey>:
 * Description :
 * Get the Keypad pressed button
 */

uint8 KEYPAD_getPressedKey(void)
{
    2494:	df 93       	push	r29
    2496:	cf 93       	push	r28
    2498:	00 d0       	rcall	.+0      	; 0x249a <KEYPAD_getPressedKey+0x6>
    249a:	0f 92       	push	r0
    249c:	cd b7       	in	r28, 0x3d	; 61
    249e:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	uint8 keypad_port_value = 0;
    24a0:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    24a2:	1b 82       	std	Y+3, r1	; 0x03
    24a4:	43 c0       	rjmp	.+134    	; 0x252c <KEYPAD_getPressedKey+0x98>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this column will be output pin
			 */
			GPIO_setupPortDirection(KEYPAD_PORT_ID,PORT_INPUT);
    24a6:	81 e0       	ldi	r24, 0x01	; 1
    24a8:	60 e0       	ldi	r22, 0x00	; 0
    24aa:	0e 94 7d 11 	call	0x22fa	; 0x22fa <GPIO_setupPortDirection>
			GPIO_setupPinDirection(KEYPAD_PORT_ID,KEYPAD_FIRST_COLUMN_PIN_ID+col,PIN_OUTPUT);
    24ae:	8b 81       	ldd	r24, Y+3	; 0x03
    24b0:	98 2f       	mov	r25, r24
    24b2:	9c 5f       	subi	r25, 0xFC	; 252
    24b4:	81 e0       	ldi	r24, 0x01	; 1
    24b6:	69 2f       	mov	r22, r25
    24b8:	41 e0       	ldi	r20, 0x01	; 1
    24ba:	0e 94 0c 0f 	call	0x1e18	; 0x1e18 <GPIO_setupPinDirection>

#if(KEYPAD_BUTTON_PRESSED == LOGIC_LOW)
			/* Clear the column output pin and set the rest pins value */
			keypad_port_value = ~(1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
    24be:	8b 81       	ldd	r24, Y+3	; 0x03
    24c0:	88 2f       	mov	r24, r24
    24c2:	90 e0       	ldi	r25, 0x00	; 0
    24c4:	9c 01       	movw	r18, r24
    24c6:	2c 5f       	subi	r18, 0xFC	; 252
    24c8:	3f 4f       	sbci	r19, 0xFF	; 255
    24ca:	81 e0       	ldi	r24, 0x01	; 1
    24cc:	90 e0       	ldi	r25, 0x00	; 0
    24ce:	02 c0       	rjmp	.+4      	; 0x24d4 <KEYPAD_getPressedKey+0x40>
    24d0:	88 0f       	add	r24, r24
    24d2:	99 1f       	adc	r25, r25
    24d4:	2a 95       	dec	r18
    24d6:	e2 f7       	brpl	.-8      	; 0x24d0 <KEYPAD_getPressedKey+0x3c>
    24d8:	80 95       	com	r24
    24da:	89 83       	std	Y+1, r24	; 0x01
#else
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);
    24dc:	81 e0       	ldi	r24, 0x01	; 1
    24de:	69 81       	ldd	r22, Y+1	; 0x01
    24e0:	0e 94 c1 11 	call	0x2382	; 0x2382 <GPIO_writePort>

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    24e4:	1a 82       	std	Y+2, r1	; 0x02
    24e6:	1c c0       	rjmp	.+56     	; 0x2520 <KEYPAD_getPressedKey+0x8c>
			{
				/* Check if the switch is pressed in this row */
				if(GPIO_readPin(KEYPAD_PORT_ID,row+KEYPAD_FIRST_ROW_PIN_ID) == KEYPAD_BUTTON_PRESSED)
    24e8:	81 e0       	ldi	r24, 0x01	; 1
    24ea:	6a 81       	ldd	r22, Y+2	; 0x02
    24ec:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <GPIO_readPin>
    24f0:	88 23       	and	r24, r24
    24f2:	99 f4       	brne	.+38     	; 0x251a <KEYPAD_getPressedKey+0x86>
				{
					#if (KEYPAD_NUM_COLS == 3)
						return KEYPAD_4x3_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
					#elif (KEYPAD_NUM_COLS == 4)
						return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    24f4:	8a 81       	ldd	r24, Y+2	; 0x02
    24f6:	88 2f       	mov	r24, r24
    24f8:	90 e0       	ldi	r25, 0x00	; 0
    24fa:	88 0f       	add	r24, r24
    24fc:	99 1f       	adc	r25, r25
    24fe:	88 0f       	add	r24, r24
    2500:	99 1f       	adc	r25, r25
    2502:	98 2f       	mov	r25, r24
    2504:	8b 81       	ldd	r24, Y+3	; 0x03
    2506:	89 0f       	add	r24, r25
    2508:	8f 5f       	subi	r24, 0xFF	; 255
    250a:	0e 94 9b 12 	call	0x2536	; 0x2536 <KEYPAD_4x4_adjustKeyNumber>
					#endif
				}
			}
		}
	}	
}
    250e:	0f 90       	pop	r0
    2510:	0f 90       	pop	r0
    2512:	0f 90       	pop	r0
    2514:	cf 91       	pop	r28
    2516:	df 91       	pop	r29
    2518:	08 95       	ret
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    251a:	8a 81       	ldd	r24, Y+2	; 0x02
    251c:	8f 5f       	subi	r24, 0xFF	; 255
    251e:	8a 83       	std	Y+2, r24	; 0x02
    2520:	8a 81       	ldd	r24, Y+2	; 0x02
    2522:	84 30       	cpi	r24, 0x04	; 4
    2524:	08 f3       	brcs	.-62     	; 0x24e8 <KEYPAD_getPressedKey+0x54>
{
	uint8 col,row;
	uint8 keypad_port_value = 0;
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    2526:	8b 81       	ldd	r24, Y+3	; 0x03
    2528:	8f 5f       	subi	r24, 0xFF	; 255
    252a:	8b 83       	std	Y+3, r24	; 0x03
    252c:	8b 81       	ldd	r24, Y+3	; 0x03
    252e:	84 30       	cpi	r24, 0x04	; 4
    2530:	08 f4       	brcc	.+2      	; 0x2534 <KEYPAD_getPressedKey+0xa0>
    2532:	b9 cf       	rjmp	.-142    	; 0x24a6 <KEYPAD_getPressedKey+0x12>
    2534:	b6 cf       	rjmp	.-148    	; 0x24a2 <KEYPAD_getPressedKey+0xe>

00002536 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    2536:	df 93       	push	r29
    2538:	cf 93       	push	r28
    253a:	00 d0       	rcall	.+0      	; 0x253c <KEYPAD_4x4_adjustKeyNumber+0x6>
    253c:	00 d0       	rcall	.+0      	; 0x253e <KEYPAD_4x4_adjustKeyNumber+0x8>
    253e:	cd b7       	in	r28, 0x3d	; 61
    2540:	de b7       	in	r29, 0x3e	; 62
    2542:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    2544:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    2546:	8a 81       	ldd	r24, Y+2	; 0x02
    2548:	28 2f       	mov	r18, r24
    254a:	30 e0       	ldi	r19, 0x00	; 0
    254c:	3c 83       	std	Y+4, r19	; 0x04
    254e:	2b 83       	std	Y+3, r18	; 0x03
    2550:	8b 81       	ldd	r24, Y+3	; 0x03
    2552:	9c 81       	ldd	r25, Y+4	; 0x04
    2554:	88 30       	cpi	r24, 0x08	; 8
    2556:	91 05       	cpc	r25, r1
    2558:	09 f4       	brne	.+2      	; 0x255c <KEYPAD_4x4_adjustKeyNumber+0x26>
    255a:	70 c0       	rjmp	.+224    	; 0x263c <KEYPAD_4x4_adjustKeyNumber+0x106>
    255c:	2b 81       	ldd	r18, Y+3	; 0x03
    255e:	3c 81       	ldd	r19, Y+4	; 0x04
    2560:	29 30       	cpi	r18, 0x09	; 9
    2562:	31 05       	cpc	r19, r1
    2564:	5c f5       	brge	.+86     	; 0x25bc <KEYPAD_4x4_adjustKeyNumber+0x86>
    2566:	8b 81       	ldd	r24, Y+3	; 0x03
    2568:	9c 81       	ldd	r25, Y+4	; 0x04
    256a:	84 30       	cpi	r24, 0x04	; 4
    256c:	91 05       	cpc	r25, r1
    256e:	09 f4       	brne	.+2      	; 0x2572 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    2570:	59 c0       	rjmp	.+178    	; 0x2624 <KEYPAD_4x4_adjustKeyNumber+0xee>
    2572:	2b 81       	ldd	r18, Y+3	; 0x03
    2574:	3c 81       	ldd	r19, Y+4	; 0x04
    2576:	25 30       	cpi	r18, 0x05	; 5
    2578:	31 05       	cpc	r19, r1
    257a:	9c f4       	brge	.+38     	; 0x25a2 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    257c:	8b 81       	ldd	r24, Y+3	; 0x03
    257e:	9c 81       	ldd	r25, Y+4	; 0x04
    2580:	82 30       	cpi	r24, 0x02	; 2
    2582:	91 05       	cpc	r25, r1
    2584:	09 f4       	brne	.+2      	; 0x2588 <KEYPAD_4x4_adjustKeyNumber+0x52>
    2586:	48 c0       	rjmp	.+144    	; 0x2618 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    2588:	2b 81       	ldd	r18, Y+3	; 0x03
    258a:	3c 81       	ldd	r19, Y+4	; 0x04
    258c:	23 30       	cpi	r18, 0x03	; 3
    258e:	31 05       	cpc	r19, r1
    2590:	0c f0       	brlt	.+2      	; 0x2594 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    2592:	45 c0       	rjmp	.+138    	; 0x261e <KEYPAD_4x4_adjustKeyNumber+0xe8>
    2594:	8b 81       	ldd	r24, Y+3	; 0x03
    2596:	9c 81       	ldd	r25, Y+4	; 0x04
    2598:	81 30       	cpi	r24, 0x01	; 1
    259a:	91 05       	cpc	r25, r1
    259c:	09 f4       	brne	.+2      	; 0x25a0 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    259e:	39 c0       	rjmp	.+114    	; 0x2612 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    25a0:	67 c0       	rjmp	.+206    	; 0x2670 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    25a2:	2b 81       	ldd	r18, Y+3	; 0x03
    25a4:	3c 81       	ldd	r19, Y+4	; 0x04
    25a6:	26 30       	cpi	r18, 0x06	; 6
    25a8:	31 05       	cpc	r19, r1
    25aa:	09 f4       	brne	.+2      	; 0x25ae <KEYPAD_4x4_adjustKeyNumber+0x78>
    25ac:	41 c0       	rjmp	.+130    	; 0x2630 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    25ae:	8b 81       	ldd	r24, Y+3	; 0x03
    25b0:	9c 81       	ldd	r25, Y+4	; 0x04
    25b2:	87 30       	cpi	r24, 0x07	; 7
    25b4:	91 05       	cpc	r25, r1
    25b6:	0c f0       	brlt	.+2      	; 0x25ba <KEYPAD_4x4_adjustKeyNumber+0x84>
    25b8:	3e c0       	rjmp	.+124    	; 0x2636 <KEYPAD_4x4_adjustKeyNumber+0x100>
    25ba:	37 c0       	rjmp	.+110    	; 0x262a <KEYPAD_4x4_adjustKeyNumber+0xf4>
    25bc:	2b 81       	ldd	r18, Y+3	; 0x03
    25be:	3c 81       	ldd	r19, Y+4	; 0x04
    25c0:	2c 30       	cpi	r18, 0x0C	; 12
    25c2:	31 05       	cpc	r19, r1
    25c4:	09 f4       	brne	.+2      	; 0x25c8 <KEYPAD_4x4_adjustKeyNumber+0x92>
    25c6:	46 c0       	rjmp	.+140    	; 0x2654 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    25c8:	8b 81       	ldd	r24, Y+3	; 0x03
    25ca:	9c 81       	ldd	r25, Y+4	; 0x04
    25cc:	8d 30       	cpi	r24, 0x0D	; 13
    25ce:	91 05       	cpc	r25, r1
    25d0:	5c f4       	brge	.+22     	; 0x25e8 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    25d2:	2b 81       	ldd	r18, Y+3	; 0x03
    25d4:	3c 81       	ldd	r19, Y+4	; 0x04
    25d6:	2a 30       	cpi	r18, 0x0A	; 10
    25d8:	31 05       	cpc	r19, r1
    25da:	b1 f1       	breq	.+108    	; 0x2648 <KEYPAD_4x4_adjustKeyNumber+0x112>
    25dc:	8b 81       	ldd	r24, Y+3	; 0x03
    25de:	9c 81       	ldd	r25, Y+4	; 0x04
    25e0:	8b 30       	cpi	r24, 0x0B	; 11
    25e2:	91 05       	cpc	r25, r1
    25e4:	a4 f5       	brge	.+104    	; 0x264e <KEYPAD_4x4_adjustKeyNumber+0x118>
    25e6:	2d c0       	rjmp	.+90     	; 0x2642 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    25e8:	2b 81       	ldd	r18, Y+3	; 0x03
    25ea:	3c 81       	ldd	r19, Y+4	; 0x04
    25ec:	2e 30       	cpi	r18, 0x0E	; 14
    25ee:	31 05       	cpc	r19, r1
    25f0:	b9 f1       	breq	.+110    	; 0x2660 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    25f2:	8b 81       	ldd	r24, Y+3	; 0x03
    25f4:	9c 81       	ldd	r25, Y+4	; 0x04
    25f6:	8e 30       	cpi	r24, 0x0E	; 14
    25f8:	91 05       	cpc	r25, r1
    25fa:	7c f1       	brlt	.+94     	; 0x265a <KEYPAD_4x4_adjustKeyNumber+0x124>
    25fc:	2b 81       	ldd	r18, Y+3	; 0x03
    25fe:	3c 81       	ldd	r19, Y+4	; 0x04
    2600:	2f 30       	cpi	r18, 0x0F	; 15
    2602:	31 05       	cpc	r19, r1
    2604:	79 f1       	breq	.+94     	; 0x2664 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    2606:	8b 81       	ldd	r24, Y+3	; 0x03
    2608:	9c 81       	ldd	r25, Y+4	; 0x04
    260a:	80 31       	cpi	r24, 0x10	; 16
    260c:	91 05       	cpc	r25, r1
    260e:	69 f1       	breq	.+90     	; 0x266a <KEYPAD_4x4_adjustKeyNumber+0x134>
    2610:	2f c0       	rjmp	.+94     	; 0x2670 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    2612:	87 e0       	ldi	r24, 0x07	; 7
    2614:	89 83       	std	Y+1, r24	; 0x01
    2616:	2e c0       	rjmp	.+92     	; 0x2674 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    2618:	88 e0       	ldi	r24, 0x08	; 8
    261a:	89 83       	std	Y+1, r24	; 0x01
    261c:	2b c0       	rjmp	.+86     	; 0x2674 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    261e:	89 e0       	ldi	r24, 0x09	; 9
    2620:	89 83       	std	Y+1, r24	; 0x01
    2622:	28 c0       	rjmp	.+80     	; 0x2674 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    2624:	85 e2       	ldi	r24, 0x25	; 37
    2626:	89 83       	std	Y+1, r24	; 0x01
    2628:	25 c0       	rjmp	.+74     	; 0x2674 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    262a:	84 e0       	ldi	r24, 0x04	; 4
    262c:	89 83       	std	Y+1, r24	; 0x01
    262e:	22 c0       	rjmp	.+68     	; 0x2674 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    2630:	85 e0       	ldi	r24, 0x05	; 5
    2632:	89 83       	std	Y+1, r24	; 0x01
    2634:	1f c0       	rjmp	.+62     	; 0x2674 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    2636:	86 e0       	ldi	r24, 0x06	; 6
    2638:	89 83       	std	Y+1, r24	; 0x01
    263a:	1c c0       	rjmp	.+56     	; 0x2674 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    263c:	8a e2       	ldi	r24, 0x2A	; 42
    263e:	89 83       	std	Y+1, r24	; 0x01
    2640:	19 c0       	rjmp	.+50     	; 0x2674 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    2642:	81 e0       	ldi	r24, 0x01	; 1
    2644:	89 83       	std	Y+1, r24	; 0x01
    2646:	16 c0       	rjmp	.+44     	; 0x2674 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    2648:	82 e0       	ldi	r24, 0x02	; 2
    264a:	89 83       	std	Y+1, r24	; 0x01
    264c:	13 c0       	rjmp	.+38     	; 0x2674 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    264e:	83 e0       	ldi	r24, 0x03	; 3
    2650:	89 83       	std	Y+1, r24	; 0x01
    2652:	10 c0       	rjmp	.+32     	; 0x2674 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    2654:	8d e2       	ldi	r24, 0x2D	; 45
    2656:	89 83       	std	Y+1, r24	; 0x01
    2658:	0d c0       	rjmp	.+26     	; 0x2674 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    265a:	8d e0       	ldi	r24, 0x0D	; 13
    265c:	89 83       	std	Y+1, r24	; 0x01
    265e:	0a c0       	rjmp	.+20     	; 0x2674 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    2660:	19 82       	std	Y+1, r1	; 0x01
    2662:	08 c0       	rjmp	.+16     	; 0x2674 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    2664:	8d e3       	ldi	r24, 0x3D	; 61
    2666:	89 83       	std	Y+1, r24	; 0x01
    2668:	05 c0       	rjmp	.+10     	; 0x2674 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    266a:	8b e2       	ldi	r24, 0x2B	; 43
    266c:	89 83       	std	Y+1, r24	; 0x01
    266e:	02 c0       	rjmp	.+4      	; 0x2674 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    2670:	8a 81       	ldd	r24, Y+2	; 0x02
    2672:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    2674:	89 81       	ldd	r24, Y+1	; 0x01
} 
    2676:	0f 90       	pop	r0
    2678:	0f 90       	pop	r0
    267a:	0f 90       	pop	r0
    267c:	0f 90       	pop	r0
    267e:	cf 91       	pop	r28
    2680:	df 91       	pop	r29
    2682:	08 95       	ret

00002684 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    2684:	df 93       	push	r29
    2686:	cf 93       	push	r28
    2688:	cd b7       	in	r28, 0x3d	; 61
    268a:	de b7       	in	r29, 0x3e	; 62
	/* Configure the direction for RS, RW and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    268c:	83 e0       	ldi	r24, 0x03	; 3
    268e:	64 e0       	ldi	r22, 0x04	; 4
    2690:	41 e0       	ldi	r20, 0x01	; 1
    2692:	0e 94 0c 0f 	call	0x1e18	; 0x1e18 <GPIO_setupPinDirection>
	//GPIO_setupPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,PIN_OUTPUT);
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    2696:	83 e0       	ldi	r24, 0x03	; 3
    2698:	65 e0       	ldi	r22, 0x05	; 5
    269a:	41 e0       	ldi	r20, 0x01	; 1
    269c:	0e 94 0c 0f 	call	0x1e18	; 0x1e18 <GPIO_setupPinDirection>

	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    26a0:	82 e0       	ldi	r24, 0x02	; 2
    26a2:	6f ef       	ldi	r22, 0xFF	; 255
    26a4:	0e 94 7d 11 	call	0x22fa	; 0x22fa <GPIO_setupPortDirection>

	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    26a8:	88 e3       	ldi	r24, 0x38	; 56
    26aa:	0e 94 60 13 	call	0x26c0	; 0x26c0 <LCD_sendCommand>
	
	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    26ae:	8c e0       	ldi	r24, 0x0C	; 12
    26b0:	0e 94 60 13 	call	0x26c0	; 0x26c0 <LCD_sendCommand>
	
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    26b4:	81 e0       	ldi	r24, 0x01	; 1
    26b6:	0e 94 60 13 	call	0x26c0	; 0x26c0 <LCD_sendCommand>
}
    26ba:	cf 91       	pop	r28
    26bc:	df 91       	pop	r29
    26be:	08 95       	ret

000026c0 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    26c0:	df 93       	push	r29
    26c2:	cf 93       	push	r28
    26c4:	cd b7       	in	r28, 0x3d	; 61
    26c6:	de b7       	in	r29, 0x3e	; 62
    26c8:	e9 97       	sbiw	r28, 0x39	; 57
    26ca:	0f b6       	in	r0, 0x3f	; 63
    26cc:	f8 94       	cli
    26ce:	de bf       	out	0x3e, r29	; 62
    26d0:	0f be       	out	0x3f, r0	; 63
    26d2:	cd bf       	out	0x3d, r28	; 61
    26d4:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    26d6:	83 e0       	ldi	r24, 0x03	; 3
    26d8:	64 e0       	ldi	r22, 0x04	; 4
    26da:	40 e0       	ldi	r20, 0x00	; 0
    26dc:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    26e0:	83 e0       	ldi	r24, 0x03	; 3
    26e2:	61 e0       	ldi	r22, 0x01	; 1
    26e4:	40 e0       	ldi	r20, 0x00	; 0
    26e6:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <GPIO_writePin>
    26ea:	80 e0       	ldi	r24, 0x00	; 0
    26ec:	90 e0       	ldi	r25, 0x00	; 0
    26ee:	a0 e8       	ldi	r26, 0x80	; 128
    26f0:	bf e3       	ldi	r27, 0x3F	; 63
    26f2:	8d ab       	std	Y+53, r24	; 0x35
    26f4:	9e ab       	std	Y+54, r25	; 0x36
    26f6:	af ab       	std	Y+55, r26	; 0x37
    26f8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26fa:	6d a9       	ldd	r22, Y+53	; 0x35
    26fc:	7e a9       	ldd	r23, Y+54	; 0x36
    26fe:	8f a9       	ldd	r24, Y+55	; 0x37
    2700:	98 ad       	ldd	r25, Y+56	; 0x38
    2702:	20 e0       	ldi	r18, 0x00	; 0
    2704:	30 e0       	ldi	r19, 0x00	; 0
    2706:	4a ef       	ldi	r20, 0xFA	; 250
    2708:	54 e4       	ldi	r21, 0x44	; 68
    270a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    270e:	dc 01       	movw	r26, r24
    2710:	cb 01       	movw	r24, r22
    2712:	89 ab       	std	Y+49, r24	; 0x31
    2714:	9a ab       	std	Y+50, r25	; 0x32
    2716:	ab ab       	std	Y+51, r26	; 0x33
    2718:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    271a:	69 a9       	ldd	r22, Y+49	; 0x31
    271c:	7a a9       	ldd	r23, Y+50	; 0x32
    271e:	8b a9       	ldd	r24, Y+51	; 0x33
    2720:	9c a9       	ldd	r25, Y+52	; 0x34
    2722:	20 e0       	ldi	r18, 0x00	; 0
    2724:	30 e0       	ldi	r19, 0x00	; 0
    2726:	40 e8       	ldi	r20, 0x80	; 128
    2728:	5f e3       	ldi	r21, 0x3F	; 63
    272a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    272e:	88 23       	and	r24, r24
    2730:	2c f4       	brge	.+10     	; 0x273c <LCD_sendCommand+0x7c>
		__ticks = 1;
    2732:	81 e0       	ldi	r24, 0x01	; 1
    2734:	90 e0       	ldi	r25, 0x00	; 0
    2736:	98 ab       	std	Y+48, r25	; 0x30
    2738:	8f a7       	std	Y+47, r24	; 0x2f
    273a:	3f c0       	rjmp	.+126    	; 0x27ba <LCD_sendCommand+0xfa>
	else if (__tmp > 65535)
    273c:	69 a9       	ldd	r22, Y+49	; 0x31
    273e:	7a a9       	ldd	r23, Y+50	; 0x32
    2740:	8b a9       	ldd	r24, Y+51	; 0x33
    2742:	9c a9       	ldd	r25, Y+52	; 0x34
    2744:	20 e0       	ldi	r18, 0x00	; 0
    2746:	3f ef       	ldi	r19, 0xFF	; 255
    2748:	4f e7       	ldi	r20, 0x7F	; 127
    274a:	57 e4       	ldi	r21, 0x47	; 71
    274c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2750:	18 16       	cp	r1, r24
    2752:	4c f5       	brge	.+82     	; 0x27a6 <LCD_sendCommand+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2754:	6d a9       	ldd	r22, Y+53	; 0x35
    2756:	7e a9       	ldd	r23, Y+54	; 0x36
    2758:	8f a9       	ldd	r24, Y+55	; 0x37
    275a:	98 ad       	ldd	r25, Y+56	; 0x38
    275c:	20 e0       	ldi	r18, 0x00	; 0
    275e:	30 e0       	ldi	r19, 0x00	; 0
    2760:	40 e2       	ldi	r20, 0x20	; 32
    2762:	51 e4       	ldi	r21, 0x41	; 65
    2764:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2768:	dc 01       	movw	r26, r24
    276a:	cb 01       	movw	r24, r22
    276c:	bc 01       	movw	r22, r24
    276e:	cd 01       	movw	r24, r26
    2770:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2774:	dc 01       	movw	r26, r24
    2776:	cb 01       	movw	r24, r22
    2778:	98 ab       	std	Y+48, r25	; 0x30
    277a:	8f a7       	std	Y+47, r24	; 0x2f
    277c:	0f c0       	rjmp	.+30     	; 0x279c <LCD_sendCommand+0xdc>
    277e:	88 ec       	ldi	r24, 0xC8	; 200
    2780:	90 e0       	ldi	r25, 0x00	; 0
    2782:	9e a7       	std	Y+46, r25	; 0x2e
    2784:	8d a7       	std	Y+45, r24	; 0x2d
    2786:	8d a5       	ldd	r24, Y+45	; 0x2d
    2788:	9e a5       	ldd	r25, Y+46	; 0x2e
    278a:	01 97       	sbiw	r24, 0x01	; 1
    278c:	f1 f7       	brne	.-4      	; 0x278a <LCD_sendCommand+0xca>
    278e:	9e a7       	std	Y+46, r25	; 0x2e
    2790:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2792:	8f a5       	ldd	r24, Y+47	; 0x2f
    2794:	98 a9       	ldd	r25, Y+48	; 0x30
    2796:	01 97       	sbiw	r24, 0x01	; 1
    2798:	98 ab       	std	Y+48, r25	; 0x30
    279a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    279c:	8f a5       	ldd	r24, Y+47	; 0x2f
    279e:	98 a9       	ldd	r25, Y+48	; 0x30
    27a0:	00 97       	sbiw	r24, 0x00	; 0
    27a2:	69 f7       	brne	.-38     	; 0x277e <LCD_sendCommand+0xbe>
    27a4:	14 c0       	rjmp	.+40     	; 0x27ce <LCD_sendCommand+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27a6:	69 a9       	ldd	r22, Y+49	; 0x31
    27a8:	7a a9       	ldd	r23, Y+50	; 0x32
    27aa:	8b a9       	ldd	r24, Y+51	; 0x33
    27ac:	9c a9       	ldd	r25, Y+52	; 0x34
    27ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27b2:	dc 01       	movw	r26, r24
    27b4:	cb 01       	movw	r24, r22
    27b6:	98 ab       	std	Y+48, r25	; 0x30
    27b8:	8f a7       	std	Y+47, r24	; 0x2f
    27ba:	8f a5       	ldd	r24, Y+47	; 0x2f
    27bc:	98 a9       	ldd	r25, Y+48	; 0x30
    27be:	9c a7       	std	Y+44, r25	; 0x2c
    27c0:	8b a7       	std	Y+43, r24	; 0x2b
    27c2:	8b a5       	ldd	r24, Y+43	; 0x2b
    27c4:	9c a5       	ldd	r25, Y+44	; 0x2c
    27c6:	01 97       	sbiw	r24, 0x01	; 1
    27c8:	f1 f7       	brne	.-4      	; 0x27c6 <LCD_sendCommand+0x106>
    27ca:	9c a7       	std	Y+44, r25	; 0x2c
    27cc:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    27ce:	83 e0       	ldi	r24, 0x03	; 3
    27d0:	65 e0       	ldi	r22, 0x05	; 5
    27d2:	41 e0       	ldi	r20, 0x01	; 1
    27d4:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <GPIO_writePin>
    27d8:	80 e0       	ldi	r24, 0x00	; 0
    27da:	90 e0       	ldi	r25, 0x00	; 0
    27dc:	a0 e8       	ldi	r26, 0x80	; 128
    27de:	bf e3       	ldi	r27, 0x3F	; 63
    27e0:	8f a3       	std	Y+39, r24	; 0x27
    27e2:	98 a7       	std	Y+40, r25	; 0x28
    27e4:	a9 a7       	std	Y+41, r26	; 0x29
    27e6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27e8:	6f a1       	ldd	r22, Y+39	; 0x27
    27ea:	78 a5       	ldd	r23, Y+40	; 0x28
    27ec:	89 a5       	ldd	r24, Y+41	; 0x29
    27ee:	9a a5       	ldd	r25, Y+42	; 0x2a
    27f0:	20 e0       	ldi	r18, 0x00	; 0
    27f2:	30 e0       	ldi	r19, 0x00	; 0
    27f4:	4a ef       	ldi	r20, 0xFA	; 250
    27f6:	54 e4       	ldi	r21, 0x44	; 68
    27f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27fc:	dc 01       	movw	r26, r24
    27fe:	cb 01       	movw	r24, r22
    2800:	8b a3       	std	Y+35, r24	; 0x23
    2802:	9c a3       	std	Y+36, r25	; 0x24
    2804:	ad a3       	std	Y+37, r26	; 0x25
    2806:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2808:	6b a1       	ldd	r22, Y+35	; 0x23
    280a:	7c a1       	ldd	r23, Y+36	; 0x24
    280c:	8d a1       	ldd	r24, Y+37	; 0x25
    280e:	9e a1       	ldd	r25, Y+38	; 0x26
    2810:	20 e0       	ldi	r18, 0x00	; 0
    2812:	30 e0       	ldi	r19, 0x00	; 0
    2814:	40 e8       	ldi	r20, 0x80	; 128
    2816:	5f e3       	ldi	r21, 0x3F	; 63
    2818:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    281c:	88 23       	and	r24, r24
    281e:	2c f4       	brge	.+10     	; 0x282a <LCD_sendCommand+0x16a>
		__ticks = 1;
    2820:	81 e0       	ldi	r24, 0x01	; 1
    2822:	90 e0       	ldi	r25, 0x00	; 0
    2824:	9a a3       	std	Y+34, r25	; 0x22
    2826:	89 a3       	std	Y+33, r24	; 0x21
    2828:	3f c0       	rjmp	.+126    	; 0x28a8 <LCD_sendCommand+0x1e8>
	else if (__tmp > 65535)
    282a:	6b a1       	ldd	r22, Y+35	; 0x23
    282c:	7c a1       	ldd	r23, Y+36	; 0x24
    282e:	8d a1       	ldd	r24, Y+37	; 0x25
    2830:	9e a1       	ldd	r25, Y+38	; 0x26
    2832:	20 e0       	ldi	r18, 0x00	; 0
    2834:	3f ef       	ldi	r19, 0xFF	; 255
    2836:	4f e7       	ldi	r20, 0x7F	; 127
    2838:	57 e4       	ldi	r21, 0x47	; 71
    283a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    283e:	18 16       	cp	r1, r24
    2840:	4c f5       	brge	.+82     	; 0x2894 <LCD_sendCommand+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2842:	6f a1       	ldd	r22, Y+39	; 0x27
    2844:	78 a5       	ldd	r23, Y+40	; 0x28
    2846:	89 a5       	ldd	r24, Y+41	; 0x29
    2848:	9a a5       	ldd	r25, Y+42	; 0x2a
    284a:	20 e0       	ldi	r18, 0x00	; 0
    284c:	30 e0       	ldi	r19, 0x00	; 0
    284e:	40 e2       	ldi	r20, 0x20	; 32
    2850:	51 e4       	ldi	r21, 0x41	; 65
    2852:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2856:	dc 01       	movw	r26, r24
    2858:	cb 01       	movw	r24, r22
    285a:	bc 01       	movw	r22, r24
    285c:	cd 01       	movw	r24, r26
    285e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2862:	dc 01       	movw	r26, r24
    2864:	cb 01       	movw	r24, r22
    2866:	9a a3       	std	Y+34, r25	; 0x22
    2868:	89 a3       	std	Y+33, r24	; 0x21
    286a:	0f c0       	rjmp	.+30     	; 0x288a <LCD_sendCommand+0x1ca>
    286c:	88 ec       	ldi	r24, 0xC8	; 200
    286e:	90 e0       	ldi	r25, 0x00	; 0
    2870:	98 a3       	std	Y+32, r25	; 0x20
    2872:	8f 8f       	std	Y+31, r24	; 0x1f
    2874:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2876:	98 a1       	ldd	r25, Y+32	; 0x20
    2878:	01 97       	sbiw	r24, 0x01	; 1
    287a:	f1 f7       	brne	.-4      	; 0x2878 <LCD_sendCommand+0x1b8>
    287c:	98 a3       	std	Y+32, r25	; 0x20
    287e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2880:	89 a1       	ldd	r24, Y+33	; 0x21
    2882:	9a a1       	ldd	r25, Y+34	; 0x22
    2884:	01 97       	sbiw	r24, 0x01	; 1
    2886:	9a a3       	std	Y+34, r25	; 0x22
    2888:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    288a:	89 a1       	ldd	r24, Y+33	; 0x21
    288c:	9a a1       	ldd	r25, Y+34	; 0x22
    288e:	00 97       	sbiw	r24, 0x00	; 0
    2890:	69 f7       	brne	.-38     	; 0x286c <LCD_sendCommand+0x1ac>
    2892:	14 c0       	rjmp	.+40     	; 0x28bc <LCD_sendCommand+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2894:	6b a1       	ldd	r22, Y+35	; 0x23
    2896:	7c a1       	ldd	r23, Y+36	; 0x24
    2898:	8d a1       	ldd	r24, Y+37	; 0x25
    289a:	9e a1       	ldd	r25, Y+38	; 0x26
    289c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28a0:	dc 01       	movw	r26, r24
    28a2:	cb 01       	movw	r24, r22
    28a4:	9a a3       	std	Y+34, r25	; 0x22
    28a6:	89 a3       	std	Y+33, r24	; 0x21
    28a8:	89 a1       	ldd	r24, Y+33	; 0x21
    28aa:	9a a1       	ldd	r25, Y+34	; 0x22
    28ac:	9e 8f       	std	Y+30, r25	; 0x1e
    28ae:	8d 8f       	std	Y+29, r24	; 0x1d
    28b0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    28b2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    28b4:	01 97       	sbiw	r24, 0x01	; 1
    28b6:	f1 f7       	brne	.-4      	; 0x28b4 <LCD_sendCommand+0x1f4>
    28b8:	9e 8f       	std	Y+30, r25	; 0x1e
    28ba:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    28bc:	82 e0       	ldi	r24, 0x02	; 2
    28be:	69 ad       	ldd	r22, Y+57	; 0x39
    28c0:	0e 94 c1 11 	call	0x2382	; 0x2382 <GPIO_writePort>
    28c4:	80 e0       	ldi	r24, 0x00	; 0
    28c6:	90 e0       	ldi	r25, 0x00	; 0
    28c8:	a0 e8       	ldi	r26, 0x80	; 128
    28ca:	bf e3       	ldi	r27, 0x3F	; 63
    28cc:	89 8f       	std	Y+25, r24	; 0x19
    28ce:	9a 8f       	std	Y+26, r25	; 0x1a
    28d0:	ab 8f       	std	Y+27, r26	; 0x1b
    28d2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28d4:	69 8d       	ldd	r22, Y+25	; 0x19
    28d6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    28d8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    28da:	9c 8d       	ldd	r25, Y+28	; 0x1c
    28dc:	20 e0       	ldi	r18, 0x00	; 0
    28de:	30 e0       	ldi	r19, 0x00	; 0
    28e0:	4a ef       	ldi	r20, 0xFA	; 250
    28e2:	54 e4       	ldi	r21, 0x44	; 68
    28e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28e8:	dc 01       	movw	r26, r24
    28ea:	cb 01       	movw	r24, r22
    28ec:	8d 8b       	std	Y+21, r24	; 0x15
    28ee:	9e 8b       	std	Y+22, r25	; 0x16
    28f0:	af 8b       	std	Y+23, r26	; 0x17
    28f2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    28f4:	6d 89       	ldd	r22, Y+21	; 0x15
    28f6:	7e 89       	ldd	r23, Y+22	; 0x16
    28f8:	8f 89       	ldd	r24, Y+23	; 0x17
    28fa:	98 8d       	ldd	r25, Y+24	; 0x18
    28fc:	20 e0       	ldi	r18, 0x00	; 0
    28fe:	30 e0       	ldi	r19, 0x00	; 0
    2900:	40 e8       	ldi	r20, 0x80	; 128
    2902:	5f e3       	ldi	r21, 0x3F	; 63
    2904:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2908:	88 23       	and	r24, r24
    290a:	2c f4       	brge	.+10     	; 0x2916 <LCD_sendCommand+0x256>
		__ticks = 1;
    290c:	81 e0       	ldi	r24, 0x01	; 1
    290e:	90 e0       	ldi	r25, 0x00	; 0
    2910:	9c 8b       	std	Y+20, r25	; 0x14
    2912:	8b 8b       	std	Y+19, r24	; 0x13
    2914:	3f c0       	rjmp	.+126    	; 0x2994 <LCD_sendCommand+0x2d4>
	else if (__tmp > 65535)
    2916:	6d 89       	ldd	r22, Y+21	; 0x15
    2918:	7e 89       	ldd	r23, Y+22	; 0x16
    291a:	8f 89       	ldd	r24, Y+23	; 0x17
    291c:	98 8d       	ldd	r25, Y+24	; 0x18
    291e:	20 e0       	ldi	r18, 0x00	; 0
    2920:	3f ef       	ldi	r19, 0xFF	; 255
    2922:	4f e7       	ldi	r20, 0x7F	; 127
    2924:	57 e4       	ldi	r21, 0x47	; 71
    2926:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    292a:	18 16       	cp	r1, r24
    292c:	4c f5       	brge	.+82     	; 0x2980 <LCD_sendCommand+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    292e:	69 8d       	ldd	r22, Y+25	; 0x19
    2930:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2932:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2934:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2936:	20 e0       	ldi	r18, 0x00	; 0
    2938:	30 e0       	ldi	r19, 0x00	; 0
    293a:	40 e2       	ldi	r20, 0x20	; 32
    293c:	51 e4       	ldi	r21, 0x41	; 65
    293e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2942:	dc 01       	movw	r26, r24
    2944:	cb 01       	movw	r24, r22
    2946:	bc 01       	movw	r22, r24
    2948:	cd 01       	movw	r24, r26
    294a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    294e:	dc 01       	movw	r26, r24
    2950:	cb 01       	movw	r24, r22
    2952:	9c 8b       	std	Y+20, r25	; 0x14
    2954:	8b 8b       	std	Y+19, r24	; 0x13
    2956:	0f c0       	rjmp	.+30     	; 0x2976 <LCD_sendCommand+0x2b6>
    2958:	88 ec       	ldi	r24, 0xC8	; 200
    295a:	90 e0       	ldi	r25, 0x00	; 0
    295c:	9a 8b       	std	Y+18, r25	; 0x12
    295e:	89 8b       	std	Y+17, r24	; 0x11
    2960:	89 89       	ldd	r24, Y+17	; 0x11
    2962:	9a 89       	ldd	r25, Y+18	; 0x12
    2964:	01 97       	sbiw	r24, 0x01	; 1
    2966:	f1 f7       	brne	.-4      	; 0x2964 <LCD_sendCommand+0x2a4>
    2968:	9a 8b       	std	Y+18, r25	; 0x12
    296a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    296c:	8b 89       	ldd	r24, Y+19	; 0x13
    296e:	9c 89       	ldd	r25, Y+20	; 0x14
    2970:	01 97       	sbiw	r24, 0x01	; 1
    2972:	9c 8b       	std	Y+20, r25	; 0x14
    2974:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2976:	8b 89       	ldd	r24, Y+19	; 0x13
    2978:	9c 89       	ldd	r25, Y+20	; 0x14
    297a:	00 97       	sbiw	r24, 0x00	; 0
    297c:	69 f7       	brne	.-38     	; 0x2958 <LCD_sendCommand+0x298>
    297e:	14 c0       	rjmp	.+40     	; 0x29a8 <LCD_sendCommand+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2980:	6d 89       	ldd	r22, Y+21	; 0x15
    2982:	7e 89       	ldd	r23, Y+22	; 0x16
    2984:	8f 89       	ldd	r24, Y+23	; 0x17
    2986:	98 8d       	ldd	r25, Y+24	; 0x18
    2988:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    298c:	dc 01       	movw	r26, r24
    298e:	cb 01       	movw	r24, r22
    2990:	9c 8b       	std	Y+20, r25	; 0x14
    2992:	8b 8b       	std	Y+19, r24	; 0x13
    2994:	8b 89       	ldd	r24, Y+19	; 0x13
    2996:	9c 89       	ldd	r25, Y+20	; 0x14
    2998:	98 8b       	std	Y+16, r25	; 0x10
    299a:	8f 87       	std	Y+15, r24	; 0x0f
    299c:	8f 85       	ldd	r24, Y+15	; 0x0f
    299e:	98 89       	ldd	r25, Y+16	; 0x10
    29a0:	01 97       	sbiw	r24, 0x01	; 1
    29a2:	f1 f7       	brne	.-4      	; 0x29a0 <LCD_sendCommand+0x2e0>
    29a4:	98 8b       	std	Y+16, r25	; 0x10
    29a6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    29a8:	83 e0       	ldi	r24, 0x03	; 3
    29aa:	65 e0       	ldi	r22, 0x05	; 5
    29ac:	40 e0       	ldi	r20, 0x00	; 0
    29ae:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <GPIO_writePin>
    29b2:	80 e0       	ldi	r24, 0x00	; 0
    29b4:	90 e0       	ldi	r25, 0x00	; 0
    29b6:	a0 e8       	ldi	r26, 0x80	; 128
    29b8:	bf e3       	ldi	r27, 0x3F	; 63
    29ba:	8b 87       	std	Y+11, r24	; 0x0b
    29bc:	9c 87       	std	Y+12, r25	; 0x0c
    29be:	ad 87       	std	Y+13, r26	; 0x0d
    29c0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    29c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    29c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    29c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    29ca:	20 e0       	ldi	r18, 0x00	; 0
    29cc:	30 e0       	ldi	r19, 0x00	; 0
    29ce:	4a ef       	ldi	r20, 0xFA	; 250
    29d0:	54 e4       	ldi	r21, 0x44	; 68
    29d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29d6:	dc 01       	movw	r26, r24
    29d8:	cb 01       	movw	r24, r22
    29da:	8f 83       	std	Y+7, r24	; 0x07
    29dc:	98 87       	std	Y+8, r25	; 0x08
    29de:	a9 87       	std	Y+9, r26	; 0x09
    29e0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    29e2:	6f 81       	ldd	r22, Y+7	; 0x07
    29e4:	78 85       	ldd	r23, Y+8	; 0x08
    29e6:	89 85       	ldd	r24, Y+9	; 0x09
    29e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    29ea:	20 e0       	ldi	r18, 0x00	; 0
    29ec:	30 e0       	ldi	r19, 0x00	; 0
    29ee:	40 e8       	ldi	r20, 0x80	; 128
    29f0:	5f e3       	ldi	r21, 0x3F	; 63
    29f2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29f6:	88 23       	and	r24, r24
    29f8:	2c f4       	brge	.+10     	; 0x2a04 <LCD_sendCommand+0x344>
		__ticks = 1;
    29fa:	81 e0       	ldi	r24, 0x01	; 1
    29fc:	90 e0       	ldi	r25, 0x00	; 0
    29fe:	9e 83       	std	Y+6, r25	; 0x06
    2a00:	8d 83       	std	Y+5, r24	; 0x05
    2a02:	3f c0       	rjmp	.+126    	; 0x2a82 <LCD_sendCommand+0x3c2>
	else if (__tmp > 65535)
    2a04:	6f 81       	ldd	r22, Y+7	; 0x07
    2a06:	78 85       	ldd	r23, Y+8	; 0x08
    2a08:	89 85       	ldd	r24, Y+9	; 0x09
    2a0a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a0c:	20 e0       	ldi	r18, 0x00	; 0
    2a0e:	3f ef       	ldi	r19, 0xFF	; 255
    2a10:	4f e7       	ldi	r20, 0x7F	; 127
    2a12:	57 e4       	ldi	r21, 0x47	; 71
    2a14:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a18:	18 16       	cp	r1, r24
    2a1a:	4c f5       	brge	.+82     	; 0x2a6e <LCD_sendCommand+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a1c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a1e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a20:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a22:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a24:	20 e0       	ldi	r18, 0x00	; 0
    2a26:	30 e0       	ldi	r19, 0x00	; 0
    2a28:	40 e2       	ldi	r20, 0x20	; 32
    2a2a:	51 e4       	ldi	r21, 0x41	; 65
    2a2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a30:	dc 01       	movw	r26, r24
    2a32:	cb 01       	movw	r24, r22
    2a34:	bc 01       	movw	r22, r24
    2a36:	cd 01       	movw	r24, r26
    2a38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a3c:	dc 01       	movw	r26, r24
    2a3e:	cb 01       	movw	r24, r22
    2a40:	9e 83       	std	Y+6, r25	; 0x06
    2a42:	8d 83       	std	Y+5, r24	; 0x05
    2a44:	0f c0       	rjmp	.+30     	; 0x2a64 <LCD_sendCommand+0x3a4>
    2a46:	88 ec       	ldi	r24, 0xC8	; 200
    2a48:	90 e0       	ldi	r25, 0x00	; 0
    2a4a:	9c 83       	std	Y+4, r25	; 0x04
    2a4c:	8b 83       	std	Y+3, r24	; 0x03
    2a4e:	8b 81       	ldd	r24, Y+3	; 0x03
    2a50:	9c 81       	ldd	r25, Y+4	; 0x04
    2a52:	01 97       	sbiw	r24, 0x01	; 1
    2a54:	f1 f7       	brne	.-4      	; 0x2a52 <LCD_sendCommand+0x392>
    2a56:	9c 83       	std	Y+4, r25	; 0x04
    2a58:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a5a:	8d 81       	ldd	r24, Y+5	; 0x05
    2a5c:	9e 81       	ldd	r25, Y+6	; 0x06
    2a5e:	01 97       	sbiw	r24, 0x01	; 1
    2a60:	9e 83       	std	Y+6, r25	; 0x06
    2a62:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a64:	8d 81       	ldd	r24, Y+5	; 0x05
    2a66:	9e 81       	ldd	r25, Y+6	; 0x06
    2a68:	00 97       	sbiw	r24, 0x00	; 0
    2a6a:	69 f7       	brne	.-38     	; 0x2a46 <LCD_sendCommand+0x386>
    2a6c:	14 c0       	rjmp	.+40     	; 0x2a96 <LCD_sendCommand+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a6e:	6f 81       	ldd	r22, Y+7	; 0x07
    2a70:	78 85       	ldd	r23, Y+8	; 0x08
    2a72:	89 85       	ldd	r24, Y+9	; 0x09
    2a74:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a7a:	dc 01       	movw	r26, r24
    2a7c:	cb 01       	movw	r24, r22
    2a7e:	9e 83       	std	Y+6, r25	; 0x06
    2a80:	8d 83       	std	Y+5, r24	; 0x05
    2a82:	8d 81       	ldd	r24, Y+5	; 0x05
    2a84:	9e 81       	ldd	r25, Y+6	; 0x06
    2a86:	9a 83       	std	Y+2, r25	; 0x02
    2a88:	89 83       	std	Y+1, r24	; 0x01
    2a8a:	89 81       	ldd	r24, Y+1	; 0x01
    2a8c:	9a 81       	ldd	r25, Y+2	; 0x02
    2a8e:	01 97       	sbiw	r24, 0x01	; 1
    2a90:	f1 f7       	brne	.-4      	; 0x2a8e <LCD_sendCommand+0x3ce>
    2a92:	9a 83       	std	Y+2, r25	; 0x02
    2a94:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    2a96:	e9 96       	adiw	r28, 0x39	; 57
    2a98:	0f b6       	in	r0, 0x3f	; 63
    2a9a:	f8 94       	cli
    2a9c:	de bf       	out	0x3e, r29	; 62
    2a9e:	0f be       	out	0x3f, r0	; 63
    2aa0:	cd bf       	out	0x3d, r28	; 61
    2aa2:	cf 91       	pop	r28
    2aa4:	df 91       	pop	r29
    2aa6:	08 95       	ret

00002aa8 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    2aa8:	df 93       	push	r29
    2aaa:	cf 93       	push	r28
    2aac:	cd b7       	in	r28, 0x3d	; 61
    2aae:	de b7       	in	r29, 0x3e	; 62
    2ab0:	e9 97       	sbiw	r28, 0x39	; 57
    2ab2:	0f b6       	in	r0, 0x3f	; 63
    2ab4:	f8 94       	cli
    2ab6:	de bf       	out	0x3e, r29	; 62
    2ab8:	0f be       	out	0x3f, r0	; 63
    2aba:	cd bf       	out	0x3d, r28	; 61
    2abc:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    2abe:	83 e0       	ldi	r24, 0x03	; 3
    2ac0:	64 e0       	ldi	r22, 0x04	; 4
    2ac2:	41 e0       	ldi	r20, 0x01	; 1
    2ac4:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    2ac8:	83 e0       	ldi	r24, 0x03	; 3
    2aca:	61 e0       	ldi	r22, 0x01	; 1
    2acc:	40 e0       	ldi	r20, 0x00	; 0
    2ace:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <GPIO_writePin>
    2ad2:	80 e0       	ldi	r24, 0x00	; 0
    2ad4:	90 e0       	ldi	r25, 0x00	; 0
    2ad6:	a0 e8       	ldi	r26, 0x80	; 128
    2ad8:	bf e3       	ldi	r27, 0x3F	; 63
    2ada:	8d ab       	std	Y+53, r24	; 0x35
    2adc:	9e ab       	std	Y+54, r25	; 0x36
    2ade:	af ab       	std	Y+55, r26	; 0x37
    2ae0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ae2:	6d a9       	ldd	r22, Y+53	; 0x35
    2ae4:	7e a9       	ldd	r23, Y+54	; 0x36
    2ae6:	8f a9       	ldd	r24, Y+55	; 0x37
    2ae8:	98 ad       	ldd	r25, Y+56	; 0x38
    2aea:	20 e0       	ldi	r18, 0x00	; 0
    2aec:	30 e0       	ldi	r19, 0x00	; 0
    2aee:	4a ef       	ldi	r20, 0xFA	; 250
    2af0:	54 e4       	ldi	r21, 0x44	; 68
    2af2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2af6:	dc 01       	movw	r26, r24
    2af8:	cb 01       	movw	r24, r22
    2afa:	89 ab       	std	Y+49, r24	; 0x31
    2afc:	9a ab       	std	Y+50, r25	; 0x32
    2afe:	ab ab       	std	Y+51, r26	; 0x33
    2b00:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2b02:	69 a9       	ldd	r22, Y+49	; 0x31
    2b04:	7a a9       	ldd	r23, Y+50	; 0x32
    2b06:	8b a9       	ldd	r24, Y+51	; 0x33
    2b08:	9c a9       	ldd	r25, Y+52	; 0x34
    2b0a:	20 e0       	ldi	r18, 0x00	; 0
    2b0c:	30 e0       	ldi	r19, 0x00	; 0
    2b0e:	40 e8       	ldi	r20, 0x80	; 128
    2b10:	5f e3       	ldi	r21, 0x3F	; 63
    2b12:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b16:	88 23       	and	r24, r24
    2b18:	2c f4       	brge	.+10     	; 0x2b24 <LCD_displayCharacter+0x7c>
		__ticks = 1;
    2b1a:	81 e0       	ldi	r24, 0x01	; 1
    2b1c:	90 e0       	ldi	r25, 0x00	; 0
    2b1e:	98 ab       	std	Y+48, r25	; 0x30
    2b20:	8f a7       	std	Y+47, r24	; 0x2f
    2b22:	3f c0       	rjmp	.+126    	; 0x2ba2 <LCD_displayCharacter+0xfa>
	else if (__tmp > 65535)
    2b24:	69 a9       	ldd	r22, Y+49	; 0x31
    2b26:	7a a9       	ldd	r23, Y+50	; 0x32
    2b28:	8b a9       	ldd	r24, Y+51	; 0x33
    2b2a:	9c a9       	ldd	r25, Y+52	; 0x34
    2b2c:	20 e0       	ldi	r18, 0x00	; 0
    2b2e:	3f ef       	ldi	r19, 0xFF	; 255
    2b30:	4f e7       	ldi	r20, 0x7F	; 127
    2b32:	57 e4       	ldi	r21, 0x47	; 71
    2b34:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b38:	18 16       	cp	r1, r24
    2b3a:	4c f5       	brge	.+82     	; 0x2b8e <LCD_displayCharacter+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b3c:	6d a9       	ldd	r22, Y+53	; 0x35
    2b3e:	7e a9       	ldd	r23, Y+54	; 0x36
    2b40:	8f a9       	ldd	r24, Y+55	; 0x37
    2b42:	98 ad       	ldd	r25, Y+56	; 0x38
    2b44:	20 e0       	ldi	r18, 0x00	; 0
    2b46:	30 e0       	ldi	r19, 0x00	; 0
    2b48:	40 e2       	ldi	r20, 0x20	; 32
    2b4a:	51 e4       	ldi	r21, 0x41	; 65
    2b4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b50:	dc 01       	movw	r26, r24
    2b52:	cb 01       	movw	r24, r22
    2b54:	bc 01       	movw	r22, r24
    2b56:	cd 01       	movw	r24, r26
    2b58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b5c:	dc 01       	movw	r26, r24
    2b5e:	cb 01       	movw	r24, r22
    2b60:	98 ab       	std	Y+48, r25	; 0x30
    2b62:	8f a7       	std	Y+47, r24	; 0x2f
    2b64:	0f c0       	rjmp	.+30     	; 0x2b84 <LCD_displayCharacter+0xdc>
    2b66:	88 ec       	ldi	r24, 0xC8	; 200
    2b68:	90 e0       	ldi	r25, 0x00	; 0
    2b6a:	9e a7       	std	Y+46, r25	; 0x2e
    2b6c:	8d a7       	std	Y+45, r24	; 0x2d
    2b6e:	8d a5       	ldd	r24, Y+45	; 0x2d
    2b70:	9e a5       	ldd	r25, Y+46	; 0x2e
    2b72:	01 97       	sbiw	r24, 0x01	; 1
    2b74:	f1 f7       	brne	.-4      	; 0x2b72 <LCD_displayCharacter+0xca>
    2b76:	9e a7       	std	Y+46, r25	; 0x2e
    2b78:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b7a:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b7c:	98 a9       	ldd	r25, Y+48	; 0x30
    2b7e:	01 97       	sbiw	r24, 0x01	; 1
    2b80:	98 ab       	std	Y+48, r25	; 0x30
    2b82:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b84:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b86:	98 a9       	ldd	r25, Y+48	; 0x30
    2b88:	00 97       	sbiw	r24, 0x00	; 0
    2b8a:	69 f7       	brne	.-38     	; 0x2b66 <LCD_displayCharacter+0xbe>
    2b8c:	14 c0       	rjmp	.+40     	; 0x2bb6 <LCD_displayCharacter+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b8e:	69 a9       	ldd	r22, Y+49	; 0x31
    2b90:	7a a9       	ldd	r23, Y+50	; 0x32
    2b92:	8b a9       	ldd	r24, Y+51	; 0x33
    2b94:	9c a9       	ldd	r25, Y+52	; 0x34
    2b96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b9a:	dc 01       	movw	r26, r24
    2b9c:	cb 01       	movw	r24, r22
    2b9e:	98 ab       	std	Y+48, r25	; 0x30
    2ba0:	8f a7       	std	Y+47, r24	; 0x2f
    2ba2:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ba4:	98 a9       	ldd	r25, Y+48	; 0x30
    2ba6:	9c a7       	std	Y+44, r25	; 0x2c
    2ba8:	8b a7       	std	Y+43, r24	; 0x2b
    2baa:	8b a5       	ldd	r24, Y+43	; 0x2b
    2bac:	9c a5       	ldd	r25, Y+44	; 0x2c
    2bae:	01 97       	sbiw	r24, 0x01	; 1
    2bb0:	f1 f7       	brne	.-4      	; 0x2bae <LCD_displayCharacter+0x106>
    2bb2:	9c a7       	std	Y+44, r25	; 0x2c
    2bb4:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2bb6:	83 e0       	ldi	r24, 0x03	; 3
    2bb8:	65 e0       	ldi	r22, 0x05	; 5
    2bba:	41 e0       	ldi	r20, 0x01	; 1
    2bbc:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <GPIO_writePin>
    2bc0:	80 e0       	ldi	r24, 0x00	; 0
    2bc2:	90 e0       	ldi	r25, 0x00	; 0
    2bc4:	a0 e8       	ldi	r26, 0x80	; 128
    2bc6:	bf e3       	ldi	r27, 0x3F	; 63
    2bc8:	8f a3       	std	Y+39, r24	; 0x27
    2bca:	98 a7       	std	Y+40, r25	; 0x28
    2bcc:	a9 a7       	std	Y+41, r26	; 0x29
    2bce:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bd0:	6f a1       	ldd	r22, Y+39	; 0x27
    2bd2:	78 a5       	ldd	r23, Y+40	; 0x28
    2bd4:	89 a5       	ldd	r24, Y+41	; 0x29
    2bd6:	9a a5       	ldd	r25, Y+42	; 0x2a
    2bd8:	20 e0       	ldi	r18, 0x00	; 0
    2bda:	30 e0       	ldi	r19, 0x00	; 0
    2bdc:	4a ef       	ldi	r20, 0xFA	; 250
    2bde:	54 e4       	ldi	r21, 0x44	; 68
    2be0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2be4:	dc 01       	movw	r26, r24
    2be6:	cb 01       	movw	r24, r22
    2be8:	8b a3       	std	Y+35, r24	; 0x23
    2bea:	9c a3       	std	Y+36, r25	; 0x24
    2bec:	ad a3       	std	Y+37, r26	; 0x25
    2bee:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2bf0:	6b a1       	ldd	r22, Y+35	; 0x23
    2bf2:	7c a1       	ldd	r23, Y+36	; 0x24
    2bf4:	8d a1       	ldd	r24, Y+37	; 0x25
    2bf6:	9e a1       	ldd	r25, Y+38	; 0x26
    2bf8:	20 e0       	ldi	r18, 0x00	; 0
    2bfa:	30 e0       	ldi	r19, 0x00	; 0
    2bfc:	40 e8       	ldi	r20, 0x80	; 128
    2bfe:	5f e3       	ldi	r21, 0x3F	; 63
    2c00:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c04:	88 23       	and	r24, r24
    2c06:	2c f4       	brge	.+10     	; 0x2c12 <LCD_displayCharacter+0x16a>
		__ticks = 1;
    2c08:	81 e0       	ldi	r24, 0x01	; 1
    2c0a:	90 e0       	ldi	r25, 0x00	; 0
    2c0c:	9a a3       	std	Y+34, r25	; 0x22
    2c0e:	89 a3       	std	Y+33, r24	; 0x21
    2c10:	3f c0       	rjmp	.+126    	; 0x2c90 <LCD_displayCharacter+0x1e8>
	else if (__tmp > 65535)
    2c12:	6b a1       	ldd	r22, Y+35	; 0x23
    2c14:	7c a1       	ldd	r23, Y+36	; 0x24
    2c16:	8d a1       	ldd	r24, Y+37	; 0x25
    2c18:	9e a1       	ldd	r25, Y+38	; 0x26
    2c1a:	20 e0       	ldi	r18, 0x00	; 0
    2c1c:	3f ef       	ldi	r19, 0xFF	; 255
    2c1e:	4f e7       	ldi	r20, 0x7F	; 127
    2c20:	57 e4       	ldi	r21, 0x47	; 71
    2c22:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c26:	18 16       	cp	r1, r24
    2c28:	4c f5       	brge	.+82     	; 0x2c7c <LCD_displayCharacter+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c2a:	6f a1       	ldd	r22, Y+39	; 0x27
    2c2c:	78 a5       	ldd	r23, Y+40	; 0x28
    2c2e:	89 a5       	ldd	r24, Y+41	; 0x29
    2c30:	9a a5       	ldd	r25, Y+42	; 0x2a
    2c32:	20 e0       	ldi	r18, 0x00	; 0
    2c34:	30 e0       	ldi	r19, 0x00	; 0
    2c36:	40 e2       	ldi	r20, 0x20	; 32
    2c38:	51 e4       	ldi	r21, 0x41	; 65
    2c3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c3e:	dc 01       	movw	r26, r24
    2c40:	cb 01       	movw	r24, r22
    2c42:	bc 01       	movw	r22, r24
    2c44:	cd 01       	movw	r24, r26
    2c46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c4a:	dc 01       	movw	r26, r24
    2c4c:	cb 01       	movw	r24, r22
    2c4e:	9a a3       	std	Y+34, r25	; 0x22
    2c50:	89 a3       	std	Y+33, r24	; 0x21
    2c52:	0f c0       	rjmp	.+30     	; 0x2c72 <LCD_displayCharacter+0x1ca>
    2c54:	88 ec       	ldi	r24, 0xC8	; 200
    2c56:	90 e0       	ldi	r25, 0x00	; 0
    2c58:	98 a3       	std	Y+32, r25	; 0x20
    2c5a:	8f 8f       	std	Y+31, r24	; 0x1f
    2c5c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2c5e:	98 a1       	ldd	r25, Y+32	; 0x20
    2c60:	01 97       	sbiw	r24, 0x01	; 1
    2c62:	f1 f7       	brne	.-4      	; 0x2c60 <LCD_displayCharacter+0x1b8>
    2c64:	98 a3       	std	Y+32, r25	; 0x20
    2c66:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c68:	89 a1       	ldd	r24, Y+33	; 0x21
    2c6a:	9a a1       	ldd	r25, Y+34	; 0x22
    2c6c:	01 97       	sbiw	r24, 0x01	; 1
    2c6e:	9a a3       	std	Y+34, r25	; 0x22
    2c70:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c72:	89 a1       	ldd	r24, Y+33	; 0x21
    2c74:	9a a1       	ldd	r25, Y+34	; 0x22
    2c76:	00 97       	sbiw	r24, 0x00	; 0
    2c78:	69 f7       	brne	.-38     	; 0x2c54 <LCD_displayCharacter+0x1ac>
    2c7a:	14 c0       	rjmp	.+40     	; 0x2ca4 <LCD_displayCharacter+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c7c:	6b a1       	ldd	r22, Y+35	; 0x23
    2c7e:	7c a1       	ldd	r23, Y+36	; 0x24
    2c80:	8d a1       	ldd	r24, Y+37	; 0x25
    2c82:	9e a1       	ldd	r25, Y+38	; 0x26
    2c84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c88:	dc 01       	movw	r26, r24
    2c8a:	cb 01       	movw	r24, r22
    2c8c:	9a a3       	std	Y+34, r25	; 0x22
    2c8e:	89 a3       	std	Y+33, r24	; 0x21
    2c90:	89 a1       	ldd	r24, Y+33	; 0x21
    2c92:	9a a1       	ldd	r25, Y+34	; 0x22
    2c94:	9e 8f       	std	Y+30, r25	; 0x1e
    2c96:	8d 8f       	std	Y+29, r24	; 0x1d
    2c98:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2c9a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2c9c:	01 97       	sbiw	r24, 0x01	; 1
    2c9e:	f1 f7       	brne	.-4      	; 0x2c9c <LCD_displayCharacter+0x1f4>
    2ca0:	9e 8f       	std	Y+30, r25	; 0x1e
    2ca2:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    2ca4:	82 e0       	ldi	r24, 0x02	; 2
    2ca6:	69 ad       	ldd	r22, Y+57	; 0x39
    2ca8:	0e 94 c1 11 	call	0x2382	; 0x2382 <GPIO_writePort>
    2cac:	80 e0       	ldi	r24, 0x00	; 0
    2cae:	90 e0       	ldi	r25, 0x00	; 0
    2cb0:	a0 e8       	ldi	r26, 0x80	; 128
    2cb2:	bf e3       	ldi	r27, 0x3F	; 63
    2cb4:	89 8f       	std	Y+25, r24	; 0x19
    2cb6:	9a 8f       	std	Y+26, r25	; 0x1a
    2cb8:	ab 8f       	std	Y+27, r26	; 0x1b
    2cba:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cbc:	69 8d       	ldd	r22, Y+25	; 0x19
    2cbe:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2cc0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2cc2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2cc4:	20 e0       	ldi	r18, 0x00	; 0
    2cc6:	30 e0       	ldi	r19, 0x00	; 0
    2cc8:	4a ef       	ldi	r20, 0xFA	; 250
    2cca:	54 e4       	ldi	r21, 0x44	; 68
    2ccc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cd0:	dc 01       	movw	r26, r24
    2cd2:	cb 01       	movw	r24, r22
    2cd4:	8d 8b       	std	Y+21, r24	; 0x15
    2cd6:	9e 8b       	std	Y+22, r25	; 0x16
    2cd8:	af 8b       	std	Y+23, r26	; 0x17
    2cda:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2cdc:	6d 89       	ldd	r22, Y+21	; 0x15
    2cde:	7e 89       	ldd	r23, Y+22	; 0x16
    2ce0:	8f 89       	ldd	r24, Y+23	; 0x17
    2ce2:	98 8d       	ldd	r25, Y+24	; 0x18
    2ce4:	20 e0       	ldi	r18, 0x00	; 0
    2ce6:	30 e0       	ldi	r19, 0x00	; 0
    2ce8:	40 e8       	ldi	r20, 0x80	; 128
    2cea:	5f e3       	ldi	r21, 0x3F	; 63
    2cec:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2cf0:	88 23       	and	r24, r24
    2cf2:	2c f4       	brge	.+10     	; 0x2cfe <LCD_displayCharacter+0x256>
		__ticks = 1;
    2cf4:	81 e0       	ldi	r24, 0x01	; 1
    2cf6:	90 e0       	ldi	r25, 0x00	; 0
    2cf8:	9c 8b       	std	Y+20, r25	; 0x14
    2cfa:	8b 8b       	std	Y+19, r24	; 0x13
    2cfc:	3f c0       	rjmp	.+126    	; 0x2d7c <LCD_displayCharacter+0x2d4>
	else if (__tmp > 65535)
    2cfe:	6d 89       	ldd	r22, Y+21	; 0x15
    2d00:	7e 89       	ldd	r23, Y+22	; 0x16
    2d02:	8f 89       	ldd	r24, Y+23	; 0x17
    2d04:	98 8d       	ldd	r25, Y+24	; 0x18
    2d06:	20 e0       	ldi	r18, 0x00	; 0
    2d08:	3f ef       	ldi	r19, 0xFF	; 255
    2d0a:	4f e7       	ldi	r20, 0x7F	; 127
    2d0c:	57 e4       	ldi	r21, 0x47	; 71
    2d0e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d12:	18 16       	cp	r1, r24
    2d14:	4c f5       	brge	.+82     	; 0x2d68 <LCD_displayCharacter+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d16:	69 8d       	ldd	r22, Y+25	; 0x19
    2d18:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d1a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d1c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d1e:	20 e0       	ldi	r18, 0x00	; 0
    2d20:	30 e0       	ldi	r19, 0x00	; 0
    2d22:	40 e2       	ldi	r20, 0x20	; 32
    2d24:	51 e4       	ldi	r21, 0x41	; 65
    2d26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d2a:	dc 01       	movw	r26, r24
    2d2c:	cb 01       	movw	r24, r22
    2d2e:	bc 01       	movw	r22, r24
    2d30:	cd 01       	movw	r24, r26
    2d32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d36:	dc 01       	movw	r26, r24
    2d38:	cb 01       	movw	r24, r22
    2d3a:	9c 8b       	std	Y+20, r25	; 0x14
    2d3c:	8b 8b       	std	Y+19, r24	; 0x13
    2d3e:	0f c0       	rjmp	.+30     	; 0x2d5e <LCD_displayCharacter+0x2b6>
    2d40:	88 ec       	ldi	r24, 0xC8	; 200
    2d42:	90 e0       	ldi	r25, 0x00	; 0
    2d44:	9a 8b       	std	Y+18, r25	; 0x12
    2d46:	89 8b       	std	Y+17, r24	; 0x11
    2d48:	89 89       	ldd	r24, Y+17	; 0x11
    2d4a:	9a 89       	ldd	r25, Y+18	; 0x12
    2d4c:	01 97       	sbiw	r24, 0x01	; 1
    2d4e:	f1 f7       	brne	.-4      	; 0x2d4c <LCD_displayCharacter+0x2a4>
    2d50:	9a 8b       	std	Y+18, r25	; 0x12
    2d52:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d54:	8b 89       	ldd	r24, Y+19	; 0x13
    2d56:	9c 89       	ldd	r25, Y+20	; 0x14
    2d58:	01 97       	sbiw	r24, 0x01	; 1
    2d5a:	9c 8b       	std	Y+20, r25	; 0x14
    2d5c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d5e:	8b 89       	ldd	r24, Y+19	; 0x13
    2d60:	9c 89       	ldd	r25, Y+20	; 0x14
    2d62:	00 97       	sbiw	r24, 0x00	; 0
    2d64:	69 f7       	brne	.-38     	; 0x2d40 <LCD_displayCharacter+0x298>
    2d66:	14 c0       	rjmp	.+40     	; 0x2d90 <LCD_displayCharacter+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d68:	6d 89       	ldd	r22, Y+21	; 0x15
    2d6a:	7e 89       	ldd	r23, Y+22	; 0x16
    2d6c:	8f 89       	ldd	r24, Y+23	; 0x17
    2d6e:	98 8d       	ldd	r25, Y+24	; 0x18
    2d70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d74:	dc 01       	movw	r26, r24
    2d76:	cb 01       	movw	r24, r22
    2d78:	9c 8b       	std	Y+20, r25	; 0x14
    2d7a:	8b 8b       	std	Y+19, r24	; 0x13
    2d7c:	8b 89       	ldd	r24, Y+19	; 0x13
    2d7e:	9c 89       	ldd	r25, Y+20	; 0x14
    2d80:	98 8b       	std	Y+16, r25	; 0x10
    2d82:	8f 87       	std	Y+15, r24	; 0x0f
    2d84:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d86:	98 89       	ldd	r25, Y+16	; 0x10
    2d88:	01 97       	sbiw	r24, 0x01	; 1
    2d8a:	f1 f7       	brne	.-4      	; 0x2d88 <LCD_displayCharacter+0x2e0>
    2d8c:	98 8b       	std	Y+16, r25	; 0x10
    2d8e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2d90:	83 e0       	ldi	r24, 0x03	; 3
    2d92:	65 e0       	ldi	r22, 0x05	; 5
    2d94:	40 e0       	ldi	r20, 0x00	; 0
    2d96:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <GPIO_writePin>
    2d9a:	80 e0       	ldi	r24, 0x00	; 0
    2d9c:	90 e0       	ldi	r25, 0x00	; 0
    2d9e:	a0 e8       	ldi	r26, 0x80	; 128
    2da0:	bf e3       	ldi	r27, 0x3F	; 63
    2da2:	8b 87       	std	Y+11, r24	; 0x0b
    2da4:	9c 87       	std	Y+12, r25	; 0x0c
    2da6:	ad 87       	std	Y+13, r26	; 0x0d
    2da8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2daa:	6b 85       	ldd	r22, Y+11	; 0x0b
    2dac:	7c 85       	ldd	r23, Y+12	; 0x0c
    2dae:	8d 85       	ldd	r24, Y+13	; 0x0d
    2db0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2db2:	20 e0       	ldi	r18, 0x00	; 0
    2db4:	30 e0       	ldi	r19, 0x00	; 0
    2db6:	4a ef       	ldi	r20, 0xFA	; 250
    2db8:	54 e4       	ldi	r21, 0x44	; 68
    2dba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dbe:	dc 01       	movw	r26, r24
    2dc0:	cb 01       	movw	r24, r22
    2dc2:	8f 83       	std	Y+7, r24	; 0x07
    2dc4:	98 87       	std	Y+8, r25	; 0x08
    2dc6:	a9 87       	std	Y+9, r26	; 0x09
    2dc8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2dca:	6f 81       	ldd	r22, Y+7	; 0x07
    2dcc:	78 85       	ldd	r23, Y+8	; 0x08
    2dce:	89 85       	ldd	r24, Y+9	; 0x09
    2dd0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dd2:	20 e0       	ldi	r18, 0x00	; 0
    2dd4:	30 e0       	ldi	r19, 0x00	; 0
    2dd6:	40 e8       	ldi	r20, 0x80	; 128
    2dd8:	5f e3       	ldi	r21, 0x3F	; 63
    2dda:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2dde:	88 23       	and	r24, r24
    2de0:	2c f4       	brge	.+10     	; 0x2dec <LCD_displayCharacter+0x344>
		__ticks = 1;
    2de2:	81 e0       	ldi	r24, 0x01	; 1
    2de4:	90 e0       	ldi	r25, 0x00	; 0
    2de6:	9e 83       	std	Y+6, r25	; 0x06
    2de8:	8d 83       	std	Y+5, r24	; 0x05
    2dea:	3f c0       	rjmp	.+126    	; 0x2e6a <LCD_displayCharacter+0x3c2>
	else if (__tmp > 65535)
    2dec:	6f 81       	ldd	r22, Y+7	; 0x07
    2dee:	78 85       	ldd	r23, Y+8	; 0x08
    2df0:	89 85       	ldd	r24, Y+9	; 0x09
    2df2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2df4:	20 e0       	ldi	r18, 0x00	; 0
    2df6:	3f ef       	ldi	r19, 0xFF	; 255
    2df8:	4f e7       	ldi	r20, 0x7F	; 127
    2dfa:	57 e4       	ldi	r21, 0x47	; 71
    2dfc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e00:	18 16       	cp	r1, r24
    2e02:	4c f5       	brge	.+82     	; 0x2e56 <LCD_displayCharacter+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e04:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e06:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e08:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e0a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e0c:	20 e0       	ldi	r18, 0x00	; 0
    2e0e:	30 e0       	ldi	r19, 0x00	; 0
    2e10:	40 e2       	ldi	r20, 0x20	; 32
    2e12:	51 e4       	ldi	r21, 0x41	; 65
    2e14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e18:	dc 01       	movw	r26, r24
    2e1a:	cb 01       	movw	r24, r22
    2e1c:	bc 01       	movw	r22, r24
    2e1e:	cd 01       	movw	r24, r26
    2e20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e24:	dc 01       	movw	r26, r24
    2e26:	cb 01       	movw	r24, r22
    2e28:	9e 83       	std	Y+6, r25	; 0x06
    2e2a:	8d 83       	std	Y+5, r24	; 0x05
    2e2c:	0f c0       	rjmp	.+30     	; 0x2e4c <LCD_displayCharacter+0x3a4>
    2e2e:	88 ec       	ldi	r24, 0xC8	; 200
    2e30:	90 e0       	ldi	r25, 0x00	; 0
    2e32:	9c 83       	std	Y+4, r25	; 0x04
    2e34:	8b 83       	std	Y+3, r24	; 0x03
    2e36:	8b 81       	ldd	r24, Y+3	; 0x03
    2e38:	9c 81       	ldd	r25, Y+4	; 0x04
    2e3a:	01 97       	sbiw	r24, 0x01	; 1
    2e3c:	f1 f7       	brne	.-4      	; 0x2e3a <LCD_displayCharacter+0x392>
    2e3e:	9c 83       	std	Y+4, r25	; 0x04
    2e40:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e42:	8d 81       	ldd	r24, Y+5	; 0x05
    2e44:	9e 81       	ldd	r25, Y+6	; 0x06
    2e46:	01 97       	sbiw	r24, 0x01	; 1
    2e48:	9e 83       	std	Y+6, r25	; 0x06
    2e4a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e4c:	8d 81       	ldd	r24, Y+5	; 0x05
    2e4e:	9e 81       	ldd	r25, Y+6	; 0x06
    2e50:	00 97       	sbiw	r24, 0x00	; 0
    2e52:	69 f7       	brne	.-38     	; 0x2e2e <LCD_displayCharacter+0x386>
    2e54:	14 c0       	rjmp	.+40     	; 0x2e7e <LCD_displayCharacter+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e56:	6f 81       	ldd	r22, Y+7	; 0x07
    2e58:	78 85       	ldd	r23, Y+8	; 0x08
    2e5a:	89 85       	ldd	r24, Y+9	; 0x09
    2e5c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e62:	dc 01       	movw	r26, r24
    2e64:	cb 01       	movw	r24, r22
    2e66:	9e 83       	std	Y+6, r25	; 0x06
    2e68:	8d 83       	std	Y+5, r24	; 0x05
    2e6a:	8d 81       	ldd	r24, Y+5	; 0x05
    2e6c:	9e 81       	ldd	r25, Y+6	; 0x06
    2e6e:	9a 83       	std	Y+2, r25	; 0x02
    2e70:	89 83       	std	Y+1, r24	; 0x01
    2e72:	89 81       	ldd	r24, Y+1	; 0x01
    2e74:	9a 81       	ldd	r25, Y+2	; 0x02
    2e76:	01 97       	sbiw	r24, 0x01	; 1
    2e78:	f1 f7       	brne	.-4      	; 0x2e76 <LCD_displayCharacter+0x3ce>
    2e7a:	9a 83       	std	Y+2, r25	; 0x02
    2e7c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    2e7e:	e9 96       	adiw	r28, 0x39	; 57
    2e80:	0f b6       	in	r0, 0x3f	; 63
    2e82:	f8 94       	cli
    2e84:	de bf       	out	0x3e, r29	; 62
    2e86:	0f be       	out	0x3f, r0	; 63
    2e88:	cd bf       	out	0x3d, r28	; 61
    2e8a:	cf 91       	pop	r28
    2e8c:	df 91       	pop	r29
    2e8e:	08 95       	ret

00002e90 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    2e90:	df 93       	push	r29
    2e92:	cf 93       	push	r28
    2e94:	00 d0       	rcall	.+0      	; 0x2e96 <LCD_displayString+0x6>
    2e96:	0f 92       	push	r0
    2e98:	cd b7       	in	r28, 0x3d	; 61
    2e9a:	de b7       	in	r29, 0x3e	; 62
    2e9c:	9b 83       	std	Y+3, r25	; 0x03
    2e9e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2ea0:	19 82       	std	Y+1, r1	; 0x01
    2ea2:	0e c0       	rjmp	.+28     	; 0x2ec0 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2ea4:	89 81       	ldd	r24, Y+1	; 0x01
    2ea6:	28 2f       	mov	r18, r24
    2ea8:	30 e0       	ldi	r19, 0x00	; 0
    2eaa:	8a 81       	ldd	r24, Y+2	; 0x02
    2eac:	9b 81       	ldd	r25, Y+3	; 0x03
    2eae:	fc 01       	movw	r30, r24
    2eb0:	e2 0f       	add	r30, r18
    2eb2:	f3 1f       	adc	r31, r19
    2eb4:	80 81       	ld	r24, Z
    2eb6:	0e 94 54 15 	call	0x2aa8	; 0x2aa8 <LCD_displayCharacter>
		i++;
    2eba:	89 81       	ldd	r24, Y+1	; 0x01
    2ebc:	8f 5f       	subi	r24, 0xFF	; 255
    2ebe:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2ec0:	89 81       	ldd	r24, Y+1	; 0x01
    2ec2:	28 2f       	mov	r18, r24
    2ec4:	30 e0       	ldi	r19, 0x00	; 0
    2ec6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ec8:	9b 81       	ldd	r25, Y+3	; 0x03
    2eca:	fc 01       	movw	r30, r24
    2ecc:	e2 0f       	add	r30, r18
    2ece:	f3 1f       	adc	r31, r19
    2ed0:	80 81       	ld	r24, Z
    2ed2:	88 23       	and	r24, r24
    2ed4:	39 f7       	brne	.-50     	; 0x2ea4 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    2ed6:	0f 90       	pop	r0
    2ed8:	0f 90       	pop	r0
    2eda:	0f 90       	pop	r0
    2edc:	cf 91       	pop	r28
    2ede:	df 91       	pop	r29
    2ee0:	08 95       	ret

00002ee2 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    2ee2:	df 93       	push	r29
    2ee4:	cf 93       	push	r28
    2ee6:	00 d0       	rcall	.+0      	; 0x2ee8 <LCD_moveCursor+0x6>
    2ee8:	00 d0       	rcall	.+0      	; 0x2eea <LCD_moveCursor+0x8>
    2eea:	0f 92       	push	r0
    2eec:	cd b7       	in	r28, 0x3d	; 61
    2eee:	de b7       	in	r29, 0x3e	; 62
    2ef0:	8a 83       	std	Y+2, r24	; 0x02
    2ef2:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    2ef4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ef6:	28 2f       	mov	r18, r24
    2ef8:	30 e0       	ldi	r19, 0x00	; 0
    2efa:	3d 83       	std	Y+5, r19	; 0x05
    2efc:	2c 83       	std	Y+4, r18	; 0x04
    2efe:	8c 81       	ldd	r24, Y+4	; 0x04
    2f00:	9d 81       	ldd	r25, Y+5	; 0x05
    2f02:	81 30       	cpi	r24, 0x01	; 1
    2f04:	91 05       	cpc	r25, r1
    2f06:	c1 f0       	breq	.+48     	; 0x2f38 <LCD_moveCursor+0x56>
    2f08:	2c 81       	ldd	r18, Y+4	; 0x04
    2f0a:	3d 81       	ldd	r19, Y+5	; 0x05
    2f0c:	22 30       	cpi	r18, 0x02	; 2
    2f0e:	31 05       	cpc	r19, r1
    2f10:	2c f4       	brge	.+10     	; 0x2f1c <LCD_moveCursor+0x3a>
    2f12:	8c 81       	ldd	r24, Y+4	; 0x04
    2f14:	9d 81       	ldd	r25, Y+5	; 0x05
    2f16:	00 97       	sbiw	r24, 0x00	; 0
    2f18:	61 f0       	breq	.+24     	; 0x2f32 <LCD_moveCursor+0x50>
    2f1a:	19 c0       	rjmp	.+50     	; 0x2f4e <LCD_moveCursor+0x6c>
    2f1c:	2c 81       	ldd	r18, Y+4	; 0x04
    2f1e:	3d 81       	ldd	r19, Y+5	; 0x05
    2f20:	22 30       	cpi	r18, 0x02	; 2
    2f22:	31 05       	cpc	r19, r1
    2f24:	69 f0       	breq	.+26     	; 0x2f40 <LCD_moveCursor+0x5e>
    2f26:	8c 81       	ldd	r24, Y+4	; 0x04
    2f28:	9d 81       	ldd	r25, Y+5	; 0x05
    2f2a:	83 30       	cpi	r24, 0x03	; 3
    2f2c:	91 05       	cpc	r25, r1
    2f2e:	61 f0       	breq	.+24     	; 0x2f48 <LCD_moveCursor+0x66>
    2f30:	0e c0       	rjmp	.+28     	; 0x2f4e <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    2f32:	8b 81       	ldd	r24, Y+3	; 0x03
    2f34:	89 83       	std	Y+1, r24	; 0x01
    2f36:	0b c0       	rjmp	.+22     	; 0x2f4e <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    2f38:	8b 81       	ldd	r24, Y+3	; 0x03
    2f3a:	80 5c       	subi	r24, 0xC0	; 192
    2f3c:	89 83       	std	Y+1, r24	; 0x01
    2f3e:	07 c0       	rjmp	.+14     	; 0x2f4e <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    2f40:	8b 81       	ldd	r24, Y+3	; 0x03
    2f42:	80 5f       	subi	r24, 0xF0	; 240
    2f44:	89 83       	std	Y+1, r24	; 0x01
    2f46:	03 c0       	rjmp	.+6      	; 0x2f4e <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    2f48:	8b 81       	ldd	r24, Y+3	; 0x03
    2f4a:	80 5b       	subi	r24, 0xB0	; 176
    2f4c:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2f4e:	89 81       	ldd	r24, Y+1	; 0x01
    2f50:	80 68       	ori	r24, 0x80	; 128
    2f52:	0e 94 60 13 	call	0x26c0	; 0x26c0 <LCD_sendCommand>
}
    2f56:	0f 90       	pop	r0
    2f58:	0f 90       	pop	r0
    2f5a:	0f 90       	pop	r0
    2f5c:	0f 90       	pop	r0
    2f5e:	0f 90       	pop	r0
    2f60:	cf 91       	pop	r28
    2f62:	df 91       	pop	r29
    2f64:	08 95       	ret

00002f66 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2f66:	df 93       	push	r29
    2f68:	cf 93       	push	r28
    2f6a:	00 d0       	rcall	.+0      	; 0x2f6c <LCD_displayStringRowColumn+0x6>
    2f6c:	00 d0       	rcall	.+0      	; 0x2f6e <LCD_displayStringRowColumn+0x8>
    2f6e:	cd b7       	in	r28, 0x3d	; 61
    2f70:	de b7       	in	r29, 0x3e	; 62
    2f72:	89 83       	std	Y+1, r24	; 0x01
    2f74:	6a 83       	std	Y+2, r22	; 0x02
    2f76:	5c 83       	std	Y+4, r21	; 0x04
    2f78:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    2f7a:	89 81       	ldd	r24, Y+1	; 0x01
    2f7c:	6a 81       	ldd	r22, Y+2	; 0x02
    2f7e:	0e 94 71 17 	call	0x2ee2	; 0x2ee2 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    2f82:	8b 81       	ldd	r24, Y+3	; 0x03
    2f84:	9c 81       	ldd	r25, Y+4	; 0x04
    2f86:	0e 94 48 17 	call	0x2e90	; 0x2e90 <LCD_displayString>
}
    2f8a:	0f 90       	pop	r0
    2f8c:	0f 90       	pop	r0
    2f8e:	0f 90       	pop	r0
    2f90:	0f 90       	pop	r0
    2f92:	cf 91       	pop	r28
    2f94:	df 91       	pop	r29
    2f96:	08 95       	ret

00002f98 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    2f98:	df 93       	push	r29
    2f9a:	cf 93       	push	r28
    2f9c:	cd b7       	in	r28, 0x3d	; 61
    2f9e:	de b7       	in	r29, 0x3e	; 62
    2fa0:	62 97       	sbiw	r28, 0x12	; 18
    2fa2:	0f b6       	in	r0, 0x3f	; 63
    2fa4:	f8 94       	cli
    2fa6:	de bf       	out	0x3e, r29	; 62
    2fa8:	0f be       	out	0x3f, r0	; 63
    2faa:	cd bf       	out	0x3d, r28	; 61
    2fac:	9a 8b       	std	Y+18, r25	; 0x12
    2fae:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2fb0:	89 89       	ldd	r24, Y+17	; 0x11
    2fb2:	9a 89       	ldd	r25, Y+18	; 0x12
    2fb4:	9e 01       	movw	r18, r28
    2fb6:	2f 5f       	subi	r18, 0xFF	; 255
    2fb8:	3f 4f       	sbci	r19, 0xFF	; 255
    2fba:	b9 01       	movw	r22, r18
    2fbc:	4a e0       	ldi	r20, 0x0A	; 10
    2fbe:	50 e0       	ldi	r21, 0x00	; 0
    2fc0:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <itoa>
   LCD_displayString(buff); /* Display the string */
    2fc4:	ce 01       	movw	r24, r28
    2fc6:	01 96       	adiw	r24, 0x01	; 1
    2fc8:	0e 94 48 17 	call	0x2e90	; 0x2e90 <LCD_displayString>
}
    2fcc:	62 96       	adiw	r28, 0x12	; 18
    2fce:	0f b6       	in	r0, 0x3f	; 63
    2fd0:	f8 94       	cli
    2fd2:	de bf       	out	0x3e, r29	; 62
    2fd4:	0f be       	out	0x3f, r0	; 63
    2fd6:	cd bf       	out	0x3d, r28	; 61
    2fd8:	cf 91       	pop	r28
    2fda:	df 91       	pop	r29
    2fdc:	08 95       	ret

00002fde <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    2fde:	df 93       	push	r29
    2fe0:	cf 93       	push	r28
    2fe2:	cd b7       	in	r28, 0x3d	; 61
    2fe4:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2fe6:	81 e0       	ldi	r24, 0x01	; 1
    2fe8:	0e 94 60 13 	call	0x26c0	; 0x26c0 <LCD_sendCommand>
}
    2fec:	cf 91       	pop	r28
    2fee:	df 91       	pop	r29
    2ff0:	08 95       	ret

00002ff2 <__vector_7>:
/*******************************************************************************
 *                      	Functions Definitions                              *
 *******************************************************************************/
/* Timer 1 Compare Mode Interrupt ISR */
ISR(TIMER1_COMPA_vect)
{
    2ff2:	1f 92       	push	r1
    2ff4:	0f 92       	push	r0
    2ff6:	0f b6       	in	r0, 0x3f	; 63
    2ff8:	0f 92       	push	r0
    2ffa:	11 24       	eor	r1, r1
    2ffc:	2f 93       	push	r18
    2ffe:	3f 93       	push	r19
    3000:	4f 93       	push	r20
    3002:	5f 93       	push	r21
    3004:	6f 93       	push	r22
    3006:	7f 93       	push	r23
    3008:	8f 93       	push	r24
    300a:	9f 93       	push	r25
    300c:	af 93       	push	r26
    300e:	bf 93       	push	r27
    3010:	ef 93       	push	r30
    3012:	ff 93       	push	r31
    3014:	df 93       	push	r29
    3016:	cf 93       	push	r28
    3018:	cd b7       	in	r28, 0x3d	; 61
    301a:	de b7       	in	r29, 0x3e	; 62
	/*Increment the ticks of the program*/
	if(g_callBackPtr != NULL_PTR){
    301c:	80 91 2f 01 	lds	r24, 0x012F
    3020:	90 91 30 01 	lds	r25, 0x0130
    3024:	00 97       	sbiw	r24, 0x00	; 0
    3026:	29 f0       	breq	.+10     	; 0x3032 <__vector_7+0x40>
		(*g_callBackPtr)();
    3028:	e0 91 2f 01 	lds	r30, 0x012F
    302c:	f0 91 30 01 	lds	r31, 0x0130
    3030:	09 95       	icall
	}
}
    3032:	cf 91       	pop	r28
    3034:	df 91       	pop	r29
    3036:	ff 91       	pop	r31
    3038:	ef 91       	pop	r30
    303a:	bf 91       	pop	r27
    303c:	af 91       	pop	r26
    303e:	9f 91       	pop	r25
    3040:	8f 91       	pop	r24
    3042:	7f 91       	pop	r23
    3044:	6f 91       	pop	r22
    3046:	5f 91       	pop	r21
    3048:	4f 91       	pop	r20
    304a:	3f 91       	pop	r19
    304c:	2f 91       	pop	r18
    304e:	0f 90       	pop	r0
    3050:	0f be       	out	0x3f, r0	; 63
    3052:	0f 90       	pop	r0
    3054:	1f 90       	pop	r1
    3056:	18 95       	reti

00003058 <__vector_9>:


/* Timer 1 Normal Mode Interrupt ISR */
ISR(TIMER1_OVF_vect)
{
    3058:	1f 92       	push	r1
    305a:	0f 92       	push	r0
    305c:	0f b6       	in	r0, 0x3f	; 63
    305e:	0f 92       	push	r0
    3060:	11 24       	eor	r1, r1
    3062:	2f 93       	push	r18
    3064:	3f 93       	push	r19
    3066:	4f 93       	push	r20
    3068:	5f 93       	push	r21
    306a:	6f 93       	push	r22
    306c:	7f 93       	push	r23
    306e:	8f 93       	push	r24
    3070:	9f 93       	push	r25
    3072:	af 93       	push	r26
    3074:	bf 93       	push	r27
    3076:	ef 93       	push	r30
    3078:	ff 93       	push	r31
    307a:	df 93       	push	r29
    307c:	cf 93       	push	r28
    307e:	cd b7       	in	r28, 0x3d	; 61
    3080:	de b7       	in	r29, 0x3e	; 62

	/*Increment the ticks of the program*/
	(*g_callBackPtr)();
    3082:	e0 91 2f 01 	lds	r30, 0x012F
    3086:	f0 91 30 01 	lds	r31, 0x0130
    308a:	09 95       	icall

}
    308c:	cf 91       	pop	r28
    308e:	df 91       	pop	r29
    3090:	ff 91       	pop	r31
    3092:	ef 91       	pop	r30
    3094:	bf 91       	pop	r27
    3096:	af 91       	pop	r26
    3098:	9f 91       	pop	r25
    309a:	8f 91       	pop	r24
    309c:	7f 91       	pop	r23
    309e:	6f 91       	pop	r22
    30a0:	5f 91       	pop	r21
    30a2:	4f 91       	pop	r20
    30a4:	3f 91       	pop	r19
    30a6:	2f 91       	pop	r18
    30a8:	0f 90       	pop	r0
    30aa:	0f be       	out	0x3f, r0	; 63
    30ac:	0f 90       	pop	r0
    30ae:	1f 90       	pop	r1
    30b0:	18 95       	reti

000030b2 <Timer1_init>:
void Timer1_init(const Timer1_ConfigType * Config_Ptr)
{
    30b2:	df 93       	push	r29
    30b4:	cf 93       	push	r28
    30b6:	00 d0       	rcall	.+0      	; 0x30b8 <Timer1_init+0x6>
    30b8:	cd b7       	in	r28, 0x3d	; 61
    30ba:	de b7       	in	r29, 0x3e	; 62
    30bc:	9a 83       	std	Y+2, r25	; 0x02
    30be:	89 83       	std	Y+1, r24	; 0x01
	TCCR1A = 0; // Normal mode
    30c0:	ef e4       	ldi	r30, 0x4F	; 79
    30c2:	f0 e0       	ldi	r31, 0x00	; 0
    30c4:	10 82       	st	Z, r1
	TCCR1B = 0; // Stop the timer
    30c6:	ee e4       	ldi	r30, 0x4E	; 78
    30c8:	f0 e0       	ldi	r31, 0x00	; 0
    30ca:	10 82       	st	Z, r1
	TCNT1 = Config_Ptr->initial_value;	/* Set timer1 initial value */
    30cc:	ac e4       	ldi	r26, 0x4C	; 76
    30ce:	b0 e0       	ldi	r27, 0x00	; 0
    30d0:	e9 81       	ldd	r30, Y+1	; 0x01
    30d2:	fa 81       	ldd	r31, Y+2	; 0x02
    30d4:	80 81       	ld	r24, Z
    30d6:	91 81       	ldd	r25, Z+1	; 0x01
    30d8:	11 96       	adiw	r26, 0x01	; 1
    30da:	9c 93       	st	X, r25
    30dc:	8e 93       	st	-X, r24
	OCR1A = Config_Ptr->compare_value;	/* Set timer1 compare value */
    30de:	aa e4       	ldi	r26, 0x4A	; 74
    30e0:	b0 e0       	ldi	r27, 0x00	; 0
    30e2:	e9 81       	ldd	r30, Y+1	; 0x01
    30e4:	fa 81       	ldd	r31, Y+2	; 0x02
    30e6:	82 81       	ldd	r24, Z+2	; 0x02
    30e8:	93 81       	ldd	r25, Z+3	; 0x03
    30ea:	11 96       	adiw	r26, 0x01	; 1
    30ec:	9c 93       	st	X, r25
    30ee:	8e 93       	st	-X, r24
	TIMSK |= (1<<OCIE1A); /* Enable Timer1 Compare A Interrupt */
    30f0:	a9 e5       	ldi	r26, 0x59	; 89
    30f2:	b0 e0       	ldi	r27, 0x00	; 0
    30f4:	e9 e5       	ldi	r30, 0x59	; 89
    30f6:	f0 e0       	ldi	r31, 0x00	; 0
    30f8:	80 81       	ld	r24, Z
    30fa:	80 61       	ori	r24, 0x10	; 16
    30fc:	8c 93       	st	X, r24
	TCCR1B |= ((TCCR1B & 0xF8) | (Config_Ptr->prescaler & 0x07));
    30fe:	ae e4       	ldi	r26, 0x4E	; 78
    3100:	b0 e0       	ldi	r27, 0x00	; 0
    3102:	ee e4       	ldi	r30, 0x4E	; 78
    3104:	f0 e0       	ldi	r31, 0x00	; 0
    3106:	80 81       	ld	r24, Z
    3108:	28 2f       	mov	r18, r24
    310a:	ee e4       	ldi	r30, 0x4E	; 78
    310c:	f0 e0       	ldi	r31, 0x00	; 0
    310e:	80 81       	ld	r24, Z
    3110:	98 2f       	mov	r25, r24
    3112:	98 7f       	andi	r25, 0xF8	; 248
    3114:	e9 81       	ldd	r30, Y+1	; 0x01
    3116:	fa 81       	ldd	r31, Y+2	; 0x02
    3118:	84 81       	ldd	r24, Z+4	; 0x04
    311a:	87 70       	andi	r24, 0x07	; 7
    311c:	89 2b       	or	r24, r25
    311e:	82 2b       	or	r24, r18
    3120:	8c 93       	st	X, r24

	if(Config_Ptr->mode == NORMAL_MODE)
    3122:	e9 81       	ldd	r30, Y+1	; 0x01
    3124:	fa 81       	ldd	r31, Y+2	; 0x02
    3126:	85 81       	ldd	r24, Z+5	; 0x05
    3128:	88 23       	and	r24, r24
    312a:	41 f4       	brne	.+16     	; 0x313c <Timer1_init+0x8a>
	{
		/* Configure timer1 control registers TCCR1A & TCCR1B
		 * 1. Normal Mode (Mode Number 0)
		*/
		TCCR1B &= ~(1 << WGM13) & ~(1 << WGM12);
    312c:	ae e4       	ldi	r26, 0x4E	; 78
    312e:	b0 e0       	ldi	r27, 0x00	; 0
    3130:	ee e4       	ldi	r30, 0x4E	; 78
    3132:	f0 e0       	ldi	r31, 0x00	; 0
    3134:	80 81       	ld	r24, Z
    3136:	87 7e       	andi	r24, 0xE7	; 231
    3138:	8c 93       	st	X, r24
    313a:	34 c0       	rjmp	.+104    	; 0x31a4 <Timer1_init+0xf2>
	}
	else if (Config_Ptr->mode == PWM_MODE)
    313c:	e9 81       	ldd	r30, Y+1	; 0x01
    313e:	fa 81       	ldd	r31, Y+2	; 0x02
    3140:	85 81       	ldd	r24, Z+5	; 0x05
    3142:	81 30       	cpi	r24, 0x01	; 1
    3144:	79 f4       	brne	.+30     	; 0x3164 <Timer1_init+0xb2>
	{
		/* Configure timer1 control registers TCCR1A & TCCR1B
		 * 1. PWM Mode WGM10=1 (Mode Number 1)
		*/
		TCCR1A |= (1 << WGM10);
    3146:	af e4       	ldi	r26, 0x4F	; 79
    3148:	b0 e0       	ldi	r27, 0x00	; 0
    314a:	ef e4       	ldi	r30, 0x4F	; 79
    314c:	f0 e0       	ldi	r31, 0x00	; 0
    314e:	80 81       	ld	r24, Z
    3150:	81 60       	ori	r24, 0x01	; 1
    3152:	8c 93       	st	X, r24
        TCCR1B &= ~(1 << WGM13) & ~(1 << WGM12);
    3154:	ae e4       	ldi	r26, 0x4E	; 78
    3156:	b0 e0       	ldi	r27, 0x00	; 0
    3158:	ee e4       	ldi	r30, 0x4E	; 78
    315a:	f0 e0       	ldi	r31, 0x00	; 0
    315c:	80 81       	ld	r24, Z
    315e:	87 7e       	andi	r24, 0xE7	; 231
    3160:	8c 93       	st	X, r24
    3162:	20 c0       	rjmp	.+64     	; 0x31a4 <Timer1_init+0xf2>
	}
	else if(Config_Ptr->mode == COMPARE_MODE)
    3164:	e9 81       	ldd	r30, Y+1	; 0x01
    3166:	fa 81       	ldd	r31, Y+2	; 0x02
    3168:	85 81       	ldd	r24, Z+5	; 0x05
    316a:	82 30       	cpi	r24, 0x02	; 2
    316c:	41 f4       	brne	.+16     	; 0x317e <Timer1_init+0xcc>
	{
		/* Configure timer1 control register TCCR1B
		 * 1. CTC Mode WGM12=1 WGM13=0 (Mode Number 4)
		*/
        TCCR1B |= (1 << WGM12);
    316e:	ae e4       	ldi	r26, 0x4E	; 78
    3170:	b0 e0       	ldi	r27, 0x00	; 0
    3172:	ee e4       	ldi	r30, 0x4E	; 78
    3174:	f0 e0       	ldi	r31, 0x00	; 0
    3176:	80 81       	ld	r24, Z
    3178:	88 60       	ori	r24, 0x08	; 8
    317a:	8c 93       	st	X, r24
    317c:	13 c0       	rjmp	.+38     	; 0x31a4 <Timer1_init+0xf2>
	}
	else if (Config_Ptr->mode == FAST_PWM_MODE)
    317e:	e9 81       	ldd	r30, Y+1	; 0x01
    3180:	fa 81       	ldd	r31, Y+2	; 0x02
    3182:	85 81       	ldd	r24, Z+5	; 0x05
    3184:	83 30       	cpi	r24, 0x03	; 3
    3186:	71 f4       	brne	.+28     	; 0x31a4 <Timer1_init+0xf2>
	{
		/* Configure timer1 control registers TCCR1A & TCCR1B
		 * 1. Fast PWM 8-bit Mode WGM10=1 WGM12=1 (Mode Number 5)
		*/
		TCCR1A |= (1 << WGM10);
    3188:	af e4       	ldi	r26, 0x4F	; 79
    318a:	b0 e0       	ldi	r27, 0x00	; 0
    318c:	ef e4       	ldi	r30, 0x4F	; 79
    318e:	f0 e0       	ldi	r31, 0x00	; 0
    3190:	80 81       	ld	r24, Z
    3192:	81 60       	ori	r24, 0x01	; 1
    3194:	8c 93       	st	X, r24
        TCCR1B |= (1 <<WGM12);
    3196:	ae e4       	ldi	r26, 0x4E	; 78
    3198:	b0 e0       	ldi	r27, 0x00	; 0
    319a:	ee e4       	ldi	r30, 0x4E	; 78
    319c:	f0 e0       	ldi	r31, 0x00	; 0
    319e:	80 81       	ld	r24, Z
    31a0:	88 60       	ori	r24, 0x08	; 8
    31a2:	8c 93       	st	X, r24
	}


}
    31a4:	0f 90       	pop	r0
    31a6:	0f 90       	pop	r0
    31a8:	cf 91       	pop	r28
    31aa:	df 91       	pop	r29
    31ac:	08 95       	ret

000031ae <Timer1_deInit>:

void Timer1_deInit(void)
{
    31ae:	df 93       	push	r29
    31b0:	cf 93       	push	r28
    31b2:	cd b7       	in	r28, 0x3d	; 61
    31b4:	de b7       	in	r29, 0x3e	; 62
    /* Stop timer1 and clear its registers */
	TCCR1A=0;
    31b6:	ef e4       	ldi	r30, 0x4F	; 79
    31b8:	f0 e0       	ldi	r31, 0x00	; 0
    31ba:	10 82       	st	Z, r1
	TCCR1B=0;
    31bc:	ee e4       	ldi	r30, 0x4E	; 78
    31be:	f0 e0       	ldi	r31, 0x00	; 0
    31c0:	10 82       	st	Z, r1
    TCNT1 = 0;
    31c2:	ec e4       	ldi	r30, 0x4C	; 76
    31c4:	f0 e0       	ldi	r31, 0x00	; 0
    31c6:	11 82       	std	Z+1, r1	; 0x01
    31c8:	10 82       	st	Z, r1
	TIMSK &= ~(1 << OCIE1A);
    31ca:	a9 e5       	ldi	r26, 0x59	; 89
    31cc:	b0 e0       	ldi	r27, 0x00	; 0
    31ce:	e9 e5       	ldi	r30, 0x59	; 89
    31d0:	f0 e0       	ldi	r31, 0x00	; 0
    31d2:	80 81       	ld	r24, Z
    31d4:	8f 7e       	andi	r24, 0xEF	; 239
    31d6:	8c 93       	st	X, r24
}
    31d8:	cf 91       	pop	r28
    31da:	df 91       	pop	r29
    31dc:	08 95       	ret

000031de <Timer1_setCallBack>:

void Timer1_setCallBack(void(*a_ptr)(void))
{
    31de:	df 93       	push	r29
    31e0:	cf 93       	push	r28
    31e2:	00 d0       	rcall	.+0      	; 0x31e4 <Timer1_setCallBack+0x6>
    31e4:	cd b7       	in	r28, 0x3d	; 61
    31e6:	de b7       	in	r29, 0x3e	; 62
    31e8:	9a 83       	std	Y+2, r25	; 0x02
    31ea:	89 83       	std	Y+1, r24	; 0x01
	/* Assign the address of the callback function to the global variable */
	g_callBackPtr = a_ptr;
    31ec:	89 81       	ldd	r24, Y+1	; 0x01
    31ee:	9a 81       	ldd	r25, Y+2	; 0x02
    31f0:	90 93 30 01 	sts	0x0130, r25
    31f4:	80 93 2f 01 	sts	0x012F, r24
}
    31f8:	0f 90       	pop	r0
    31fa:	0f 90       	pop	r0
    31fc:	cf 91       	pop	r28
    31fe:	df 91       	pop	r29
    3200:	08 95       	ret

00003202 <__udivmodsi4>:
    3202:	a1 e2       	ldi	r26, 0x21	; 33
    3204:	1a 2e       	mov	r1, r26
    3206:	aa 1b       	sub	r26, r26
    3208:	bb 1b       	sub	r27, r27
    320a:	fd 01       	movw	r30, r26
    320c:	0d c0       	rjmp	.+26     	; 0x3228 <__udivmodsi4_ep>

0000320e <__udivmodsi4_loop>:
    320e:	aa 1f       	adc	r26, r26
    3210:	bb 1f       	adc	r27, r27
    3212:	ee 1f       	adc	r30, r30
    3214:	ff 1f       	adc	r31, r31
    3216:	a2 17       	cp	r26, r18
    3218:	b3 07       	cpc	r27, r19
    321a:	e4 07       	cpc	r30, r20
    321c:	f5 07       	cpc	r31, r21
    321e:	20 f0       	brcs	.+8      	; 0x3228 <__udivmodsi4_ep>
    3220:	a2 1b       	sub	r26, r18
    3222:	b3 0b       	sbc	r27, r19
    3224:	e4 0b       	sbc	r30, r20
    3226:	f5 0b       	sbc	r31, r21

00003228 <__udivmodsi4_ep>:
    3228:	66 1f       	adc	r22, r22
    322a:	77 1f       	adc	r23, r23
    322c:	88 1f       	adc	r24, r24
    322e:	99 1f       	adc	r25, r25
    3230:	1a 94       	dec	r1
    3232:	69 f7       	brne	.-38     	; 0x320e <__udivmodsi4_loop>
    3234:	60 95       	com	r22
    3236:	70 95       	com	r23
    3238:	80 95       	com	r24
    323a:	90 95       	com	r25
    323c:	9b 01       	movw	r18, r22
    323e:	ac 01       	movw	r20, r24
    3240:	bd 01       	movw	r22, r26
    3242:	cf 01       	movw	r24, r30
    3244:	08 95       	ret

00003246 <__prologue_saves__>:
    3246:	2f 92       	push	r2
    3248:	3f 92       	push	r3
    324a:	4f 92       	push	r4
    324c:	5f 92       	push	r5
    324e:	6f 92       	push	r6
    3250:	7f 92       	push	r7
    3252:	8f 92       	push	r8
    3254:	9f 92       	push	r9
    3256:	af 92       	push	r10
    3258:	bf 92       	push	r11
    325a:	cf 92       	push	r12
    325c:	df 92       	push	r13
    325e:	ef 92       	push	r14
    3260:	ff 92       	push	r15
    3262:	0f 93       	push	r16
    3264:	1f 93       	push	r17
    3266:	cf 93       	push	r28
    3268:	df 93       	push	r29
    326a:	cd b7       	in	r28, 0x3d	; 61
    326c:	de b7       	in	r29, 0x3e	; 62
    326e:	ca 1b       	sub	r28, r26
    3270:	db 0b       	sbc	r29, r27
    3272:	0f b6       	in	r0, 0x3f	; 63
    3274:	f8 94       	cli
    3276:	de bf       	out	0x3e, r29	; 62
    3278:	0f be       	out	0x3f, r0	; 63
    327a:	cd bf       	out	0x3d, r28	; 61
    327c:	09 94       	ijmp

0000327e <__epilogue_restores__>:
    327e:	2a 88       	ldd	r2, Y+18	; 0x12
    3280:	39 88       	ldd	r3, Y+17	; 0x11
    3282:	48 88       	ldd	r4, Y+16	; 0x10
    3284:	5f 84       	ldd	r5, Y+15	; 0x0f
    3286:	6e 84       	ldd	r6, Y+14	; 0x0e
    3288:	7d 84       	ldd	r7, Y+13	; 0x0d
    328a:	8c 84       	ldd	r8, Y+12	; 0x0c
    328c:	9b 84       	ldd	r9, Y+11	; 0x0b
    328e:	aa 84       	ldd	r10, Y+10	; 0x0a
    3290:	b9 84       	ldd	r11, Y+9	; 0x09
    3292:	c8 84       	ldd	r12, Y+8	; 0x08
    3294:	df 80       	ldd	r13, Y+7	; 0x07
    3296:	ee 80       	ldd	r14, Y+6	; 0x06
    3298:	fd 80       	ldd	r15, Y+5	; 0x05
    329a:	0c 81       	ldd	r16, Y+4	; 0x04
    329c:	1b 81       	ldd	r17, Y+3	; 0x03
    329e:	aa 81       	ldd	r26, Y+2	; 0x02
    32a0:	b9 81       	ldd	r27, Y+1	; 0x01
    32a2:	ce 0f       	add	r28, r30
    32a4:	d1 1d       	adc	r29, r1
    32a6:	0f b6       	in	r0, 0x3f	; 63
    32a8:	f8 94       	cli
    32aa:	de bf       	out	0x3e, r29	; 62
    32ac:	0f be       	out	0x3f, r0	; 63
    32ae:	cd bf       	out	0x3d, r28	; 61
    32b0:	ed 01       	movw	r28, r26
    32b2:	08 95       	ret

000032b4 <itoa>:
    32b4:	fb 01       	movw	r30, r22
    32b6:	9f 01       	movw	r18, r30
    32b8:	e8 94       	clt
    32ba:	42 30       	cpi	r20, 0x02	; 2
    32bc:	c4 f0       	brlt	.+48     	; 0x32ee <itoa+0x3a>
    32be:	45 32       	cpi	r20, 0x25	; 37
    32c0:	b4 f4       	brge	.+44     	; 0x32ee <itoa+0x3a>
    32c2:	4a 30       	cpi	r20, 0x0A	; 10
    32c4:	29 f4       	brne	.+10     	; 0x32d0 <itoa+0x1c>
    32c6:	97 fb       	bst	r25, 7
    32c8:	1e f4       	brtc	.+6      	; 0x32d0 <itoa+0x1c>
    32ca:	90 95       	com	r25
    32cc:	81 95       	neg	r24
    32ce:	9f 4f       	sbci	r25, 0xFF	; 255
    32d0:	64 2f       	mov	r22, r20
    32d2:	77 27       	eor	r23, r23
    32d4:	0e 94 8b 19 	call	0x3316	; 0x3316 <__udivmodhi4>
    32d8:	80 5d       	subi	r24, 0xD0	; 208
    32da:	8a 33       	cpi	r24, 0x3A	; 58
    32dc:	0c f0       	brlt	.+2      	; 0x32e0 <itoa+0x2c>
    32de:	89 5d       	subi	r24, 0xD9	; 217
    32e0:	81 93       	st	Z+, r24
    32e2:	cb 01       	movw	r24, r22
    32e4:	00 97       	sbiw	r24, 0x00	; 0
    32e6:	a1 f7       	brne	.-24     	; 0x32d0 <itoa+0x1c>
    32e8:	16 f4       	brtc	.+4      	; 0x32ee <itoa+0x3a>
    32ea:	5d e2       	ldi	r21, 0x2D	; 45
    32ec:	51 93       	st	Z+, r21
    32ee:	10 82       	st	Z, r1
    32f0:	c9 01       	movw	r24, r18
    32f2:	0c 94 7b 19 	jmp	0x32f6	; 0x32f6 <strrev>

000032f6 <strrev>:
    32f6:	dc 01       	movw	r26, r24
    32f8:	fc 01       	movw	r30, r24
    32fa:	67 2f       	mov	r22, r23
    32fc:	71 91       	ld	r23, Z+
    32fe:	77 23       	and	r23, r23
    3300:	e1 f7       	brne	.-8      	; 0x32fa <strrev+0x4>
    3302:	32 97       	sbiw	r30, 0x02	; 2
    3304:	04 c0       	rjmp	.+8      	; 0x330e <strrev+0x18>
    3306:	7c 91       	ld	r23, X
    3308:	6d 93       	st	X+, r22
    330a:	70 83       	st	Z, r23
    330c:	62 91       	ld	r22, -Z
    330e:	ae 17       	cp	r26, r30
    3310:	bf 07       	cpc	r27, r31
    3312:	c8 f3       	brcs	.-14     	; 0x3306 <strrev+0x10>
    3314:	08 95       	ret

00003316 <__udivmodhi4>:
    3316:	aa 1b       	sub	r26, r26
    3318:	bb 1b       	sub	r27, r27
    331a:	51 e1       	ldi	r21, 0x11	; 17
    331c:	07 c0       	rjmp	.+14     	; 0x332c <__udivmodhi4_ep>

0000331e <__udivmodhi4_loop>:
    331e:	aa 1f       	adc	r26, r26
    3320:	bb 1f       	adc	r27, r27
    3322:	a6 17       	cp	r26, r22
    3324:	b7 07       	cpc	r27, r23
    3326:	10 f0       	brcs	.+4      	; 0x332c <__udivmodhi4_ep>
    3328:	a6 1b       	sub	r26, r22
    332a:	b7 0b       	sbc	r27, r23

0000332c <__udivmodhi4_ep>:
    332c:	88 1f       	adc	r24, r24
    332e:	99 1f       	adc	r25, r25
    3330:	5a 95       	dec	r21
    3332:	a9 f7       	brne	.-22     	; 0x331e <__udivmodhi4_loop>
    3334:	80 95       	com	r24
    3336:	90 95       	com	r25
    3338:	bc 01       	movw	r22, r24
    333a:	cd 01       	movw	r24, r26
    333c:	08 95       	ret

0000333e <_exit>:
    333e:	f8 94       	cli

00003340 <__stop_program>:
    3340:	ff cf       	rjmp	.-2      	; 0x3340 <__stop_program>
